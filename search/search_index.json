{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>SeaTable is an online lightweight database with a spreadsheet interface. It helps you to easily record and manage all kinds of scattered information. With APIs and SDKs, you can quickly scale to your needs, automate data processing and automate business processes.</p> <p>Main features includes:</p> <ul> <li>A spreadsheet like interface to records data supporting collaboratively editing.</li> <li>A form app to collect data from outside.</li> <li>Mobile ready UI to be used on browsers in mobile system to view and collect data.</li> <li>Comprehensive API and SDK for adding extensions.</li> <li>Filters, sorts, charts and pivotal tables to visualize and analyze data.</li> </ul>"},{"location":"#software-components","title":"Software Components","text":"<p>SeaTable consists of following component</p> <ul> <li>dtable-web: The website for manage bases.</li> <li>dtable-server: Store the bases and provide collaborating feature.</li> <li>dtable-db: Provide big data storage and SQL query interface.</li> <li>dtable-events: Background tasks likes email sending and so on.</li> <li>seaf-server: Store attachments (files and images).</li> <li>dtable-storage-serve: An simple abstract layer upon file storage and S3-like object storage.</li> </ul> <p>The following picture shows how the different components work together:</p> <p></p> <p>Some explanation:</p> <ul> <li>MariaDB, Memcache, Redis are running in their own docker containers.</li> <li>Redis is used for sending messages from dtable-web/dtable-server to dtable-events</li> <li>All the components use Memcache for storing cache and MariaDB for storing permanent information</li> <li>Bases are maintained in dtable-server and periodically saved to dtable-storage-server for persistent storage.</li> <li>Attachments are saved in seaf-server, which save to file storage/object storage</li> </ul> <p>A base in SeaTable is saved as a file, and when users access the base, it will be loaded into dtable-server. When the base is modified, dtable-server automatically saves it to dtable-storage-server every 5 minutes. dtable-storage-server creates a snapshot of the base every 24 hours.</p> <p>The base cannot contain more than 100,000 rows. If the records are close to 100,000, the record can be transferred from the file (dtable-server is responsible for management) to the big data storage (dtable-db is responsible for management) through the archive operation. dtable-db periodically saves backups of big data storage to dtable-storage-server.</p>"},{"location":"#license","title":"LICENSE","text":"<p>SeaTable Server has two editions:</p> <ul> <li>Developer Edition: for users that want to use SeaTable as database and heavy using APIs and scripts.  The developer edition has no limit on storage, row numbers and API calls, but can support at most 200 concurrent connections to dtable-server.</li> <li>Enterprise Edition: almost no limitation for storage, row numbers and API calls and have advanced permissions and user management features. It is meant for large teams to use SeaTable in both ways. Users can use it in the cloud or self-hosted.</li> </ul> <p>Additionally, there is SeaTable Cloud, a cloud service for users that do not want to self-host or simply trial SeaTable Server. SeaTable Cloud can be used free-of-charge with the \"Free\" subscription. More features and higher resource limits are available in SeaTable Cloud's paid subscriptions.</p> <p>The components of SeaTable Developer Edition are released under the following licenses:</p> <ul> <li>dtable-web: Apache License v2</li> <li>dtable-events: Apache License v2</li> <li>dtable-server: Proprietary License</li> <li>seaf-server: AGPLv3</li> </ul> <p>SeaTable developer edition should not be used to provide SaaS service or as a part of your SaaS service. Other kinds of usage are okay, including</p> <ul> <li>Personal or home use</li> <li>Internal in-house use</li> <li>Collaboration with customers</li> <li>IT projects for customers, as long as a separate server is used for each customer</li> </ul> <p>The SeaTable Enterprise Edition is released under a proprietary license. You find the EULA at https://seatable.io/en/eula.</p>"},{"location":"#report-issues","title":"Report Issues","text":"<p>Please report issues in our forum at https://forum.seatable.io.</p>"},{"location":"#more-information","title":"More Information","text":"<ul> <li>GitHub: https://github.com/seatable/seatable</li> </ul>"},{"location":"dtable-server-license/","title":"dtable-server-license","text":"<p>End User License Agreement for dtable-server</p> <p>Version: September 2020</p>"},{"location":"dtable-server-license/#1-parties-and-subject-matter","title":"1. Parties and Subject Matter","text":"<ol> <li> <p>The provisions of this End User License Agreement (\"EULA\") govern the relationship between Seafile Ltd., GuiGuLiangCheng, Block 2B, #310, HaiDian District, Beijing, China (\"Seafile\") and end users (\"End Users\") (collectively the \"Parties\") with respect to the licensing by Seafile of the software dtable-server (\"Server\" of \"Software\").</p> </li> <li> <p>A License Agreement between the Parties pursuant to this EULA is concluded when the End User downloads the Server, alone or bundled with other software. IF YOU DO NOT AGREE TO THIS EULA, DO NOT DOWNLOAD, INSTALL AND USE THE SERVER. The same applies for the software with which the Server is bundled.</p> </li> </ol>"},{"location":"dtable-server-license/#2-changes-to-the-eula","title":"2. Changes to the EULA","text":"<p>Seafile is entitled to amend this EULA. SeaTable posts the amended EULA on the website https://seatable.io no less than two months before it becomes effective. The End User is therefore advised to visit this EULA regularly and to check for amendments. IF YOU DO NOT AGREE TO THE AMENDED EULA, QUIT USING THE SERVER AND UNINSTALL IT. The same applies for the software with which the Server is bundled.</p>"},{"location":"dtable-server-license/#3-product-specification-availability-and-updates","title":"3. Product Specification, Availability and Updates","text":"<ol> <li> <p>The Server is a software developed by Seafile. Its functions and its requirements are described on the website https://seatable.io; technical details are provided in the administrator manual. The Server can be used free of charge. </p> </li> <li> <p>The Server is made available to the End User by download, bundled with other software in the form of the application SeaTable Community Edition (\"SeaTable CE\"), of which the Server is a key component and without which SeaTable CE is not functional.  This applies for installation media as well as updates.</p> </li> <li> <p>The End User is responsible for installation and configuration. Seafile does not offer any kind of support for the Server nor has the End User any claim. Seafile and its affiliates operate a Community Forum at https://forum.seatable.io where End Users can help one another.</p> </li> <li> <p>Seafile will regularly release new versions of the Server. At its sole discretion, it may add/modify/remove functions and features and/or supported platforms. Seafile informs about new releases and associated changes on its blog and in the Community Forum. </p> </li> <li> <p>Seafile may also decide, at its discretion, to discontinue the development of the Server.</p> </li> <li> <p>Some functions and features of the Server may depend on third-party products and services, all of which may be subject to changes. As a consequence, Seafile may need to modify or limit functions and features of the Server.</p> </li> </ol>"},{"location":"dtable-server-license/#5-rights-of-use","title":"5. Rights of Use","text":"<ol> <li> <p>Seafile grants to the End User the non-exclusive, non-transferable and non-sublicensable right to install, run and use the Server to the extent granted by this EULA.</p> </li> <li> <p>The rights of use, granted under this EULA, are unlimited in time as long as the End User agrees to this EULA.</p> </li> <li> <p>Any use of the Server beyond the scope granted under this EULA is prohibited and may be prosecuted.</p> </li> <li> <p>The rights of use, granted pursuant to this EULA, do not include any rights to the source code of the Server.</p> </li> <li> <p>The rights, granted pursuant to this EULA, do not include and the End User is not entitled to and shall not allow a third party to (I) attempt to circumvent any technical measures and devices of the Server that are directed at, or have the effect of, enforcing this EULA and its terms; (II) modify, create derivative works, translate, decompile or create or attempt to create, by reverse engineering or otherwise, the source code of the Server;  (III) remove, modify or obscure any copyright, trademark, service mark or other proprietary rights, confidentiality, serial number, notice, legend or similar on any copy of the Server, or related data, manuals, documentation or other materials;  (IV) market, sell, lend, rent, lease or distribute the Server; (V) use the Server, on its own or as a part of another product and irrespective of the delivery model, for creating or providing a commercial service or a free public or de-facto public service; and (VI) assign, sublicense or otherwise transfer any rights in or to the Server.</p> </li> <li> <p>Seafile retains all right, title and interest in and to the Server (and any new versions thereof provided by Seafile) and in all copies, modifications and derivative works of the Server including, without limitation, all rights to patent, copyright, trade secret, trademark and other proprietary or intellectual property rights.</p> </li> </ol>"},{"location":"dtable-server-license/#6-documentation-and-interfaces","title":"6. Documentation and Interfaces","text":"<ol> <li>Seafile and its affiliates provide an online user and administrator manual in English on the website https://seatable.io. Any further languages may be offered by Seafile on a voluntary basis. </li> <li>Seafile retains all right, title and interest in and to such documentation and in all copies, modifications and derivative works thereof.</li> <li>The Server may, at Seafile's sole discretion, provide application programming interfaces or other software interfaces (collectively \"API\") that allow third-party or customer applications to communicate with the Server (collectively \"third-party software\"). Seafile may change or discontinue APIs at any time without any obligation or liability to the End User. The respective provider is responsible for the third-party software. The provisions of the EULA do not apply to any such third-party software. Under no circumstances is Seafile liable for any third-party software.</li> </ol>"},{"location":"dtable-server-license/#7-obligations-and-duties-of-the-end-user","title":"7. Obligations and Duties of the End User","text":"<ol> <li> <p>The End User is obliged to use the Server only in accordance with the provisions of this EULA and in accordance with laws and regulations applicable to such use and may not infringe on any third-party rights in connection with such use. The End User must, in particular, comply with all applicable data protection and export control provisions.</p> </li> <li> <p>The requirements for the Server are specified in the administrator manual. The End User familiarizes himself/hersef with these requirements prior to download, installation and use of the Server.</p> </li> <li> <p>The End User reports errors and bugs (\"Defects\") on the Community Forum. The report of any Defect must include</p> </li> <li> <p>a detailed description of the defect,</p> </li> <li>instructions to reproduce it,</li> <li>the relevant logs,</li> <li>the Software's version and</li> <li>the operating system and version. </li> </ol> <p>If a Defect occurred when accessing the Software via a browser, the report must additionally include</p> <ul> <li>browser type and version,</li> <li>screenshots of the defect and</li> <li>the content of browser console.</li> </ul>"},{"location":"dtable-server-license/#8-data-privacy","title":"8. Data Privacy","text":"<ol> <li> <p>Seafile collects, processes and uses personal data of the End User as described in detail in the Privacy Statement.</p> </li> <li> <p>Non-personal or anonymous data may be collected automatically to improve functionality and the user experience with the Server. The End User agrees that Seafile owns all rights in, and is free to use any such non-personal or anonymous data in any way it deems fit for development, diagnostic, corrective as well as marketing or any other purposes.</p> </li> </ol>"},{"location":"dtable-server-license/#9-limitation-of-liability","title":"9. Limitation of Liability","text":"<p>IN NO EVENT, UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING, WILL SEAFILE BE LIABLE TO END USERS FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY THE END USER OR THIRD PARTIES OR A FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SEAFILE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"dtable-server-license/#10-warranty-claims","title":"10. Warranty Claims","text":"<p>THERE IS NO WARRANTY FOR THE SERVER, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH THE END USER. SHOULD THE PROGRAM PROVE DEFECTIVE, THE END USER ASSUMES THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"dtable-server-license/#11-final-provisions","title":"11. Final Provisions","text":"<ol> <li> <p>Any notifications and declarations in connection with the EULA will be made through public announcements on the website https://seatable.io and/or the Community Forum at https://forum.seatable.io. The End User is responsible for checking these two sites regularly.</p> </li> <li> <p>The EULA and any disputes in connection with it are solely governed by, and construed in accordance with, the law of the People's Republic of China.</p> </li> <li> <p>The exclusive place of jurisdiction is Beijing, China. Seafile reserves the right to sue at the End User\u2019s head office.</p> </li> <li> <p>If a provision of the EULA is found to be partly or wholly invalid or unenforceable, this shall not affect the validity and enforceablity of the remaining providions of the EULA. In place of the invalid or unenforceable provision, a valid and enforceable provision shall apply which reflects as closely as possible the commercial intention of the parties as regards the invalid or unenforceable provision.</p> </li> </ol>"},{"location":"home/","title":"Introduction","text":"<p>SeaTable is an online lightweight database with a spreadsheet interface. It helps you to easily record and manage all kinds of scattered information. With APIs and SDKs, you can quickly scale to your needs, automate data processing and automate business processes.</p> <p>Main features includes:</p> <ul> <li>A spreadsheet like interface to records data supporting collaboratively editing.</li> <li>A form app to collect data from outside.</li> <li>Mobile ready UI to be used on browsers in mobile system to view and collect data.</li> <li>Comprehensive API and SDK for adding extensions.</li> <li>Filters, sorts, charts and pivotal tables to visualize and analyze data.</li> </ul>"},{"location":"home/#software-components","title":"Software components","text":"<p>SeaTable consists of following component</p> <ul> <li>dtable-web: The website for manage tables.</li> <li>dtable-server: Store the tables and provide collaborating feature.</li> <li>dtable-events: Background tasks likes email sending and so on.</li> <li>seaf-server: Store attachments (files and images)</li> <li>dtable-db: Provides SQL interface and archiving</li> </ul> <p>The following picture shows how the different components work together:</p> <p></p> <p>Some explanation:</p> <ul> <li>MariaDB, Memcache, Redis are running in their own docker containers.</li> <li>Redis is used for sending messages from dtable-web/dtable-server to dtable-events</li> <li>All the components use Memcache for storing cache and MariaDB for storing permanent information</li> <li>Bases are maintained in dtable-server and periodically saved to file/objects storage for persistent storage.</li> <li>Attachments are saved in file/objects storage</li> </ul>"},{"location":"home/#license","title":"LICENSE","text":"<p>SeaTable has three versions</p> <ul> <li>Developer edition: for users that want to use SeaTable as database and heavy using APIs and scripts.  The developer edition has no limit on storage, row numbers and API calls, but can support at most 200 concurrent connections to dtable-server.</li> <li>Cloud edition: for users that want to use SeaTable as a collaboration tool. It has limitation for storage, row numbers and API calls.</li> <li>Enterprise edition: almost no limitation for storage, row numbers and API calls and have advanced permissions and user management features. It is meant for large teams to use SeaTable in both ways. Users can use it in the cloud or self-hosted.</li> </ul> <p>The different components of SeaTable developer edition are released under different licenses:</p> <ul> <li>dtable-web: Apache License v2</li> <li>dtable-events: Apache License v2</li> <li>dtable-server: Proprietary License</li> <li>seaf-server: AGPLv3</li> <li>dtable-db: Proprietary License</li> </ul> <p>SeaTable developer edition should not be used to provide SaaS service or as a part of your SaaS service. Other kinds of usage are okay, including</p> <ul> <li>Use it internally in your company.</li> <li>Personal or home use.</li> <li>Use it to collaborate with your customers.</li> <li>Use it for IT projects for your customers, as long as you use a separate server for each of your customers.</li> </ul> <p>The SeaTable enterprise edition is released under proprietary license.</p>"},{"location":"home/#report-issues","title":"Report issues","text":"<p>Please report issues to our forum https://forum.seatable.io/</p>"},{"location":"home/#more-information","title":"More information","text":"<ul> <li>GitHub: https://github.com/seatable/seatable</li> </ul>"},{"location":"authentication/auth_overview/","title":"Authentication overview","text":"<p>SeaTable Server Enterprise Edition (SeaTable) supports multiple authentication types.</p> <p>The default authentication type is authentication against the local user database (with or without two-factor authentication).</p> <p>Additionally, SeaTable supports the following external authentication types:</p> <ul> <li>LDAP (Auth and Sync)</li> <li>OAuth</li> <li>SAML</li> </ul> <p>Finally, users can also authenticate using JWT, which may be interesting for some special use cases.</p>"},{"location":"authentication/auth_overview/#username","title":"Username","text":"<p>SeaTable assigns every user a unique <code>username</code>, regardless of the authentication type used. The <code>username</code> serves as a key to link the different SQL database tables.</p> <p>The <code>username</code> looks like this: <code>b7bd00e840a14b748ce2bffdf409488b@auth.local</code> The corresponding regular expression is <code>^[a-f0-9]{32}(@auth.local)$</code>. The part of the username in front of the @-sign is a random value. If a user account is deleted and recreated with exactly the same details, the new <code>username</code> will be different from the previous one.</p> <p>The <code>username</code> is generated when the account is created. The time at which SeaTable creates the account in the database depends on the authentication type:</p> <ul> <li>Local user database: when the administrator registers the user or when the user self-registers</li> <li>LDAP Auth, OAuth, and SAML: when the user logs in for the first time</li> <li>LDAP Sync: when the sync job runs for the first time after the corresponding modification in the LDAP directory</li> </ul> <p>One username - multiple names</p> <p>For historical reasons, the SQL database tables use non-uniform names for <code>username</code>. In some tables, <code>username</code> is simply <code>user</code>. In some others, it goes by the name of <code>email</code> or <code>virtual_id</code>. Despite the inconsistent naming, it is always the same object. In the SeaTable Manual, only <code>username</code> is used unless reference is made to a specific table column.</p>"},{"location":"authentication/auth_overview/#database-structure","title":"Database Structure","text":"<p>SeaTable's databases encompass almost 100 tables. Four of those are relevant for user management and authentication. (Tables related to 2FA are disregarded in this document.)</p> Database Table ccnet_db EmailUser dtable_db profile_profile dtable_db social_auth_usersocialauth dtable_db id_in_org_tuple <p>Note: The table LDAPUsers in ccnet_db is no longer used.</p> <p>The database tables shown in the following sections are for illustrative purposes only. Yet, they represent a possible system configuration and are internally consistent.</p>"},{"location":"authentication/auth_overview/#table-emailuser","title":"Table EmailUser","text":"<p>The table EmailUser stores all user accounts of a SeaTable Server with the account status and privileges for every user account. Additionally, the table also contains the (hashed) passwords for all users that authenticate directly against SeaTable.</p> <pre><code>mysql&gt; select email,is_staff,is_active,left(passwd,25) from ccnet_db.EmailUser;\n+---------------------------------------------+----------+-----------+---------------------------+\n| email                                       | is_staff | is_active | left(passwd,20)           |\n+---------------------------------------------+---------------------------+----------+-----------+\n| b7bd00e840a14b748ce2bffdf409488b@auth.local |        1 |         1 | PBKDF2SHA256$10000$4cd... |\n| 12ae56789f1e4c8d8e1c31415867317c@auth.local |        0 |         1 | PBKDF2SHA256$10000$736... |\n| 145504ae043c438cbb55f2afb084d586@auth.local |        0 |         1 | !                         |\n| 91e3f171e9214b0cab6418abfb70bc53@auth.local |        0 |         1 | !                         |\n| 1a8d6725c4ae40c688b40028fd62c73f@auth.local |        0 |         1 | !                         |\n+---------------------------------------------+---------------------------+----------+-----------+\n</code></pre> <p><code>is_staff</code> determines whether the user has system administrator privileges. <code>is_staff</code> accepts only 0 (False) and 1 (True) as values. </p> <p><code>is_active</code> determines whether the user is active. Only active users can log into SeaTable. <code>is_active</code> also accepts only 0 (False) and 1 (True) as values.</p> <p>Users with a password in the local SQL database:</p> <p>SeaTable stores the passwords in the database as hash values. Every password hash starts with <code>PBKDF2SHA256$10000$</code> which means that the password was hashed using the PBKDF2SHA256 algorithm and that 10.000 iterations where used (more about PBKDF2 on Wikipedia).</p> <p>The first two users in the sample table above are users using the default authentication type. The first of the two is system administrator.</p> <p>External authentication:</p> <p>A <code>!</code> instead of a hash value means that the user uses external authentication. The table, however, does not contain the information of which authentication type.</p> <p>The last three users in the sample table above are users authenticating using either LDAP, OAuth, or SAML.</p>"},{"location":"authentication/auth_overview/#table-profile_profile","title":"Table profile_profile","text":"<p>The table <code>profile_profile</code>, as the name indicates, contains profile information for every user in the system such as nickname, interface language, and contact email address. Every record in the table <code>EmailUser</code> has its correspondence in <code>profile_profile</code>.</p> <pre><code>mysql&gt; select user,nickname,lang_code,contact_email,login_id from dtable_db.profile_profile;\n+---------------------------------------------+--------------+-----------+-------------------+----------+\n| user                                        | nickname     | lang_code | contact_email     | login_id |\n+---------------------------------------------+--------------+-----------+-------------------+----------+\n| b7bd00e840a14b748ce2bffdf409488b@auth.local | admin        | en        | admin@seatable.io | NULL     |\n| 12ae56789f1e4c8d8e1c31415867317c@auth.local | Test         | en        | test@seatable.io  | NULL     |\n| 145504ae043c438cbb55f2afb084d586@auth.local | Hulk         | en        | hulk@seatable.io  | hulk     |\n| 91e3f171e9214b0cab6418abfb70bc53@auth.local | Tony Stark   | en        | tony@seatable.io  | tony     |\n| 1a8d6725c4ae40c688b40028fd62c73f@auth.local | Steve Rogers | en        | steve@seatable.io | steve    |\n+---------------------------------------------+--------------+-----------+----------+-------------------+\n</code></pre> <p><code>nickname</code> is the display name of the user in the web interface of SeaTable. </p> <p><code>contact_email</code> is the real email address of the user. SeaTable sends notifications to this address.</p> <p><code>login_id</code> is an alternative to the username that the user can use to log in. The <code>login_id</code> can only be set via SeaTable API and not in system administration in SeaTable's web interface.</p> <p>Three valid combos for default authentication</p> <p>Users authenticating against the local database can use the following three combinations to login: \\1) <code>contact_email</code> + <code>password</code> \\2) <code>login_id</code> + <code>password</code> \\3) <code>username</code> + <code>password</code></p>"},{"location":"authentication/auth_overview/#table-social_auth_usersocialauth","title":"Table social_auth_usersocialauth","text":"<p>The table <code>social_auth_usersocialauth</code> is critical for external authentication with LDAP, SAML, or OAuth. This table maps the user's SeaTable username to its unique identifiers from the identity providers. Every record in the table <code>EmailUser</code> without a password must have at least one correspondence in this table to be able to log into SeaTable using external authentication. </p> <pre><code>mysql&gt; select username,provider,uid from dtable_db.social_auth_usersocialauth;\n+---------------------------------------------+----------------+--------------------------------------+\n| username                                    | provider       | uid                                  |\n+---------------------------------------------+----------------+--------------------------------------+\n| 145504ae043c438cbb55f2afb084d586@auth.local | OAuth          | 877e1964-5585-4e1a-b069-1951ff79d373 |\n| 91e3f171e9214b0cab6418abfb70bc53@auth.local | Authentik-SAML | 28347@authentik                      |\n| 1a8d6725c4ae40c688b40028fd62c73f@auth.local | my-ldap        | 39731673920273                       |\n+---------------------------------------------+----------------+--------------------------------------+\n</code></pre> <p><code>provider</code> specifies the external authentication used.  The name shown in this column is the name specified in the configuration of the external authentication source in<code>dtable_web_settings.py</code>.</p> <p><code>uid</code> in this table is the unique identifier as communicated by the external authentication service. The <code>uid</code> has to be provided by the external authentication method and allows to match the users from the external service with the users inside SeaTable. This <code>uid</code> must not be changed over the lifetime of the user (despite name, email address, ... changes) If the <code>uid</code> changes, SeaTable considers the user as a new user and creates a new <code>username</code> accordingly.</p>"},{"location":"authentication/auth_overview/#table-id_in_org_tuple","title":"Table id_in_org_tuple","text":"<p>This table stores the user IDs. Because setting a user ID is optional, this table can be significantly shorter than all the other three tables.</p> <pre><code>mysql&gt; select * from dtable_db.id_in_org_tuple;\n+---------------------------------------------+-----------+--------+\n| virtual_id                                  | id_in_org | org_id |\n+---------------------------------------------+-----------+--------+\n| b7bd00e840a14b748ce2bffdf409488b@auth.local | 21        |     -1 |\n| 145504ae043c438cbb55f2afb084d586@auth.local | 222       |     12 |\n| 91e3f171e9214b0cab6418abfb70bc53@auth.local | 333AZE    |     34 |\n| 1a8d6725c4ae40c688b40028fd62c73f@auth.local | EF_3479   |     -1 |\n+---------------------------------------------+-----------+--------+\n</code></pre> <p><code>id_in_org</code> is the ID of the user. The user ID can be an alphanumeric string and must be unique within every team/organization.</p> <p><code>org_id</code> is the id of the team/organization which is unique in the system. An <code>org_id</code> value of -1 signifies that the user does not belong to any team/organization.</p>"},{"location":"authentication/auth_overview_old/","title":"Authentication overview","text":"<p>User accounts and their authentication are stored in the SQL database of SeaTable. This article is intended for administrators and provides technical details of SeaTable's database structure and gives concrete action instructions on how to migrate users from one authentication type to another.</p> <p>The default authentication method of SeaTable is against the user accounts in the local SQL database. At the same time SeaTable offers the possibility to use other authentication methods like LDAP, SAML, OAuth and JWT.</p>"},{"location":"authentication/auth_overview_old/#the-username-identifies-the-user","title":"The username identifies the user","text":"<p>Each user in SeaTable has a <code>username</code>. <code>b7bd00e840a14b748ce2bffdf409488b@auth.local</code> would be an example of such a <code>username</code> and the matching regex would be <code>^[a-f0-9]{32}(@auth.local)$</code>.</p> <p>The <code>username</code> is unique and generated during the creation of a user. It is not a hash value of the email address which means if a user is deleted and recreated, a new username will be given each time.</p> <p>This <code>username</code> is used as a key to link the different SQL database tables. </p> <p>There is only one username:</p> <p>In the different database tables of seatable different column names are used for the <code>username</code>. Sometimes it is the <code>user</code>, sometimes the <code>email</code> or the <code>virtual_id</code>. It is always the same object, which is always called <code>username</code> in this documentation.</p>"},{"location":"authentication/auth_overview_old/#database-structure-of-users-and-their-authentication","title":"Database structure of users and their authentication","text":"<p>Even though SeaTable has almost 100 database tables, only four are needed to define a user and his authentication.</p> Database Table ccnet_db EmailUser dtable_db profile_profile dtable_db social_auth_usersocialauth dtable_db id_in_org_tupble"},{"location":"authentication/auth_overview_old/#emailuser","title":"EmailUser","text":"<p>This table stores all user accounts of the SeaTable server with the account status and privileges for every user account. Additionally, the table also contains the passwords for all users that authenticate directly against SeaTable</p> <p><pre><code>mysql&gt; select email,left(passwd,25),is_staff,is_active from EmailUser;\n+---------------------------------------------+---------------------------+----------+-----------+\n| email                                       | left(passwd,20)           | is_staff | is_active |\n+---------------------------------------------+---------------------------+----------+-----------+\n| b7bd00e840a14b748ce2bffdf409488b@auth.local | PBKDF2SHA256$10000$4cd... |        1 |         1 |\n| 12ae56789f1e4c8d8e1c31415867317c@auth.local | PBKDF2SHA256$10000$736... |        0 |         1 |\n| 145504ae043c438cbb55f2afb084d586@auth.local | !                         |        0 |         1 |\n| 91e3f171e9214b0cab6418abfb70bc53@auth.local | !                         |        0 |         1 |\n| 1a8d6725c4ae40c688b40028fd62c73f@auth.local | !                         |        0 |         1 |\n+---------------------------------------------+---------------------------+----------+-----------+\n</code></pre> Users with a password in the local SQL database:</p> <p>SeaTable stores the passwords in the database as a hash value. Every password hash starts with <code>PBKDF2SHA256$10000$</code> which shows that the password was hashed with the algorithm Pbkdf2Sha256 and 10.000 iterations where used. More info on wikipedia about PBKDF2.</p> <p>External authentication:</p> <p>If there is a <code>!</code> instead of the hash value, this indicates that the login for this user requires an external authentication. The <code>!</code> in the last three entries shows that these users use a different authentication method.</p> <p>The database columns <code>is_staff</code> and <code>is_active</code> accept only 0 (=false) and 1 (=true) as values. <code>is_staff</code> determines whether the user has administrator rights and <code>is_active</code> determines whether the user is still active and thus a login is possible.</p> <p>It is recommended to have at least on local admin account available</p> <p>There may always be situations where the external authentication does not work or is not available. In this case it is recommended to have at least one local administrator account.</p>"},{"location":"authentication/auth_overview_old/#profile_profile","title":"profile_profile","text":"<p>This table, as the name indicates, contains profile information for every user in the system such as nickname, interface language, and contact email address.</p> <p>For every user in the table <code>EmailUser</code> you should find an entry in <code>profile_profile</code>. </p> <pre><code>mysql&gt; select user,nickname,lang_code,login_id,contact_email from profile_profile;\n+---------------------------------------------+--------------+-----------+----------+-------------------+\n| user                                        | nickname     | lang_code | login_id | contact_email     |\n+---------------------------------------------+--------------+-----------+----------+-------------------+\n| b7bd00e840a14b748ce2bffdf409488b@auth.local | admin        | en        | NULL     | admin@seatable.io |\n| 12ae56789f1e4c8d8e1c31415867317c@auth.local | Test         | en        | NULL     | test@seatable.io  |\n| 145504ae043c438cbb55f2afb084d586@auth.local | Hulk         | en        | hulk     | hulk@seatable.io  |\n| 91e3f171e9214b0cab6418abfb70bc53@auth.local | Tony Stark   | en        | tony     | tony@seatable.io  |\n| 1a8d6725c4ae40c688b40028fd62c73f@auth.local | Steve Rogers | en        | steve    | steve@seatable.io |\n+---------------------------------------------+--------------+-----------+----------+-------------------+\n</code></pre> <p>The <code>nickname</code> is the display name of the user in the webinterface of SeaTable. The <code>contact_email</code> is the real email address of the user. With the <code>login_id</code> a user can log in to the seatable web interface. The <code>login_id</code> can only be assigned via SeaTable API and not in the system admin area.</p> <p>Three ways to login:</p> <p>Users with local passwords can use the following three combinations to login: 1) <code>contact_email</code> + <code>Password</code> 2) <code>login_id</code> + <code>Password</code> 3) <code>username</code> + <code>Password</code></p> <p>Every combination will grant access to the webinterface of SeaTable.</p>"},{"location":"authentication/auth_overview_old/#social_auth_usersocialauth","title":"social_auth_usersocialauth","text":"<p>This table maps the users\u2019 unique identifiers from the identity providers to SeaTable\u2019s username. This table only contains records for the users authenticating against LDAP, SAML or OAuth. If no password is defined for a user, an entry must exist in this database table to enable external authentication. The value <code>provider</code> specifies which external authentication should be used. </p> <pre><code>mysql&gt; select username,provider,uid from social_auth_usersocialauth;\n+---------------------------------------------+----------------+--------------------------------------+\n| username                                    | provider       | uid                                  |\n+---------------------------------------------+----------------+--------------------------------------+\n| 145504ae043c438cbb55f2afb084d586@auth.local | Azure          | 877e1964-5585-4e1a-b069-1951ff79d373 |\n| 91e3f171e9214b0cab6418abfb70bc53@auth.local | Authentik-SAML | 28347@authentik                      |\n| 1a8d6725c4ae40c688b40028fd62c73f@auth.local | my-ldap        | 39731673920273                       |\n+---------------------------------------------+----------------+--------------------------------------+\n</code></pre> <p>A corresponding authentication method must be defined in <code>dtable_web_settings.py</code>. Check for necessary configuration options here:</p> <ul> <li>SAML_PROVIDER_IDENTIFIER</li> <li>LDAP_PROVIDER</li> <li>OAUTH_PROVIDER_DOMAIN</li> </ul> <p>The <code>uid</code> in this table is the unique identifier of the user at the external authentication service. The <code>uid</code> has to be provided by the external authentication method and allows to match the users from the external service with the users inside SeaTable. This <code>uid</code>, which is supplied by the <code>provider</code>, must always remain the same so that the user can be uniquely assigned, even if his email address, name, etc. changes. If the <code>uid</code> changes, SeaTable considers this user as a new user and creates a new <code>username</code> accordingly.</p>"},{"location":"authentication/auth_overview_old/#id_in_org_tupble","title":"id_in_org_tupble","text":"<p>This table stores the ID of users. Because setting a user ID is optional, this table can be significantly shorter than all the other three tables. </p> <p>The <code>org_id</code> is the id of the team/organization which is unique in the system. If the <code>org_id</code> is -1 this user account does not belong to any team/organization.</p> <p>Unique value inside each team:</p> <p>Each ID may exist only once within a team (=organization).</p> <pre><code>mysql&gt; select * from id_in_org_tuple;\n+---------------------------------------------+-----------+--------+\n| virtual_id                                  | id_in_org | org_id |\n+---------------------------------------------+-----------+--------+\n| b7bd00e840a14b748ce2bffdf409488b@auth.local | 21        |     -1 |\n| 145504ae043c438cbb55f2afb084d586@auth.local | 222       |     12 |\n| 91e3f171e9214b0cab6418abfb70bc53@auth.local | 333AZE    |     34 |\n| 1a8d6725c4ae40c688b40028fd62c73f@auth.local | EF_3479   |     -1 |\n+---------------------------------------------+-----------+--------+\n</code></pre>"},{"location":"authentication/auth_switch/","title":"Switch authentication type of a user","text":"<p>Before you make any changes to your database, be sure to make a database backup!</p>"},{"location":"authentication/auth_switch/#migration-from-local-password-to-external-authentication","title":"Migration from local password to external authentication","text":"<p>The migration of a local user into a user with an external authentication like LDAP, SAML, OAUTH is comparatively simple, but requires a direct intervention into the database of SeaTable. </p>"},{"location":"authentication/auth_switch/#general-procedure","title":"General procedure","text":"<ol> <li>Configure and test the desired external authentication. Note the name of the <code>provider</code> you use in the config file. The user to be migrated should already be able to log in with this new authentication type, but he will be created as a new user with a new unique identifier, so he will not have access to his existing bases. Note the <code>uid</code> from the <code>social_auth_usersocialauth</code> table. Delete this new, still empty user again.</li> <li>Determine the <code>xxx@auth.local</code> address of the user to be migrated. </li> <li>Replace the password hash with an exclamation mark.</li> <li>Create a new entry in <code>social_auth_usersocialauth</code> with the <code>xxx@auth.local</code>, your <code>provider</code> and the <code>uid</code>.</li> </ol> <p>The login with the password stored in the local database is not possible anymore. After logging in via external authentication, the user has access to all his previous bases.</p>"},{"location":"authentication/auth_switch/#example","title":"Example","text":"<p>This example shows how to migrate the user with the username <code>12ae56789f1e4c8d8e1c31415867317c@auth.local</code> from local database authentication to SAML. The SAML authentication is configured in <code>dtable_web_settings.py</code> with the provider name <code>authentik-saml</code>. The <code>uid</code> of the user inside the Identity Provider is <code>HR12345</code>.</p> <p>This is what the database looks like before these commands must be executed:</p> <pre><code>mysql&gt; select email,left(passwd,25) from EmailUser where email = '12ae56789f1e4c8d8e1c31415867317c@auth.local';\n+---------------------------------------------+------------------------------+\n| email                                       | left(passwd,23)              |\n+---------------------------------------------+------------------------------+\n| 12ae56789f1e4c8d8e1c31415867317c@auth.local | PBKDF2SHA256$10000$4cdda6... |\n+---------------------------------------------+------------------------------+\n\nmysql&gt; update EmailUser set passwd = '!' where email = '12ae56789f1e4c8d8e1c31415867317c@auth.local';\n\nmysql&gt; insert into social_auth_usersocialauth \\\n  ('username', 'provider', 'uid') \\ \n  set \\\n  ('12ae56789f1e4c8d8e1c31415867317c@auth.local', 'authentik-saml', 'HR12345');\n</code></pre> <p>Afterwards the databases should look like this:</p> <pre><code>mysql&gt; select email,passwd from EmailUser where email = '12ae56789f1e4c8d8e1c31415867317c@auth.local';\n+---------------------------------------------+------- +\n| email                                       | passwd |\n+---------------------------------------------+--------+\n| 12ae56789f1e4c8d8e1c31415867317c@auth.local | !      |\n+---------------------------------------------+--------+\n\nmysql&gt; select username,provider,uid from social_auth_usersocialauth where username = '12ae56789f1e4c8d8e1c31415867317c@auth.local';\n+---------------------------------------------+----------------+---------+\n| username                                    | provider       | uid     |\n+---------------------------------------------+----------------+---------+\n| 12ae56789f1e4c8d8e1c31415867317c@auth.local | authentik-saml | HR12345 |\n+---------------------------------------------+----------------+---------+\n</code></pre>"},{"location":"authentication/auth_switch/#migration-from-one-external-authentication-to-another","title":"Migration from one external authentication to another","text":"<p>First configure the two external authentications and test them with a dummy user. Then, to migrate all the existing users you only need to make changes to the <code>social_auth_usersocialauth</code> table. No entries need to be deleted or created. You only need to modify the existing ones. The <code>xxx@auth.local</code> remains the same, you only need to replace the <code>provider</code> and the <code>uid</code>.</p>"},{"location":"authentication/auth_switch/#migration-from-external-authentication-to-local-password","title":"Migration from external authentication to local password","text":"<p>First, delete the entry in the <code>social_auth_usersocialauth</code> table that belongs to the particular user.</p> <p>Then you can reset the user's password, e.g. via the web interface. The user will be assigned a local password and from now on the authentication against the local database of SeaTable will be done. </p>"},{"location":"authentication/auth_switch/#use-ldap-and-saml-together","title":"Use LDAP and SAML together","text":"<p>SeaTable supports since version 3.5 to use SAML and LDAP together for one user. To activate this function the following configuration has to be set in <code>dtable_web_settings.py</code>.</p> <pre><code># Enable that SAML and LDAP use the same username\nLDAP_SAML_USE_SAME_UID = True\n</code></pre> <p>More details about this option will follow soon.</p>"},{"location":"authentication/jwt/","title":"JSON Web Tokens","text":"<p>JSON Web Tokens (=JWT) is another authentication type SeaTable provides. It is used by the SeaTable API but it can also be used to allow server-to-server authentication. JWTs are used for example if you switch from (SeaTable Cloud)[https://cloud.seatable.io] to the (team administration)[https://account.seatable.io] without the need to re-authenticate. </p>"},{"location":"authentication/jwt/#what-is-jwt","title":"What is JWT?","text":"<p>JWT is a very popular technology but comes with its share of controversy. Some say you should never use it. Others say JWT authentication is amazing. We think that JWT can be very helpful in some specific scenarios. If you want to know more aboout JWT, please read this article. </p> <p>Here is a short introduction into JWT:</p> <ul> <li>JWT is an encoded and cryptographically signed URL, that contains an json object.</li> <li>This json object can contain any kind and amount of data. </li> <li>When a server receives this JWT it can guarantee the data it contains can be trusted because it's signed (not encrypted).</li> <li>Both parties (sender and receiver) must know a shared secret that is used to sign the JWT request.</li> </ul>"},{"location":"authentication/jwt/#how-to-configure-and-use-jwt","title":"How to configure and use JWT?","text":"<p>To enable the login with JWTs you have to define a secret key in your <code>dtable_web_settings.py</code> and restart the SeaTable service: <pre><code>SSO_SECRET_KEY = 'your-shared-secret-like-a38B232XQJLx392871#2DEF_dowfWE#_39dwefidWFwLw39fDFEF='\n</code></pre></p> <p>Afterwards SeaTable allows the login with the following URL <code>https://cloud.seatable.io/sso-auto-login/?token=...</code>. </p> <p>The token is the encoded json object with these elements:</p> <pre><code>{\n    \"exp\": \"1682582542\",\n    \"user_id\": \"b7bd00e840a14b748ce2bffdf409488b@auth.local\"\n}\n</code></pre>"},{"location":"authentication/jwt/#examples-how-to-use-jwt-and-generate-the-login-link","title":"Examples how to use JWT and generate the login-link","text":"<p>Every programming language offers libraries to sign JWTs. A good place to start looking for such a library is (https://jwt.io/libraries)[https://jwt.io/libraries].</p> <p>Here is an example with PHP and the (firebase-library)[https://github.com/firebase/php-jwt]:</p> <pre><code>// This code generates an URL to login as the user defined in user_id.\n// The URL is valid for 30 seconds.\n// After successful login, the user jumps to $url_next. \n\n$url_next = \"/\"\n$jwt_signing_key = \"your-shared-secret\"\n$payload = [\n    \"exp\" =&gt; time() + 30,\n    \"user_id\" =&gt; \"b7bd00e840a14b748ce2bffdf409488b@auth.local\",\n];\n$jwt = \\Firebase\\JWT\\JWT::encode($payload, $jwt_signing_key, 'HS256');\n$jwt_url = 'https://cloud.seatable.io/sso-auto-login/?token='. rawurlencode($jwt) . $url_next;\necho $jwt_url;\n</code></pre> <p>Other examples can be found here:</p> <ul> <li>Vue and Node.js</li> <li>Python</li> </ul>"},{"location":"authentication/ldap/","title":"LDAP","text":"<p>Lightweight Directory Access Protocol (LDAP) is is an open, vendor-neutral, industry standard application protocol for accessing and maintaining distributed directory information services. Microsoft's Active Directory (AD) is fully compatible with LDAP. For simplicity, this Manual refers to LDAP and AD when using the term LDAP unless explicitly stated otherwise.</p> <p>This document assumes that you have a basic understanding of LDAP and that you understand the related terminology.</p>"},{"location":"authentication/ldap/#ldap-integration-in-seatable","title":"LDAP integration in SeaTable","text":"<p>SeaTable supports two modes of operation with LDAP:</p> <ul> <li>LDAP authentication: SeaTable uses the LDAP Server for user authentication.</li> <li>LDAP synchronisation: SeaTable syncs users and groups with the LDAP server regularly.</li> </ul> <p>Regardless of the mode of operation used, SeaTable requires each user in the LDAP server to have a unique ID.</p> <p>Additionally, LDAP in SeaTable can be configured to work seamlessly with SAML.</p>"},{"location":"authentication/ldap/#ldap-authentication","title":"LDAP Authentication","text":"<p>To enable LDAP Authentication (LDAP Auth), add the following parameters to <code>dtable_web_settings.py</code>, customize to your environment, and restart the SeaTable service:</p> Parameter Description Values ENABLE_LDAP On/off switch for authentication via LDAP <code>True</code> or <code>False</code> LDAP_PROVIDER Internal name to refer to LDAP as authentication type Alphanumeric string, e.g. 'ldap' LDAP_SERVER_URL URL of the LDAP server and port if non-standard URL, e.g. 'ldap://192.168.0.10:389' LDAP_BASE_DN DN of the root node used for querying users - all users under this node can log in LDAP DN LDAP_ADMIN_DN DN of the user used for querying the LDAP server - user must have the rights to access all information under LDAP_BASE_DN For LDAP: LDAP DNFor AD: LDAP DN or email LADP_ADMIN_PASSWORD User password for LDAP_ADMIN_DN user Alphanumeric string LDAP_USER_UNIQUE_ID Unique user ID in the LDAP server For LDAP: 'EntryUUID'For AD: 'ObjectGUID' LDAP_LOGIN_ATTR User attribute used for logging in 'mail', 'userPrincipalName' or 'sAMAccountName' <p>This is a sample configuration:</p> <pre><code>ENABLE_LDAP = True\nLDAP_PROVIDER = 'ldap'\nLDAP_SERVER_URL = 'ldap://192.168.0.10'\nLDAP_BASE_DN = 'ou=test,ou=test,dc=example,dc=com'\nLDAP_ADMIN_DN = 'administrator@example.com'\nLDAP_ADMIN_PASSWORD = 'secret'\nLDAP_USER_UNIQUE_ID = 'ObjectGUID'\nLDAP_LOGIN_ATTR = 'mail'\n</code></pre> <p>Some tips on how to select LDAP_BASE_DN and LDAP_ADMIN_DN:</p> <ul> <li>To determine your LDAP_BASE_DN attribute, you first need to open the graphical interface of the domain manager and browse your organizational structure.</li> <li>If you want all users in the system to be able to access SeaTable, you can use 'cn=users,dc=yourdomain,dc=com' as the BASE option (need to replace your domain name).</li> <li>If you only want people in a certain department to be able to access, you can limit the scope to a certain OU. You can use the <code>dsquery</code> command-line tool to find the DN of the corresponding OU. For example, if the name of the OU is <code>staffs</code>, you can run <code>dsquery ou -name staff</code>. More information can be found here.</li> <li>Although AD supports the use of usernames in email address format as <code>LDAP_ADMIN_DN</code> such as administrator@example.com, it sometimes does not correctly recognize this format. At this point, you can use <code>dsquery</code> to find the DN of the user. For example, if the username is <code>seatableuser</code>, run <code>dsquery user -name seatableuser</code> to find the user. More information can be found here.</li> </ul> <p>The following parameters are also available, but optional:</p> Parameter Description Values LDAP_FILTER Filter for users who can log in, e.g. a certain security group LDAP filter, e.g. 'memberOf=CN=group,CN=developers,DC=example,DC=com' LDAP_GROUP_FILTER LDAP_USER_ROLE_ATTR Name of user role in the LDAP server Attribute name, e.g. <code>title</code> LDAP_USER_FIRST_NAME_ATTR First part of the user's SeaTable nickname when nickname is spliced; default value is '' Attribute name, e.g. <code>givenName</code> LDAP_USER_LAST_NAME_ATTR Second part of the user's SeaTable nickname when nickname is spliced; default value is '' Attribute name, e.g. <code>sn</code> LDAP_USER_NAME_REVERSE Option to reverse order of first name and last name f spliced nickname; default value is <code>False</code> <code>True</code>or <code>False</code> LDAP_SAML_USE_SAME_UID Option to allow users to log in via LDAP and SAML using the same username <code>True</code>or <code>False</code> LDAP_CONTACT_EMAIL_ATTR Alternative attribute as a mail address when LDAP_LOGIN_ATTR is not <code>mail</code>; the attribute overrides the email address imported through LOGIN_ATTR; default value is ''"},{"location":"authentication/ldap/#ldap-synchronisation","title":"LDAP Synchronisation","text":"<p>To enable LDAP synchronisation (LDAP Sync), LDAP Auth must be configured and the following parameters added to <code>dtable_web_settings</code>:</p> Parameter Description Values LDAP_SYNC_GROUP On/off switch for group sync <code>True</code>or <code>False</code> LDAP_GROUP_MEMBER_ATTR Attribute used when syncing group members For most directory servers, the attributes is \"member\", which is the default value. For \"posixGroup\", it should be set to \"memberUid\". LDAP_GROUP_MEMBER_UID_ATTR User attribute set in 'memberUid' option, which is used in \"posixGroup\"; default value is <code>uid</code> LDAP_USER_OBJECT_CLASS Name of the class used to search for user objects; default value is <code>person</code> LDAP_GROUP_OBJECT_CLASS Name of the class used to search for group objects; default value is <code>group</code> For LDAP: <code>groupOfNames</code>, <code>groupOfUniqueNames</code>, <code>posixGroup</code>For AD: <code>group</code> LDAP_GROUP_UUID_ATTR ...; default value is <code>ObjectGUID</code> For LDAP: refer to https://ldapwiki.com/wiki/Universally%20Unique%20IdentifierFor AD: <code>ObjectGUID</code> SYNC_GROUP_AS_DEPARTMENT Option to sync LDAP groups as departments rather than SeaTable groups <code>True</code>or <code>False</code> LDAP_DEPARTMENT_NAME_ATTR Name of the department when SYNC_GROUP_AS_DEPARTMENT = True, the default department name is the OU name Object name, e.g. <code>description</code> <p>Additionally, the following parameters must be added to <code>dtable-events.conf</code>:</p> <pre><code>[LDAP_SYNC]\nenabled = true\nsync_interval = 60  # The unit is seconds\n</code></pre>"},{"location":"authentication/ldap/#ldap-and-saml","title":"LDAP and SAML","text":"<p>In some situations, it is useful to configure LDAP - especially LDAP Sync - and SAML as authentication providers. In this case, SeaTable must be prevented from creating two different users (as identified by the <code>username</code>) for one and the same <code>uid</code>when the person authenticates via LDAP and SAML, which would be the default behavior.</p> <p>Add the following parameter to <code>dtable_web_settings.py</code> to instruct SeaTable to use the same <code>username</code> no matter if a user (as identified by its <code>uid</code>) authenticates via LDAP or SAML.</p> <pre><code>LDAP_SAML_USE_SAME_UID = True\n</code></pre> <p>When enabled, SeaTable creates an additional record for the authenticating user in social_auth_usersocialauth when the user logs in using LDAP. This record maps the <code>username</code> to the <code>uid</code> for the SAML provider.</p>"},{"location":"authentication/ldap_old/","title":"LDAP and Active Directory Configuration","text":"<p>LDAP (Light-weight Directory Access Protocol) is a user information management server widely deployed by enterprises, Microsoft's Active Directory is fully compatible with LDAP. This document assumes that you have already understood the knowledge and terminology related to LDAP.</p>"},{"location":"authentication/ldap_old/#seatable-user-introduction","title":"SeaTable User Introduction","text":"<p>Users in SeaTable are divided into two categories:</p> <ul> <li>Users who are stored in the local database. It may be a user created by the administrator, or a user registered by self</li> <li>The user created in SeaTable during LDAP login (or other Single Sign On login).</li> </ul> <p>SeaTable will automatically look up users from internal databases and LDAP. As long as users exist in any source, they can log in.</p>"},{"location":"authentication/ldap_old/#basic-ldapad-integration-configuration","title":"Basic LDAP/AD integration configuration","text":"<p>SeaTable requires each user in the LDAP/AD server to have a unique ID. Generally, <code>ObjectGUID</code> is used in AD, and <code>EntryUUID</code> is used in other LDAP servers</p> <p>Add the following configuration to dtable_web_settings.py.</p> <pre><code>ENABLE_LDAP = True\nLDAP_PROVIDER = 'ldap'\nLDAP_SERVER_URL = 'ldap://192.168.0.124'\nLDAP_BASE_DN = 'ou=test,ou=test,dc=seatable,dc=local'\nLDAP_ADMIN_DN = 'administrator@seatable.local'\nLDAP_ADMIN_PASSWORD = 'Hello@123'\nLDAP_USER_UNIQUE_ID = 'objectGUID'\nLDAP_LOGIN_ATTR = 'mail'\n\n# The following options are used for group sync\nLDAP_SYNC_GROUP = True\nLDAP_GROUP_MEMBER_ATTR = 'member'\nLDAP_GROUP_MEMBER_UID_ATTR = 'uid'\nLDAP_USER_OBJECT_CLASS = 'person'\nLDAP_GROUP_OBJECT_CLASS = 'group'\nLDAP_GROUP_UUID_ATTR = 'objectGUID'\nSYNC_GROUP_AS_DEPARTMENT = False\nLDAP_DEPARTMENT_NAME_ATTR = ''\n\n# The following options are optional\n\nLDAP_SAML_USE_SAME_UID = True\n\n# The attribute field to configure roles in LDAP\nLDAP_USER_ROLE_ATTR = 'title'\n\n# The following two properties are used to splice the user's nickname: first_name last_name, these two options are optional, default is ''\nLDAP_USER_FIRST_NAME_ATTR = 'givenName'\nLDAP_USER_LAST_NAME_ATTR = 'sn'\n\n# For Chinese name\uff0cReverse the order of first_name and last_name, this is an optional option, default is False\nLDAP_USER_NAME_REVERSE = True\n\n# If LDAP_LOGIN_ATTR is not set to 'mail', this option can be used to specify which attribute to import the user's mailbox address from. The attributes in this option will override the user's email address imported through LOGIN_ATTR. This is an optional option, the default is ''. If this option is not set, the LOGIN_ATTR attribute will be used as the contact email\nLDAP_CONTACT_EMAIL_ATTR = 'mail'\n\n# Used to filter the range of users who can log in, such as limited to a certain security group\nLDAP_FILTER = 'memberOf=CN=group,CN=developers,DC=example,DC=com'\nLDAP_GROUP_FILTER = 'memberOf=CN=group,CN=developers,DC=example,DC=com'\n</code></pre> <p>The meaning of each configuration option is as follows:</p> <ul> <li>LDAP_SAML_USE_SAME_UID: Compatible with LDAP users to log in by SAML single sign-on</li> <li>LDAP_PROVIDER: SeaTable uses this configuration to distinguish LDAP from other integrated login methods</li> <li>LDAP_SERVER_URL: The address URL of the LDAP server. If your LDAP server listens on a non-standard port, you can also include the port in the URL, such as: ldap://ldap.example.com:389.</li> <li>LDAP_BASE_DN: In the organizational structure of the LDAP server, the unique name (Distingushed Name, DN for short) of the root node used to query users. All users under this node can access SeaTable.</li> <li>LDAP_ADMIN_DN: The DN of the user used to query the information in the LDAP server. This user should have sufficient authority to access all information under BASE. It is generally recommended to use LDAP/AD administrator.</li> <li>LDAP_ADMIN_PASSWORD: The password of the user corresponding to USER_DN.</li> <li>LDAP_USER_UNIQUE_ID\uff1aThe unique ID of the user in LDAP. You should use ObjectGUID for AD. EntryUUID attribute should be used for other LDAP servers</li> <li>LDAP_LOGIN_ATTR: Used as the attribute for users to log in to LDAP in SeaTable. If you log in via email, you can use the 'mail' attribute or the 'userPrincipalName'. If you want to log in with a Windows username, you can use the 'sAMAccountName' attribute.</li> <li>LDAP_USER_ROLE_ATTR: Syncing roles from LDAP or Active Directory</li> <li>LDAP_USER_FIRST_NAME_ATTR\uff1aUsed to splice the user's nickname</li> <li>LDAP_USER_LAST_NAME_ATTR\uff1aUsed to splice the user's nickname</li> <li>LDAP_USER_NAME_REVERSE\uff1aThe above two properties whether to reverse splicing</li> <li>LDAP_SYNC_GROUP: Whether enabled sync group.</li> <li>LDAP_GROUP_MEMBER_ATTR: The attribute field to use when loading the group's members. For most directory servers, the attributes is \"member\", which is the default value. For \"posixGroup\", it should be set to \"memberUid\".</li> <li>LDAP_GROUP_MEMBER_UID_ATTR: The user attribute set in 'memberUid' option, which is used in \"posixGroup\". The default value is \"uid\".</li> <li>LDAP_USER_OBJECT_CLASS: This is the name of the class used to search for user objects. In Active Directory, it's usually \"person\". The default value is \"person\".</li> <li>LDAP_GROUP_OBJECT_CLASS: This is the name of the class used to search for group objects. In Active Directory, it's usually \"group\"; in OpenLDAP or others, you may use \"groupOfNames\", \"groupOfUniqueNames\" or \"posixGroup\", depends on your LDAP server. The default value is \"group\".</li> <li>LDAP_GROUP_UUID_ATTR: The default attribute is \"ObjectGUID\", which is available in AD. For other LDAP servers, please refer to https://ldapwiki.com/wiki/Universally%20Unique%20Identifier.</li> <li>SYNC_GROUP_AS_DEPARTMENT: If this option is set to \"True\", the groups will be synced as top-level departments in SeaTable, instead of simple groups, a department in SeaTable is a special group. The sync process keeps the hierarchical structure of the OUs.</li> <li>LDAP_DEPARTMENT_NAME_ATTR: Get the department name. You can set this configuration item to an AD field that represents the \"department\" name, such as \"description\". The name of the department created by SeaTable will be the department name set in the AD field instead of the OU name.</li> </ul> <p>Note: If the configuration items include Chinese, need to ensure that the configuration file saved in UTF8 encoding.</p> <p>Some tips on how to select LDAP_BASE_DN and LDAP_ADMIN_EMAIL:</p> <ul> <li>To determine your LDAP_BASE_DN attribute, you first need to open the graphical interface of the domain manager and browse your organizational structure.</li> <li>If you want all users in the system to be able to access SeaTable, you can use'cn=users,dc=yourdomain,dc=com' as the BASE option (need to replace your domain name).</li> <li>If you only want people in a certain department to be able to access, you can limit the scope to a certain OU (Organization Unit). You can use the <code>dsquery</code> command-line tool to find the DN of the corresponding OU. For example, if the name of the OU is'staffs', you can run <code>dsquery ou -name staff</code>. More information can be found here.</li> <li>AD supports the use of usernames in the format of 'user@domain.com' as <code>LDAP_ADMIN_EMAIL</code>. For example, you can use administrator@example.com as <code>LDAP_ADMIN_EMAIL</code>. Sometimes AD cannot correctly recognize this format. At this point, you can use <code>dsquery</code> to find the DN of the user. For example, if the username is'seatableuser', run <code>dsquery user -name seatableuser</code> to find the user. More information can be found here.</li> </ul>"},{"location":"authentication/ldap_old/#ldap-sync-users-and-groups","title":"LDAP SYNC users and groups","text":"<p>SeaTable sync LDAP users and groups regularly. Add the following configuration to dtable-event.conf and restart SeaTable.</p> <pre><code>[LDAP_SYNC]\nenabled = true\nsync_interval = 60  # The unit is seconds\n</code></pre>"},{"location":"authentication/oauth/","title":"OAuth","text":"<p>First, register the Client App on the OAuth authorization server (such as Github), remember the Client ID and Client Secret, and set the Redirect Uri (Authorization callback URL in Github).</p> <p>Add the following configuration to dtable_web_settings.py:</p> <pre><code>ENABLE_OAUTH = True\nOAUTH_ENABLE_INSECURE_TRANSPORT = True\nOAUTH_PROVIDER_DOMAIN = 'github.com'\nOAUTH_CLIENT_ID = \"wd529b3b2ae8320e06fr\"\nOAUTH_CLIENT_SECRET = \"8159c3dcc8ef197cc3bbd94ff6cf101c93ba6d8r\"\nOAUTH_REDIRECT_URL = 'https://test.seatable.cn/oauth/callback/'\nOAUTH_AUTHORIZATION_URL = 'https://github.com/login/oauth/authorize'\nOAUTH_TOKEN_URL = 'https://github.com/login/oauth/access_token'\nOAUTH_USER_INFO_URL = 'https://api.github.com/user'\nOAUTH_SCOPE = [\"user\",]\nOAUTH_ATTRIBUTE_MAP = {\n    \"id\": \"uid\",\n    \"name\": \"name\",\n    \"email\": \"contact_email\",\n}\n</code></pre> <p>The meaning of configuration option is as follows:</p>"},{"location":"authentication/oauth/#enable_oauth_insecure_transport","title":"ENABLE_OAUTH_INSECURE_TRANSPORT","text":"<p>If https is not configured, you can add it in dtable_web_settings.py <code>ENABLE_OAUTH_INSECURE_TRANSPORT = True</code>\u3002</p> <p>See more in https://requests-oauthlib.readthedocs.io/en/latest/examples/examples.html</p> <p>note:</p> <p>If you use Google OAuth2 login, the OAUTH_SCOPE configuration should be configured as follows: <pre><code>OAUTH_SCOPE = [\"openid\", \"https://www.googleapis.com/auth/userinfo.email\", \"https://www.googleapis.com/auth/userinfo.profile\"]\n</code></pre></p>"},{"location":"authentication/oauth/#oauth_provider","title":"OAUTH_PROVIDER","text":"<p>SeaTable uses this configuration to distinguish OAuth from other login methods\uff0csuch as: github.com.</p>"},{"location":"authentication/oauth/#oauth_redirect_url","title":"OAUTH_REDIRECT_URL","text":"<p>The Redirect URL, Authorization callback URL in Github, such as: https\\://test.seatable.cn/oauth/callback/</p>"},{"location":"authentication/oauth/#oauth_authorization_urloauth_token_urloauth_user_info_urloauth_scope","title":"OAUTH_AUTHORIZATION_URL\u3001OAUTH_TOKEN_URL\u3001OAUTH_USER_INFO_URL\u3001OAUTH_SCOPE","text":"<p>Set these values according to the document of OAuth provider, for GitHub, please check https://docs.github.com/en/developers/apps/authorizing-oauth-app</p>"},{"location":"authentication/oauth/#oauth_attribute_map","title":"OAUTH_ATTRIBUTE_MAP","text":"<p>The correspondence between the user fields obtained from the OAuth authorization server and the user fields in SeaTable.</p> <ul> <li>uid: the unique identifier for SeaTable identify a user from the OAuth provider.</li> <li>name: the name of a user in SeaTable</li> <li>contact_email: a user's contact email in SeaTable</li> </ul>"},{"location":"authentication/saml/","title":"SAML","text":"<p>Security Assertion Markup Language (SAML) is an open standard for exchanging authentication and authorization data between parties. An important use case of SAML is web-browser single sign-on (SSO).</p> <p>This document assumes that you have a basic understanding of SAML and that you understand the related terminology.</p> <p>This document illustrates the configuration of SAML in general and then the SAML configuration with Microsoft Azure. The approach can be generalized for other SAML identity providers (IdPs). </p> <p>Note</p> <pre><code>SeaTable's SAML configuration was modified substantially in SeaTable 3.5. The SAML configuration in prior versions was much more extensive and is no longer shown here.\n</code></pre>"},{"location":"authentication/saml/#what-is-needed-in-general-to-configure-saml","title":"What is needed in general to configure SAML","text":"<p>To configure SAML Authentication with any Identity Provider the following information is needed:</p> <ul> <li>identity provider metadata (this is an URL)</li> <li>identity Provider certificate file</li> <li>description of the SAML attributes provides by the identity provider</li> </ul> <p>With this information, the setup of SAML authentication should be possible without any difficulties.</p>"},{"location":"authentication/saml/#step-1-create-certificate-and-key-on-seatable-server","title":"Step 1: Create certificate and key on SeaTable Server","text":"<p>Create a directory for the certificates in the SeaTable container. We recommend to use <code>/opt/seatable/seatable-data/certs</code> which is usually mapped inside the SeaTable docker container to <code>/opt/seatable/seahub-data/certs</code>. These are the commands to create this directory and a certificate and a key:</p> <pre><code># mkdir -p /opt/seatable/seatable-data/certs\n# cd /opt/seatable/seatable-data/certs\n# openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout sp.key -out sp.crt\n</code></pre>"},{"location":"authentication/saml/#step-2-get-certificate-of-the-idp","title":"Step 2: Get certificate of the IdP","text":"<p>Every IdP has to provide a certificate to download. This certificate has to be saved with the name <code>idp.crt</code> at this just created certs folder <code>/opt/seatable/seatable-data/certs</code> too.</p> <p>In the end your certs folder should look like this:</p> <pre><code># ls /opt/seatable/seatable-data/certs\nidp.crt  sp.crt  sp.key\n</code></pre>"},{"location":"authentication/saml/#step-3-configure-seatable","title":"Step 3: Configure SeaTable","text":"<p>To enable SAML, add the following parameters to <code>dtable_web_settings.py</code>, customize the values to your environment and then restart the SeaTable service:</p> Parameter Description Values ENABLE_SAML On/off switch for authentication via SAML <code>True</code> or <code>False</code> SAML_PROVIDER_IDENTIFIER Internal name for SAML authentication provider Alphanumeric string, e.g., \"Azure\", \"Auth0\" or \"Authentik\" SAML_REMOTE_METADATA_URL URL of metadata.xml used by SAML IdP URL, e.g. 'https://login.microsoftonline.com/xxx/federationmetadata/2007-06/federationmetadata.xml?appid=xxx' SAML_ATTRIBUTE_MAP Key-value pairs mapping SAML attributes to local attributes Keys are the SAML attributes from the IdP; some IdPs use attribute like 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress' SAML_CERTS_DIR Optional, path where certificates are saved inside the container /path/to/certs <p>This is a sample configuration. Adapt the values to your needs.</p> <pre><code>ENABLE_SAML = True\nSAML_PROVIDER_IDENTIFIER = 'MySAMLProvider'\nSAML_REMOTE_METADATA_URL = 'https://login.microsoftonline.com/xxx/federationmetadata/2007-06/federationmetadata.xml?appid=xxx'\nSAML_ATTRIBUTE_MAP = {\n    'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn': 'uid',\n    'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress': 'contact_email',\n    'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name': 'name',\n}\nSAML_CERTS_DIR = '/opt/seatable/seahub-data/certs'\n</code></pre>"},{"location":"authentication/saml/#details-about-the-saml_attribute_map","title":"Details about the SAML_ATTRIBUTE_MAP","text":"<p>The <code>SAML_ATTRIBUTE_MAP</code> is responsible to define which values provided by the IdP will be used to either generate or update the user in SeaTable. Currently the mapping supports the following inputs:</p> <ul> <li>uid: unique identifiers from the identity providers. This value should never change. This is not the username inside SeaTable.</li> <li>contact_email: the email address of the user.</li> <li>name: the name of the user.</li> <li>employee_id: the ID of the user which can be used for filters inside SeaTable. Refer to Authentication Overview for more details about this <code>id_in_org</code>.</li> <li>user_role: the name of the role in SeaTable.</li> </ul> <p>The <code>uid</code>, <code>contact_email</code> and <code>name</code> are mandatory. The <code>employee_id</code> and <code>user_role</code> are optional. </p> <p>Hint</p> <pre><code>The uid should be a value that never changes for a user. If you choose the email address and change that email address, a new user will be created after the next login.\n</code></pre> <p>If you configure the <code>SAML_ATTRIBUTE_MAP</code> you always have to replace the keys of the array with the names provides by the IdP. Your SAML_ATTRIBUTE_MAP always has to look like this:</p> <pre><code>SAML_ATTRIBUTE_MAP = {\n    'replace-this': 'uid',\n    'replace-this': 'contact_email',\n    'replace-this': 'name',\n}\n</code></pre>"},{"location":"authentication/saml/#step-4-restart-and-test","title":"Step 4: Restart and test","text":"<p>A restart of the SeaTable service to activate the configuration settings. </p> <pre><code># docker exec -it seatable bash\n# seatable.sh restart\n</code></pre> <p>Then go to the login page of your SeaTable Server, click on \"Single sign-on\" and try to log in. If any error occurs, check <code>dtable_web.log</code> for error messages.</p>"},{"location":"authentication/saml/#example-azure-saml","title":"Example: Azure SAML","text":"<p>Add an application in Azure (for more info, see https://docs.microsoft.com/en-us/azure/active-directory/manage-apps/add-application-portal).</p> <p>Assign users to the new application (for more info, see https://docs.microsoft.com/en-us/azure/active-directory/manage-apps/add-application-portal-assign-users).</p> <p>Set up SSO with SAML:</p> <p></p> <p>Download base64 format signing certificate and save it as <code>idp.crt</code> in the earlier created directory for certificates. Don't forget to generate the <code>sp.key</code> and <code>sp.crt</code>.</p> <p></p> <p>According to the screenshots, the seatable configuration in <code>dtable_web_settings.py</code> should look like this:</p> <pre><code>ENABLE_SAML = True\nSAML_PROVIDER_IDENTIFIER = 'Azure'\nSAML_REMOTE_METADATA_URL = 'https://login.microsoftonline.com/826f1810-ccc9-.../federationmetadata/2007-06/federationmetadata.xml?appid=...'\nSAML_ATTRIBUTE_MAP = {\n    'uid': 'uid',\n    'mail': 'contact_email',\n    'name': 'name',\n}\n</code></pre>"},{"location":"authentication/saml_old/","title":"SAML SSO","text":"<p>In this document, we use Azure SAML to show the steps to connect SeaTable with SAML. Other SAML provider should be similar.</p> <p>Important: The following configuration only works with SeaTable 3.5. and newer. The configuration of SAML for older versions is much more extensive and is no longer shown here. Upgrade to SeaTable 3.5 or later to use this configuration.</p> <p>1. Prepare Certs File</p> <p>Create certs dir</p> <pre><code>$ docker exec -it seatable bash\n# mkdir -p /opt/seatable/seahub-data/certs\n</code></pre> <p>You can generate them by:</p> <pre><code># cd /opt/seatable/seahub-data/certs\n# openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout sp.key -out sp.crt\n</code></pre> <p>2. Configure SeaTable</p> <p>Add the following configuration to <code>dtable_web_settings.py</code>, change the values according to your needs and then restart SeaTable:</p> <pre><code>ENABLE_SAML = True\nSAML_REMOTE_METADATA_URL = 'https://login.microsoftonline.com/xxx/federationmetadata/2007-06/federationmetadata.xml?appid=xxx'\nSAML_PROVIDER_IDENTIFIER = 'azure'\nSAML_ATTRIBUTE_MAP = {\n    'uid': 'uid',\n    'mail': 'contact_email',\n    'name': 'name',\n    'employeeid': 'employee_id',\n    'jobtitle': 'user_role',\n}\n</code></pre> <p>Important:</p> <ul> <li><code>SAML_PROVIDER_IDENTIFIER</code> is used in SeaTable internally to distinguish different SSO provider for the same user.</li> <li>Only change the keys ('Key': 'Value') of the <code>SAML_ATTRIBUTE_MAP</code> to the names of your SAML attributes you are using. Some IdP use attribute names like <code>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress</code>. </li> </ul> <p>Note: If certificates are not placed in the <code>/opt/seatable/seahub-data/certs</code> directory, you need to add the following configuration in dtable_web_settings.py:</p> <pre><code>SAML_CERTS_DIR = '/path/to/certs'\n</code></pre> <p>3. Configure Azure SAML</p> <p>Add application: https://docs.microsoft.com/en-us/azure/active-directory/manage-apps/add-application-portal</p> <p>Assign users: https://docs.microsoft.com/en-us/azure/active-directory/manage-apps/add-application-portal-assign-users</p> <p>Set up SSO with SAML: </p> <p></p> <p>4. Upload Azure AD certificate</p> <p>Download base64 format signing certificate, put it under the certs(/opt/seatable/seahub-data/certs) directory.</p> <p></p> <p>5. Log in to the SeaTable homepage, click single sign-on, and use the user assigned to Azure SAML to perform a SAML login test.</p>"},{"location":"authentication/two_factor_auth/","title":"Two-Factor Authentication","text":"<p>Two-factor authentication (2FA) provides an extra layer of security against unauthorized access by requiring an additional piece of information besides username and password.</p> <p>SeaTable supports time-based, one-time passwords (TOTP) as a second factor with the default authentication.</p> <p>A TOTP app such as Google Authenticator or 2FAS is required to use 2FA with SeaTable.</p>"},{"location":"authentication/two_factor_auth/#global-configuration","title":"Global Configuration","text":"<p>To enable 2FA, add the following configuratiaon in the configuration file <code>dtable_web_settings.py</code>:</p> <pre><code>ENABLE_TWO_FACTOR_AUTH = True # Default value is False.\n</code></pre> <p>Optionally, 2FA can be enforced for for all users. If you wish to do that, add the following configuration to <code>dtable_web_settings</code>:</p> <pre><code>ENABLE_FORCE_2FA_TO_ALL_USERS = True # Defaule value is False.\n</code></pre> <p>Note: When disabling 2FA enforcement by changing <code>True</code> to <code>False</code>, 2FA is disabled for all users.</p>"},{"location":"authentication/two_factor_auth/#user-specific-configuration","title":"User-specific Configuration","text":"<p>System and team administrators can enforce 2FA for individual users in system and team administration of SeaTable's web interface, respectively.</p>"},{"location":"changelog/changelog-for-seatable-professional-server/","title":"SeaTable Enterprise Edition Changelog","text":"<p>Please check: https://seatable.io/docs/changelog/</p>"},{"location":"changelog/server-changelog/","title":"SeaTable Changelog","text":"<p>The complete changelog of SeaTable Server is available at https://seatable.io/docs/changelog/.</p>"},{"location":"config/autostart/","title":"Autostart","text":"<p>Autostart SeaTable When setting up SeaTable following the instructions in this manual, SeaTable's Docker containers do not automatically start after a system reboot. Adding SeaTable to autostart minimizes system downtime and prevents service disruption.</p>"},{"location":"config/autostart/#requirements","title":"Requirements","text":"<p>The autostart routine presented here utilizes systemd. systemd, the default init system in many Linux distributions, including CentOS, Debian, and Ubuntu, provides a convenient autostart function for the services it controls.</p>"},{"location":"config/autostart/#setup","title":"Setup","text":"<p>Autostart SeaTable builds on three components: First, a start script that is capable of starting, stopping, and restarting SeaTable using the docker-compose.yml; second, a systemd unit file using the start script; third, systemd's native autostart capability.</p>"},{"location":"config/autostart/#preparing-the-start-script","title":"Preparing the start script","text":"<p>Create the script file in <code>/opt/seatable</code> and open it in a text editor: <pre><code>cd /opt/seatable\nnano seatable-autostart.sh\n</code></pre></p> <p>Paste the following code block into the file: <pre><code>#!/bin/bash\n\ncase $1 in\n    start)\n    cd /opt/seatable/\n    docker-compose up -d\n    sleep 10\n    docker exec -d seatable /shared/seatable/scripts/seatable.sh start\n    ;;\n    stop)\n    cd /opt/seatable/\n    docker-compose down\n    ;;\n    restart)\n    cd /opt/seatable/\n    docker-compose down\n    docker-compose up -d\n    sleep 10\n    docker exec -d seatable /shared/seatable/scripts/seatable.sh start\n    ;;\nesac\n</code></pre></p> <p>Note: If SeaTable's docker-compose.yml is not in the default directory <code>/opt/seatable</code>, change the three change directory commands in the script accordingly.</p> <p>Make the script executable:</p> <pre><code>chmod u+x seatable-autostart.sh\n</code></pre>"},{"location":"config/autostart/#configuring-the-systemd-unit-file","title":"Configuring the systemd unit file","text":"<p>Create a new unit file in /etc/systemd/system and open it in a text editor:</p> <pre><code>cd /etc/systemd/system\nnano seatable.service\n</code></pre> <p>Copy the following code into the file:</p> <pre><code>[Unit]\nDescription=SeaTable\nAfter=network.target\n\n[Service]\nExecStart=/opt/seatable/seatable-autostart.sh start\nExecStop=/opt/seatable/seatable-autostart.sh stop\nUser=root\nType=forking\nTimeoutSec=0\nRemainAfterExit=yes\nGuessMainPID=no\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Note: If the <code>seatable-autostart.sh</code> is saved in a directory other than <code>/opt/seatable</code>, change the unit file to reflect it.</p> <p>The unit file in combination with the above script enables the start and stop of SeaTable using the systemctl command: * <code>sudo systemctl stop seatable</code> stops all SeaTable containers * <code>sudo systemctl start seatable</code> start all SeaTable containers * <code>sudo systemctl restart seatable</code> restart all SeaTable containers</p> <p>Note: When using systemctl to start SeaTable, SeaTable's Docker containers must be stopped beforehand.</p>"},{"location":"config/autostart/#enabling-autostart","title":"Enabling autostart","text":"<p>Autostart is enabled with the following command:</p> <pre><code>sudo systemctl enable seatable\n</code></pre> <p>Similarly, autostart is disabled with the following command:</p> <pre><code>sudo systemctl disable seatable\n</code></pre> <p>You can check SeaTable's autostart status with the following command:</p> <pre><code>sudo systemctl is-enabled seatable\n</code></pre>"},{"location":"config/base_rows_limit/","title":"Base supported rows limit","text":"<p>By default, a base contains up to 100,000 rows (excluding archived rows). Above 100,000 rows, the base will become read-only. If more than 150,000 rows, the base will fail to load.</p> <p>Base rows are limited for the following technical reasons:</p> <ul> <li>The base is read from the persistent storage (dtable-storage-server) into the memory of dtable-server, and the maximum support size is 600M. This is a limitation of Node.js technology, because a string in Node.js cannot exceed 600M. For safety reason, dtable-server will not attempt to load this base when it exceeds 300M. (Attachments in the base are not counted.)</li> <li>When the base is too large, it takes too much time for the server to serialize it and send it to the network when the client loads the base. At this time, the server cannot respond to other requests.</li> </ul> <p>Starting from version 3.4, for private deployment users, if your application scenario needs to support more than 100,000 rows in a base, but the storage space occupied by the base itself is not large (for example, it contains a large number of blank cells), you can modify the server's configuration, to support more than 100,000 rows.</p>"},{"location":"config/base_rows_limit/#dtable-server","title":"dtable-server","text":"<p><code>dtable_server_config.json</code></p> <pre><code>{\n   \"base_writable_limit\": 100000,\n   \"base_max_rows_limit\": 150000\n}\n</code></pre> <p>Among them, base_writable_limit is used to limit the rows written into the base. base_max_rows_limit is used to control when the rows in the base is greater than the number, the server refuses to load the base into memory. base_max_rows_limit needs to be greater than base_writable_limit.</p>"},{"location":"config/base_rows_limit/#dtable-web","title":"dtable-web","text":"<p><code>dtable_web_settings.py</code></p> <pre><code>BASE_WRITABLE_LIMIT = 100000\n</code></pre> <p>This is used to let the Web UI to become read-only when rows exceed the limit.</p>"},{"location":"config/ccnet-conf/","title":"ccnet.conf","text":"<p>This config file is needed for history reason. The only used section is <code>[Database]</code> section.</p>"},{"location":"config/ccnet-conf/#example","title":"Example","text":"<pre><code>[Database]\nENGINE = mysql\nHOST = xxxx\nPORT = 3306\nUSER = seafile\nPASSWD = xxxxxx\nDB = ccnet_db\nCONNECTION_CHARSET = utf8\n</code></pre>"},{"location":"config/custom_css/","title":"Custom CSS","text":"<p>You can use a custom CSS to customize the look of your SeaTable installation. You can do this either on the web interface (\"Settings\" in the system administration, where you can enable the custom CSS and paste your custom CSS directly into the dialogue), or use the following method.</p>"},{"location":"config/custom_css/#customize-seatable-css","title":"Customize SeaTable CSS","text":"<p>Create a <code>custom</code> folder under <code>/&lt;your SeaTable Docker volume&gt;/seatable/seahub-data</code>:</p> <pre><code>cd /&lt;your SeaTable Docker volume&gt;/seatable/seahub-data\nmkdir custom\n</code></pre> <p>Create a symbolic link for <code>custom</code> in the SeaTable container. When upgrading, the SeaTable upgrading script will automatically create a symbolic link to maintain your custom settings:</p> <pre><code>docker exec -it seatable bash\ncd /opt/seatable/seatable-server-latest/dtable-web/media\nln -s /shared/seatable/seahub-data/custom custom\n</code></pre> <p>Under <code>/&lt;your SeaTable Docker volume&gt;/seatable/seahub-data/custom</code>, create the new CSS file and custom the style, for example, with a <code>custom.css</code> file:</p> <pre><code>cd /&lt;your SeaTable Docker volume&gt;/seatable/seahub-data/custom\nnano custom.css\n</code></pre> <p>In <code>dtable_web_settings.py</code>, change the value of <code>BRANDING_CSS</code> to the newly created CSS file's path:</p> <p><pre><code>nano dtable_web_settings.py\n</code></pre> Then change the value of BRANDING_CSS and save &amp; close the file: <pre><code>BRANDING_CSS = 'custom/custom.css'\n</code></pre></p> <p>Finally, restart the SeaTable service:</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh restart\n</code></pre>"},{"location":"config/customize_email_notifications/","title":"Customize Email Notifications","text":"<p>Note: Subject line may vary between different releases, this is based on Release 2.0.1. Restart Seahub so that your changes take effect.</p>"},{"location":"config/customize_email_notifications/#user-reset-hisher-password","title":"User reset his/her password","text":"<p>Subject</p> <p>seahub/seahub/auth/forms.py line:103</p> <p>Body</p> <p>seahub/seahub/templates/registration/password_reset_email.html</p> <p>Note: You can copy password_reset_email.html to <code>seahub-data/custom/templates/registration/password_reset_email.html</code> and modify the new one. In this way, the customization will be maintained after upgrade. </p>"},{"location":"config/customize_email_notifications/#system-admin-add-new-member","title":"System admin add new member","text":"<p>Subject</p> <p>seahub/seahub/views/sysadmin.py line:424</p> <p>Body</p> <p>seahub/seahub/templates/sysadmin/user_add_email.html</p> <p>Note: You can copy user_add_email.html to <code>seahub-data/custom/templates/sysadmin/user_add_email.html</code> and modify the new one. In this way, the customization will be maintained after upgrade. </p>"},{"location":"config/customize_email_notifications/#system-admin-reset-user-password","title":"System admin reset user password","text":"<p>Subject</p> <p>seahub/seahub/views/sysadmin.py line:368</p> <p>Body</p> <p>seahub/seahub/templates/sysadmin/user_reset_email.html</p> <p>Note: You can copy user_reset_email.html to <code>seahub-data/custom/templates/sysadmin/user_reset_email.html</code> and modify the new one. In this way, the customization will be maintained after upgrade. </p>"},{"location":"config/customize_email_notifications/#user-send-filefolder-share-link","title":"User send file/folder share link","text":"<p>Subject</p> <p>seahub/seahub/share/views.py line:668</p> <p>Body</p> <p>seahub/seahub/templates/shared_link_email.html</p>"},{"location":"config/dtable-events-conf/","title":"dtable-event.conf settings","text":""},{"location":"config/dtable-events-conf/#database-configuration","title":"Database configuration","text":"<p>The configuration of database is in the <code>[DATABASE]</code> section of the file <code>dtable-events.conf</code></p> <pre><code>[DATABASE]\ntype = mysql\nhost = db\nport = 3306\nusername = root\npassword = seatable_db\ndb_name = seafile_db\n</code></pre> <p>Note: MariaDB and MySQL is compatible. In the configuration, we use mysql.</p>"},{"location":"config/dtable-events-conf/#redis-configuration","title":"Redis configuration","text":"<p>The configuration of redis is in the <code>[REDIS]</code> section of the file <code>dtable-events.conf</code></p> <pre><code>[REDIS]\nhost = redis\nport = 6379\n</code></pre>"},{"location":"config/dtable-events-conf/#email-notifications-configuration","title":"Email notifications configuration","text":"<p>The configuration of email notifications is in the <code>[EMAIL SENDER]</code> section of the file <code>dtable-events.conf</code></p> <pre><code>[EMAIL SENDER]\nenabled = true\n</code></pre>"},{"location":"config/dtable-events-conf/#notification-rules-scanner-configuration","title":"Notification rules scanner configuration","text":"<p>Notification rules is the feature that users can set notification rules for a base and got notifications when defined criteria meet.</p> <p>The configuration of notification rules scanner is in the <code>[NOTIFY-SCANNER]</code> section of the file <code>dtable-events.conf</code></p> <pre><code>[NOTIFY-SCANNER]\nenabled = true\ninterval = 3600\n</code></pre>"},{"location":"config/dtable_db_conf/","title":"dtable-db config","text":"<p>dtable-db is the component that provides SQL querying capability in SeaTable server. Users can query their bases with SQL. It also handles archiving for large bases (since Enterprise Edition 2.3.0), to make querying large bases more efficient.</p>"},{"location":"config/dtable_db_conf/#configurations","title":"Configurations","text":"<p>The configurations are in dtable_db.conf. Below are available options.</p> <p>In section <code>[general]</code>:</p> <ul> <li><code>host</code>: The address dtable-db listens on. Defaults to 0.0.0.0.</li> <li><code>port</code>: The port dtable-db listens on. Defaults to 7777.</li> <li><code>log_dir</code>: Location for the logs. Defaults to the directory specified in <code>-c</code> command line option. (Added in 2.3.0)</li> <li><code>log_level</code>: Only log messages with level priority higher than this will be logged. Supported levels are \"debug\", \"info\", \"warn\", \"error\", with ascending priority. The default is \"info\".</li> <li><code>slow_query_threshold</code>: If the processing time exceeds this threshold, a slow log will be recorded. Unit is in milliseconds. Defaults to 1000. (Added in 2.3.0)</li> <li><code>row_update_limit</code>: Controls the rate of row update/delete/insert per second for each base. Row update/delete/insert via SQL and APIs are all affected. The unit is in number of rows. Default is 0, which means no limit. (Added in 3.0.0)</li> <li><code>global_row_update_limit</code>: Controls the rate of row update/delete/insert per second for the entire system. Row update/delete/insert via SQL and APIs are all affected. This option controls the global rate when there are concurrent updates to multiple bases. The unit is in number of rows. Default is 0, which means no limit. (Added in 3.0.0)</li> <li><code>base_api_limit_per_day</code>: Limits the number of API calls per base per day. Default is -1, meaning no limits.</li> </ul> <p>In section <code>[storage]</code>:</p> <ul> <li><code>data_dir</code>: Location of the data directory. You must specify this option.</li> </ul> <p>Section <code>[dtable cache]</code> contains options for caching bases from dtable-server:</p> <ul> <li><code>private_key</code>: The same as <code>DTABLE_PRIVATE_KEY</code> in <code>dtable_web_settings.py</code>. You must specify this option if your version is before \"Enterprise edition 3.5.5\". If your version is newer than that, you don't need to specify it here. It'll be read from dtable_server_config.json.</li> <li><code>dtable_server_url</code>: local address for dtable-server. You must specify this option.</li> <li><code>expire_time</code>: For how long a cached base will be valid. After that it'll be fetched from dtable-server again. Unit is in seconds. Defaults to 300 (5 minutes).</li> <li><code>total_cache_size</code>: How much memory shall be used for caching bases. After this threshold is reached, cached bases will be cleaned with LRU algorithm. Cleaning stops when memory consumption reduces to 70% of this threshold. Unit is in MB. Defaults to 500MB.</li> <li><code>clean_cache_interval</code>: Interval between cache cleaning. Unit is in seconds. Defaults to 300.</li> </ul> <p>Section <code>[database]</code> contains options for accessing the MySQL database used by dtable-server. Note: Since 2.7 version this section is no longer used. dtable-db will use the database settings in conf/dtable-server.json.</p> <ul> <li><code>host</code>: Address of database. You must provide this option.</li> <li><code>port</code>: Port of database. Defaults to 3306.</li> <li><code>user</code>: Username for login to the database. You must provide this option.</li> <li><code>password</code>: Password for the database user. You must provide this option.</li> <li><code>db_name</code>: Database name used by dtable-server. You must provide this option.</li> </ul> <p>In section <code>[SQL]</code>:</p> <ul> <li><code>max_result_rows</code>: Maximal number of rows that will be returned in one query, if <code>LIMIT</code> syntax is not used. Defaults to 100. (Deprecated: should use <code>default_result_rows</code> since 3.0 version)</li> <li><code>default_result_rows</code>: Maximal number of rows that will be returned in one query, if <code>LIMIT</code> syntax is not used. Defaults to 100.</li> <li><code>result_rows_hard_limit</code>: Maximal number of rows that will be returned in one query. If the number of rows specified in <code>LIMIT</code> syntax is larger than this option, the system still returns at most the number of rows that specified in this option. The default is 10000.</li> <li><code>exec_cost_hard_limit</code>: Maximal execution cost of a query. If the estimated cost of a query exceeds this limit, the query is rejected. Default is 0, which means no limit.</li> </ul> <p>Section <code>[backup]</code> contains options to configure backup functions (available since Enterprise Edition 3.0.0):</p> <ul> <li><code>dtable_storage_server_url</code>: The URL of dtable storage server. Required to enable automatic backup. For configuration of dtable storage server, please refer to this documentation.</li> <li><code>backup_interval</code>: The interval between each backup. Unit is in seconds. The default value is 86400 (24 hours).</li> <li><code>keep_backup_num</code>: The number of backups that will be kept, oldest backups will be removed. The default value is 3.</li> </ul> <p>Below is an example configuration:</p> <pre><code>[general]\nhost = 127.0.0.1\nport = 7777\nlog_dir = /shared/seatable/logs\n\n[storage]\ndata_dir = /opt/seatable/db-data\n\n# You have to change dtable_server_url based on your conf/dtable-server.json\n[dtable cache]\nprivate_key = \"my private key\"\ndtable_server_url = \"http://127.0.0.1:5000\"\ntotal_cache_size = 100\n\n# You have to change below options based on your conf/dtable-server.json\n# Since 2.7 version this section is no longer used. dtable-db will use the database settings in conf/dtable-server.json.\n[database]\nhost = 127.0.0.1\nuser = root\npassword = mypass\ndb_name = dtable\n\n[backup]\ndtable_storage_server_url = http://127.0.0.1:6666\nbackup_interval = 86400\nkeep_backup_num = 3\n</code></pre>"},{"location":"config/dtable_server_config/","title":"DTable Server Config","text":"<pre><code>{\n    \"host\": \"db\",\n    \"user\": \"root\",\n    \"password\": \"MYSQL_PASSWORD\",\n    \"database\": \"dtable_db\",\n    \"port\": 3306,\n    \"private_key\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    \"dtable_web_service_url\": \"https://example.seatable.com/\",\n    \"redis_host\": \"redis\",\n    \"redis_port\": 6379,\n    \"redis_password\": \"\",\n    \"enable_notification_publish\": true/false,\n    \"rows_api_minute_max\": 100,\n    \"rows_api_hour_max\": 6000,\n    \"worker_threads_num\": 2,\n    \"save_interval\": 5 * 60 * 1000,\n    \"api_req_max\": 600,\n    \"api_base_day_max\": 5000\uff0c\n    \"rows_api_max_limit\": 1000,\n}\n</code></pre>"},{"location":"config/dtable_server_config/#redis_password","title":"redis_password","text":"<p>It is an empty string</p>"},{"location":"config/dtable_server_config/#private_key","title":"private_key","text":"<p>It must be the same as the <code>DTABLE_PRIVATE_KEY</code> in <code>dtable_web_settings.py</code> </p>"},{"location":"config/dtable_server_config/#dtable_web_service_url","title":"dtable_web_service_url","text":"<p>It is used for dtable-server to access dtable-web. It is optional since 1.1.0. If it is not specified, 127.0.0.1:8000 will be used.</p>"},{"location":"config/dtable_server_config/#enable_notification_publish","title":"enable_notification_publish","text":"<p>It is used for publishing the notification to the \"notification-added\" channel of redis, default by false.  This is designed for the integration to the third-party application which will be able to receive the real-time notification.</p>"},{"location":"config/dtable_server_config/#rows_api_minute_max-rows_api_hour_max","title":"rows_api_minute_max / rows_api_hour_max","text":"<p>The maximum number of listing rows API calls within 1 minute / hour. Listing rows in a large base involving converting internal representation to end-user friendly representation, which will cost a few seconds for 10K+ rows. So the API should be limited more than other APIs. </p>"},{"location":"config/dtable_server_config/#api_req_max-api_base_day_max","title":"api_req_max / api_base_day_max","text":"<ul> <li>api_req_max: The maximum number of API calls to a base within 1 minute. The default value is 600.</li> <li>api_base_day_max: The maximum number of API calls to a base within 1 day. The default value is 5000.</li> </ul>"},{"location":"config/dtable_server_config/#worker_threads_num","title":"worker_threads_num","text":"<p>Number of worker threads serving list rows API</p>"},{"location":"config/dtable_server_config/#save_interval","title":"save_interval","text":"<p>Interval for saving changed bases to persistent storage (dtable-storage-server). The default is 5 minutes.</p>"},{"location":"config/dtable_server_config/#rows_api_max_limit","title":"rows_api_max_limit","text":"<p>Maxmum number of rows returned by calling list rows API in dtable-server, default by 1000</p>"},{"location":"config/dtable_server_config/#notice","title":"Notice","text":"<p>You should restart the SeaTable after the modification of these settings by run the code below:</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh restart\n</code></pre>"},{"location":"config/dtable_storage_server_conf/","title":"DTable Storage Server config","text":"<p>DTable storage server provides persistent storage for bases and backup service for dtable-db. It supports file system, S3 storage backends. This component is added in version 3.0.</p>"},{"location":"config/dtable_storage_server_conf/#configuration-example","title":"Configuration example","text":"<pre><code>[general]\nhost = 127.0.0.1\nport = 6666\nlog_dir = .\ntemp_file_dir = ./tmp\n\n[storage backend]\ntype = filesystem\npath = /path/to/storage\n\n[snapshot]\ninterval = 86400\nkeep_days = 180\n</code></pre>"},{"location":"config/dtable_storage_server_conf/#configuration","title":"Configuration","text":""},{"location":"config/dtable_storage_server_conf/#general","title":"general","text":"<p>In <code>[general]</code> section:</p> <ul> <li><code>host</code>: The address that dtable-storage-server listens on. Default is <code>127.0.0.1</code>.</li> <li><code>port</code>: The port that dtable-storage-server listens on. Default is <code>6666</code>.</li> <li><code>log_dir</code>: The directory that dtable-storage-server writes logs to. Default is the dir of configuration file.</li> <li><code>temp_file_dir</code>: The directory that dtable-storage-server create buffers in. Required</li> </ul>"},{"location":"config/dtable_storage_server_conf/#storage-backend","title":"Storage backend","text":"<p>In <code>[storage backend]</code> section:</p> <ul> <li><code>type</code>: The type of storage backend. Options are <code>filesystem</code>, and <code>s3</code>. Default is <code>filesystem</code>.</li> </ul> <p>For filesystem storage backend:</p> <ul> <li><code>path</code>: The filepath of storage backend.</li> </ul> <p>For S3 storage backend:</p> <ul> <li><code>bucket</code>: The bucket name of S3 backend.</li> <li><code>key_id</code>: The access key id of S3 backend.</li> <li><code>key</code>: The access key of S3 backend.</li> <li><code>use_v4_signature</code>: Whether to use v4 signature. For a S3-compatible storage, it should be <code>false</code>.</li> <li><code>aws_region</code>: The region of S3 backend. (only when v4 signature is used)</li> <li><code>host</code>: The host address of S3 backend. Required for S3-compatible storage. Optional for AWS S3, but can be set to the endpoint you use.</li> <li><code>path_style_request</code>: Whether to use path style requests. For a S3-compatible storage, it should be <code>true</code>.</li> <li><code>use_https</code>: Whether to use https.</li> </ul>"},{"location":"config/dtable_storage_server_conf/#snapshot","title":"Snapshot","text":"<p>Configurations for snapshots of bases</p> <ul> <li>interval: the interval for generating snapshots for a base. The unit is seconds. Default is 24 hours.</li> <li>keep_days: the number of days to keep snapshots. Default is 0, which means snapshots will be kept forever.</li> </ul>"},{"location":"config/dtable_web_settings/","title":"dtable web settings","text":"<p>The <code>dtable_web_settings.py</code> is one of the central configuration files of SeaTable. With this file you can configure a lot of settings and functions of the web interface of SeaTable. The <code>dtable_web_settings.py</code> consists of a list of <code>Key = Value</code> pairs. Comments starting with <code>#</code> are ignored. </p> <p>You need to restart SeaTable so that your changes take effect. Just execute the following command at your command line.</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh restart\n</code></pre> <p>You can also modify some of the config items as system administrator via web interface. These config items are saved in the database table (dtable_db/constance_config). The configuration in the database has a higher priority then the items in config file. If you want to disable settings via web interface, you can add <code>ENABLE_SETTINGS_VIA_WEB = False</code> to <code>dtable_web_settings.py</code>.</p>"},{"location":"config/dtable_web_settings/#basic-settings","title":"Basic settings","text":"<pre><code># for dtable-server\n## The private key is used to authenticate between DTable Web and DTable Server\n## DTABLE_SERVER_URL is for telling DTable Web the DTable Server's URL\n## DTABLE_SOCKET_URL is for telling DTable Web the web socket URL of DTable Server\nDTABLE_PRIVATE_KEY = 'xxxxx'\nDTABLE_SERVER_URL = 'https://seatable.yourdomain.com/dtable-server/'\nDTABLE_SOCKET_URL = 'https://seatable.yourdomain.com/'\n\n# The URL of dtable-web that for users to visit your SeaTable server\nDTABLE_WEB_SERVICE_URL = 'https://seatable.yourdomain.com/'\n\n# The help link URL\nHELP_LINK = 'https://seatable.io/help/'\n\n# The file server URL\nFILE_SERVER_ROOT = 'https://seatable.yourdomain.com/seafhttp/'\n</code></pre> <p>If you changed your domain, the URLs in above settings must be changed accordingly.</p>"},{"location":"config/dtable_web_settings/#sending-email-notifications","title":"Sending Email Notifications","text":"<p>Refer to email sending documentation.</p>"},{"location":"config/dtable_web_settings/#user-management-options","title":"User management options","text":"<p>The following options affect user registration, password and session.</p> <pre><code># Enable or disable registration on web. Default is `False`.\nENABLE_SIGNUP = False\n\n# Activate or deactivate user when registration complete. Default is `True`.\n# If set to `False`, new users need to be activated by admin in admin panel.\nACTIVATE_AFTER_REGISTRATION = False\n\n# Whether allow user to delete its account\nENABLE_DELETE_ACCOUNT = True\n\n# Enforce all users to use 2-factor-authentication. Default is 'False'.\n# Changing 'True' to 'False' will deactivate 2FA for all users (they could still activate it\n# in their personal settings).\nENABLE_FORCE_2FA_TO_ALL_USERS = True\n\n# Whether to send email when a system admin adding a new member. Default is `True`.\nSEND_EMAIL_ON_ADDING_SYSTEM_MEMBER = True\n\n# Whether to send email when a system admin resetting a user's password. Default is `True`.\nSEND_EMAIL_ON_RESETTING_USER_PASSWD = True\n\n# Send system admin notify email when user registration is complete. Default is `False`.\nNOTIFY_ADMIN_AFTER_REGISTRATION = True\n\n# Remember days for login. Default is 7\nLOGIN_REMEMBER_DAYS = 7\n\n# Attempt limit before showing a captcha when login.\nLOGIN_ATTEMPT_LIMIT = 3\n\n# deactivate user account when login attempts exceed limit\nFREEZE_USER_ON_LOGIN_FAILED = False\n\n# minimum length for user's password\nUSER_PASSWORD_MIN_LENGTH = 6\n\n# LEVEL based on four types of input:\n# num, upper letter, lower letter, other symbols\n# '3' means password must have at least 3 types of the above.\nUSER_PASSWORD_STRENGTH_LEVEL = 3\n\n# default False, only check USER_PASSWORD_MIN_LENGTH\n# when True, check password strength level, STRONG(or above) is allowed\nUSER_STRONG_PASSWORD_REQUIRED = False\n\n# Force user to change password when admin add/reset a user.\nFORCE_PASSWORD_CHANGE = True\n\n# Whether to allow SSO users to set a local password; default True, admin or user can set a local password by 'Reset password'\nENABLE_SSO_USER_CHANGE_PASSWORD = True\n\n# Whether to allow LDAP users to set a local password; default False, when True, admin or user can set a local password by 'Reset password'\nENABLE_LDAP_USER_CHANGE_PASSWORD = False\n\n# Age of cookie, in seconds (default: 2 weeks).\nSESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2\n\n# Whether a user's session cookie expires when the Web browser is closed.\nSESSION_EXPIRE_AT_BROWSER_CLOSE = False\n\n# Whether to save the session data on every request. Default is `False`\nSESSION_SAVE_EVERY_REQUEST = False\n\n# Whether to allow a user to create a base in personal workspace. Default by `False`\nDISABLE_ADDING_PERSONAL_BASES = False\n</code></pre>"},{"location":"config/dtable_web_settings/#other-options","title":"Other options","text":"<pre><code># Choices can be found here:\n# https://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.\n# The time zone should be the same as the system time zone. \n# Otherwise there may be problems with the export or data processing\n# of the date-column.\n# Here some examples:\nTIME_ZONE = 'UTC'\nTIME_ZONE = 'Europe/Berlin'\nTIME_ZONE = 'America/New_York'\n\n# Disable settings via Web interface in system admin-&gt;settings\n# Default is True\nENABLE_SETTINGS_VIA_WEB = False\n\n# Language code for this installation. All choices can be found here:\n# http://www.i18nguy.com/unicode/language-identifiers.html\n# Default language for sending emails.\nLANGUAGE_CODE = 'en'\n\n# Custom language code choice.\nLANGUAGES = (\n    ('en', 'English'),\n    ('zh-cn', '\u7b80\u4f53\u4e2d\u6587'),\n    ('zh-tw', '\u7e41\u9ad4\u4e2d\u6587'),\n)\n\n# Set this to your website/company's name. This is contained in email notifications and welcome message when user login for the first time.\nSITE_NAME = 'SeaTable'\n\n# Browser tab's title\nSITE_TITLE = 'Private SeaTable'\n\n\n# Configure user help pages\nHELP_LINK = 'https://seatable.io/help/'\n\n# Add privacy policy link and terms link\nPRIVACY_POLICY_LINK = ''\nTERMS_OF_SERVICE_LINK = ''\n\n# Predefined custom colors that can be used in color rules, options of single select and so on\nCUSTOM_COLORS = [\n    {'color':'#F5C043','text_color':'#212529'}, \n    {'color':'#3064BC','text_color':'#FFFFFF'},\n]\n\n# Activate the universal app builder (since version 3.5)\nENABLE_UNIVERSAL_APP = True\n</code></pre>"},{"location":"config/dtable_web_settings/#group-member-limit","title":"Group member limit","text":"<p>The default is 500.</p> <pre><code>GROUP_MEMBER_LIMIT = 500\n</code></pre>"},{"location":"config/dtable_web_settings/#big-data-view-export-row-limit","title":"Big data view export row limit","text":"<p>When exporting an big data view to Excel, you can set the maximum number of exported rows in the configuration file:</p> <pre><code>ARCHIVE_VIEW_EXPORT_ROW_LIMIT = 100000\n</code></pre> <p>The default is 100,000.</p>"},{"location":"config/dtable_web_settings/#limit-of-collaborators-loaded-in-a-base","title":"Limit of collaborators loaded in a base","text":"<p>After opening a base, the first 300 collaborators and the first 100 external application accounts are loaded by default. These data are used to select collaborators in the collaborator column. If you need to load more collaborators, you can modify the following parameters.</p> <pre><code>DTABLE_RELATED_USERS_PER_PAGE = 300\nDTABLE_APP_USERS_PER_PAGE = 100\n</code></pre>"},{"location":"config/dtable_web_settings/#embed-bases-into-other-webpages","title":"Embed Bases into other webpages","text":"<p>Embed Bases into other webpages (iframe mode), the following options need to be added to support user login</p> <pre><code>SESSION_COOKIE_SAMESITE = 'None'\nSESSION_COOKIE_SECURE = True\nCSRF_COOKIE_SAMESITE = 'None'\nCSRF_COOKIE_SECURE = True\n</code></pre>"},{"location":"config/integrate-with-seafile/","title":"Integrate with Seafile","text":"<p>By the integration of SeaTable and Seafile,  users can either choose the files from Seafile in the file column, or you can transfer  files from SeaTable to Seafile. To make this integration possible, you need to grant the Cross-Domain permissions by setting an \"Access-Control-Allow-Origin\" header.</p> <p>Here is an example based on OS Ubuntu18.04 by adding several lines of configuration at /etc/nginx/sites-available/seafile.conf as bellow:</p> <pre><code>    location / {\n        add_header Access-Control-Allow-Origin *;\n        if ($request_method = 'OPTIONS') {\n            add_header Access-Control-Allow-Origin *;\n            add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;\n            add_header Access-Control-Allow-Headers \"deviceType,token, authorization, content-type\";\n            return 204;\n        }\n\ufeff\n        proxy_pass         http://127.0.0.1:8000;\n        ...............\n</code></pre>"},{"location":"config/seafile-conf/","title":"seafile.conf settings","text":""},{"location":"config/seafile-conf/#seafile-fileserver-configuration","title":"Seafile fileserver configuration","text":"<p>The configuration of seafile fileserver is in the <code>[fileserver]</code> section of the file <code>seafile.conf</code></p> <pre><code>[fileserver]\n# tcp port for fileserver\nport = 8082\n# bind address for fileserver\n# default to 0.0.0.0, if deployed without proxy: no access restriction\n# set to 127.0.0.1, if used with local proxy: only access by local\nhost = 127.0.0.1\n# set the number of worker threads to server http requests. \n# Default value is 10, which is a good value for most use cases.\nworker_threads = 15\n</code></pre>"},{"location":"config/seafile-conf/#database-configuration","title":"Database configuration","text":"<p>The whole database configuration is stored in the <code>[database]</code> section of the configuration file.</p> <pre><code>[database]\ntype = mysql\nhost = db\nport = 3306\nuser = root\npassword = seatable_db\ndb_name = seafile_db\nconnection_charset = utf8\nmax_connections=100\n</code></pre> <p>When you configure seafile server to use MariaDB, the default connection pool size is 100, which should be enough for most use cases.</p>"},{"location":"config/seatable-controller-conf/","title":"seatable-controller.conf","text":"<p>seatable-controller launches and monitors different components of SeaTable server.</p> <p>seatable-controller.conf is not created by default. If you need to modify default behaviour of seatable-controller, you can add the config file manually with contents like below:</p> <pre><code>DTABLE_SERVER_MEMORY_SIZE=8192\nDTABLE_SERVER_PING_TIMEOUT=20\n</code></pre> <ul> <li> <p>DTABLE_SERVER_MEMORY_SIZE: the memory size of dtable-server node</p> </li> <li> <p>DTABLE_SERVER_PING_TIMEOUT: maximum seconds after which the system will reboot if there is no response from dtable-server, you can set a relative higher number if you handle a big table.</p> </li> </ul>"},{"location":"config/sending_email/","title":"Sending Email Notifications on SeaTable","text":""},{"location":"config/sending_email/#types-of-email-sending-in-seatable","title":"Types of Email Sending in SeaTable","text":"<p>There are currently five types of emails sent in SeaTable :</p> <ul> <li>User resets their password</li> <li>User has been added as a collaborator in a table, or mentioned in a comment (depends on the user's email notification settings and that the notification is not seen within 1 hour)</li> <li>User has been shared with a base or added to a group</li> <li>System admin adds new members</li> <li>System admin resets user password</li> </ul>"},{"location":"config/sending_email/#options-of-email-sending","title":"Options of Email Sending","text":"<p>Add the following lines to <code>dtable_web_settings.py</code> to enable email sending.</p> <pre><code>EMAIL_USE_TLS = False\nEMAIL_HOST = 'smtp.example.com'        # smpt server\nEMAIL_HOST_USER = 'username@example.com'    # username and domain\nEMAIL_HOST_PASSWORD = 'password'    # password\nEMAIL_PORT = 25\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\nSERVER_EMAIL = EMAIL_HOST_USER\n</code></pre> <p>Note 1. If your email service does not work, you can check the log file <code>logs/dtable_web.log</code> to see what may have caused the problem.  2. If you want to use the email service without authentication, leave <code>EMAIL_HOST_USER</code> and <code>EMAIL_HOST_PASSWORD</code> blank (<code>''</code>). The emails will then be sent without a <code>From:</code> address. 3. About using SSL connection (using port 465): Port 587 is being used to establish a TLS connection and port 465 is being used to establish an SSL connection.  Starting from Django 1.8, it supports both.</p> <p>If you are using Gmail as email server, use following lines:</p> <p><pre><code>EMAIL_USE_TLS = True\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_HOST_USER = 'username@gmail.com'\nEMAIL_HOST_PASSWORD = 'password'\nEMAIL_PORT = 587\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\nSERVER_EMAIL = EMAIL_HOST_USER\n</code></pre> Note if you use Gmail:  1. If you have enabled 2-step-verification in your Gmail settings, you'll need an App Password instead of your login password. 2. If you haven't enabled 2-step-verification in your Gmail settings, you must then enable Less Secure Apps.</p>"},{"location":"config/templates_and_manual/","title":"Configuration of Manual, Templates, and Plugins","text":""},{"location":"config/templates_and_manual/#configuration-of-the-manual","title":"Configuration of the Manual","text":"<pre><code>HELP_LINK = 'https://seatable.io/help/?lang=auto'\n</code></pre>"},{"location":"config/templates_and_manual/#configuration-of-templates","title":"Configuration of Templates","text":"<p>Using templates requires a version above 1.6.0 of SeaTable.  Here are several steps:</p> <ol> <li>Enable creating base from templates in config file <code>dtable_web_settings.py</code>.</li> <li>Prepare a base for storing the table of template list in your own SeaTable account. In this base, create a table named <code>templates</code>.</li> <li>Prepare several template bases and generate an external-link, which should be filled in the designated cell of column named <code>link</code> of the table prepared in the second step.</li> </ol> <p>We suggest that the base of template list and templates be put together in one group.</p> <p>An example of the <code>templates</code> table is shown as below. You can not change the column title, otherwise the auto-generated template preview is not working anymore.</p> <p></p> <ul> <li>name [text]: internal name for distinguishing between different templates.</li> <li>category [single-select]: </li> <li>display_name [text]: template name shown on the website.</li> <li>description [long-text]: introduction and suggestions of the template.</li> <li>card_image [image]: image shown on the template panel on the website.</li> <li>card_image_expanded [image]: image shown on the template detail dialog after clicking the template panel.</li> <li>link [url]: the sharing link of the specific template.</li> </ul>"},{"location":"config/templates_and_manual/#activate-templates-in-seatable","title":"Activate templates in SeaTable","text":"<p>Add the following lines to <code>dtable_web_settings.py</code> :</p> <pre><code>TEMPLATE_BASE_API_TOKEN = '9851cecfd013a833eec47b629c72b3b593f91c7d'  \nTEMPLATE_TABLE_NAME = 'templates'\nENABLE_CREATE_BASE_FROM_TEMPLATE = True\nSHOW_TEMPLATES_LINK = True\n</code></pre> <p>Note that the \"TEMPLATE_BASE_API_TOKEN\" can be generated from \"Advanced --&gt; API Token\" option from the dropdown-menu of the template base.</p>"},{"location":"config/templates_and_manual/#making-templates","title":"Making templates","text":"<p>You can either choose downloading our public templates formatted as \u201c.dtable\u201c and import it to your own SeaTable server, or make a template according to your own interests by yourself. </p>"},{"location":"config/templates_and_manual/#configuration-of-plugins","title":"Configuration of Plugins","text":"<p>With the exception of the calendar plugin (which is bundled with SeaTable Server), SeaTable plugins must be separately installed.</p> <p>In <code>System Admin -&gt; Plugins -&gt; Import plugins from market</code>, you can import the latest plugins from the official SeaTable plugin directory directly. You can get a list of available plugins from https://market.seatable.io/api/plugins and also download the latest version of the plugins as ZIP files:</p> <ul> <li>https://market.seatable.io/api/plugins/timeline</li> <li>https://market.seatable.io/api/plugins/gallery</li> <li>https://market.seatable.io/api/plugins/page-design</li> <li>https://market.seatable.io/api/plugins/advanced-statistics</li> <li>https://market.seatable.io/api/plugins/kanban</li> </ul> <p>Once uploaded to the SeaTable Server via system administration in the web interface, users can add them to their bases via the plugin manager.</p> <p></p>"},{"location":"config/templates_and_manual/#map-plugin","title":"Map plugin","text":"<p>The map plugin currently supports only the Google Maps Platform. For the map plugin to access Google Maps data, a Google API Key is required.</p> <p>Add the following line to <code>dtable_web_settings.py</code> :</p> <pre><code>DTABLE_GOOGLE_MAP_KEY = \u2018xxxx\u2019 \n</code></pre>"},{"location":"config/enterprise/S3/","title":"S3 Object Storage","text":""},{"location":"config/enterprise/S3/#preparations","title":"Preparations","text":"<p>To install Seatable server and use S3 object storage, you need to do:</p> <ul> <li>According to  the SeaTable deployment document to install and deploy SeaTable server.</li> <li>Install python library <code>boto</code>. It can be used to access S3 service.</li> </ul> <pre><code>sudo easy_install boto\n</code></pre> <ul> <li>Install and use Memcached. To improve performance, Seatable will cache some small objects in memcached. We recommend to allocate 128MB of memory to memcached. Modify memcached config file (Ubuntu: /etc/memcached.conf):</li> </ul> <pre><code># Start with a cap of 64 megs of memory. It's reasonable, and the daemon default\n# Note that the daemon will grow to this size, but does not start out holding this much\n# memory\n# -m 64\n-m 128\n</code></pre>"},{"location":"config/enterprise/S3/#modify-seafileconf","title":"Modify seafile.conf","text":"<p>modify <code>/opt/seatable/seatable-data/seatable/conf/seafile.conf</code> </p> <pre><code>[commit_object_backend]\nname = s3\n# bucket's name can only use lowercase letters, numbers, and dashes\nbucket = my-commit-objects\nkey_id = your-key-id\nkey = your-secret-key\nmemcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100\n\n[fs_object_backend]\nname = s3\n# bucket's name can only use lowercase letters, numbers, and dashes\nbucket = my-fs-objects\nkey_id = your-key-id\nkey = your-secret-key\nmemcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100\n\n[block_backend]\nname = s3\n# bucket's name can only use lowercase letters, numbers, and dashes\nbucket = my-block-objects\nkey_id = your-key-id\nkey = your-secret-key\nmemcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100\n</code></pre> <p>It is recommended that you create buckets for commit, fs and block objects respectively. key_id and key are used to provide S3 authentication. You can find the key_id and key in the \"Security Credentials\" section of your AWS account page.</p> <p>When you create buckets on S3, please read the S3 rules for naming first. Note, especially do not use capital letters in the name of the bucket (do not use camel-style naming, such as MyCommitOjbects).</p> <p>For best performance, it is strongly recommended that you install memcached and enable memcache for objects. </p>"},{"location":"config/enterprise/S3/#use-the-new-s3-service-area","title":"Use the new S3 service area","text":"<p>Since January 2014, the new AWS service area only provides version 4 certification and signing protocol support for S3. This includes such as China region, EU central regions.</p> <p>To use S3 in the new service area, add the following additional options in the three buckets \"commit_object_backend\", \"fs_object_backend\", \"block_backend\":</p> <pre><code>use_v4_signature = true\n# eu-central-1 for Frankfurt region\naws_region = eu-central-1\n</code></pre> <p>If you are using S3 in China or Germany, you also need to add the host configuration of the corresponding region under each bucket configuration section, for example, Beijing, China:</p> <pre><code>host = s3.cn-north-1.amazonaws.com.cn\n</code></pre> <p>In order for search and other services to work in the new AWS service area, you also need to add the following content to the ~/.boto file:</p> <pre><code>[s3]\nuse-sigv4 = True\n</code></pre>"},{"location":"config/enterprise/S3/#use-https-to-connect-to-s3","title":"Use HTTPS  to connect to S3","text":"<p>You can use HTTPS to connect to S3. Add the following options to seafile.conf:</p> <pre><code>[commit_object_backend]\nname = s3\n......\nuse_https = true\n\ufeff\n[fs_object_backend]\nname = s3\n......\nuse_https = true\n\ufeff\n[block_backend]\nname = s3\n......\nuse_https = true\n</code></pre>"},{"location":"config/enterprise/S3/#use-object-storage-products-compatible-with-s3","title":"Use object storage products compatible with S3","text":"<p>There are already many object storage products compatible with S3 protocols, such as OpenStack Swift and Ceph's RGW. You can use object storage compatible with S3 through the following configuration:</p> <pre><code>[commit_object_backend]\nname = s3\nbucket = my-commit-objects\nkey_id = your-key-id\nkey = your-secret-key\nhost = 192.168.1.123:8080\npath_style_request = true\nmemcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100\n\n[fs_object_backend]\nname = s3\nbucket = my-fs-objects\nkey_id = your-key-id\nkey = your-secret-key\nhost = 192.168.1.123:8080\npath_style_request = true\nmemcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100\n\n[block_backend]\nname = s3\nbucket = my-block-objects\nkey_id = your-key-id\nkey = your-secret-key\nhost = 192.168.1.123:8080\npath_style_request = true\nmemcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100\n</code></pre> <p><code>host</code> is the address and port of the S3 compatible service. You can not add \"http\" or \"https\" before the option. By default, it will use http connection. If you want to use https connection, set the option:<code>hostuse_https = true</code> <code>path_style_request</code> option tells Seatable to use the form <code>https://192.168.1.123:8080/bucketname/object</code> to access the object. In AWS S3 service, the default URL format is virtual host format, such as <code>https://bucketname.s3.amazonaws.com/object</code>. But general object storage products do not support this format.</p>"},{"location":"config/enterprise/deploy_onlyoffice_docker/","title":"Deploy ONLYOFFICE Documentserver with Docker","text":""},{"location":"config/enterprise/deploy_onlyoffice_docker/#requirements","title":"Requirements","text":"<p>ONLYOFFICE Documentserver (ONLYOFFICE) can be installed on the same host as SeaTable Enterprise Edition (SeaTable EE). If ONLYOFFICE is used regularly and by many users, the host should be fitted with more cores and RAM.</p> <p>This tutorial assumes that SeaTable EE was deployed following this manual and is running. Docker and Docker Compose are installed and SeaTable is configured via the docker-compose.yml file.</p>"},{"location":"config/enterprise/deploy_onlyoffice_docker/#setup","title":"Setup","text":"<p>This manual describes the deployment of ONLYOFFICE with Docker. Thanks to Docker Compose, the deployment is straightforward and done with little effort.</p> <p>Docker volumes are utilized for saving configuration parameters and persisting data generated in the ONLYOFFICE Docker container. It is not recommended to change their paths. If you do, account for that when following these instructions.</p>"},{"location":"config/enterprise/deploy_onlyoffice_docker/#creating-folder-structure-and-configuring-onlyoffice","title":"Creating Folder Structure and Configuring ONLYOFFICE","text":"<p>When running, stop SeaTable and all associated Docker containers:</p> <pre><code>docker-compose down\n</code></pre> <p>All Docker volumes are mapped to <code>/opt/oods/DocumentServer</code>. Create this directory:</p> <pre><code>mkdir -p /opt/oods/DocumentServer\n</code></pre> <p>Create a configuration file in the newly created directory:</p> <pre><code>cd /opt/oods/DocumentServer\nnano local-production-linux.json\n</code></pre> <p>Copy the following code block in this file:</p> <pre><code>{\n  \"services\": {\n    \"CoAuthoring\": {\n         \"autoAssembly\": {\n             \"enable\": true,\n             \"interval\": \"5m\"\n         }\n    }\n  },\n  \"FileConverter\": {\n    \"converter\": {\n        \"downloadAttemptMaxCount\": 3\n    }\n  }\n}\n</code></pre>"},{"location":"config/enterprise/deploy_onlyoffice_docker/#modifying-docker-composeyml","title":"Modifying docker-compose.yml","text":"<p>Open the docker-compose.yml in <code>/opt/seatable/</code> and copy and paste the following codeblock. Add it as the last block before networks.</p> <pre><code>oods:\n  image: onlyoffice/documentserver:latest\n  container_name: oods\n  volumes:\n    - /opt/oods/DocumentServer/logs:/var/log/onlyoffice\n    - /opt/oods/DocumentServer/data:/var/www/onlyoffice/Data\n    - /opt/oods/DocumentServer/lib:/var/lib/onlyoffice\n    - /opt/oods/DocumentServer/local-production-linux.json:/etc/onlyoffice/documentserver/local-production-linux.json\n  environment:\n    - JWT_ENABLED=true\n    - JWT_SECRET=secretjwttoken  \n  networks:\n    - seatable-net\n</code></pre> <p>Alter the value for JWT_SECRET and memorize it for later. </p> <p>The docker-compose.yml should look like this:</p> <pre><code>version: '2.0'\nservices:\n  db:\n    image: mariadb:10.5\n    container_name: seatable-mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=secretdbpassword            # Root password of MySQL -- must be changed\n      - MYSQL_LOG_CONSOLE=true\n    volumes:\n      - /opt/seatable/mysql-data:/var/lib/mysql         # Volume of MySQL (directory for persistent storage) and mount point in cont&gt;\n    networks:\n      - seatable-net\n\n  memcached:\n    image: memcached:1.5.6\n    container_name: seatable-memcached\n    entrypoint: memcached -m 256\n    networks:\n      - seatable-net\n\n  redis:\n    image: redis:5.0.7\n    container_name: seatable-redis\n    networks:\n      - seatable-net\n\n  seatable:\n    image: seatable/seatable-enterprise:latest\n    container_name: seatable\n    ports:\n      - \"80:80\"                                         # HTTP port on the Docker host and the port in the container -- must be chan&gt;\n      - \"443:443\"                                       # HTTPS port on the Docker host and the port in the container -- must be cha&gt;\n    volumes:\n      - /opt/seatable/seatable-data:/shared             # Volume of SeaTable (directory for persistent storage) and mount point in c&gt;\n    environment:\n      - DB_HOST=db\n      - DB_ROOT_PASSWD=secretdbpassword                 # Root password of MySQL -- must be changed to the value set above\n      - SEATABLE_SERVER_LETSENCRYPT=True                # Decision on whether or not to use Let's Encrypt for HTTPS, default is Fals&gt;\n      - SEATABLE_SERVER_HOSTNAME=seatable.example.com   # Host name -- must be changed\n      - TIME_ZONE=Europe/Berlin                         # Optional, default is UTC. Example: Europe/Berlin. Choices can be found her&gt;\n    depends_on:\n      - db\n      - memcached\n      - redis\n    networks:\n      - seatable-net\n\n  oods:\n    image: onlyoffice/documentserver:latest\n    container_name: oods\n    volumes:\n      - /opt/oods/DocumentServer/logs:/var/log/onlyoffice\n      - /opt/oods/DocumentServer/data:/var/www/onlyoffice/Data\n      - /opt/oods/DocumentServer/lib:/var/lib/onlyoffice\n      - /opt/oods/DocumentServer/local-production-linux.json:/etc/onlyoffice/documentserver/local-production-linux.json\n    environment:\n      - JWT_ENABLED=true\n      - JWT_SECRET=secretjwttoken\n    networks:\n      - seatable-net\n\nnetworks:\n  seatable-net:\n</code></pre>"},{"location":"config/enterprise/deploy_onlyoffice_docker/#modifying-dtable_web_setingspy","title":"Modifying dtable_web_setings.py","text":"<p>Open the dtable_web_settings.py:</p> <pre><code>cd /opt/seatable/seatable-data/seatable/conf\nnano dtable_web_settings.py\n</code></pre> <p>Copy and paste the following code block at the end of the file:</p> <pre><code># onlyoffice\nENABLE_ONLYOFFICE = True\nONLYOFFICE_APIJS_URL = \"https://SEATABLE_SERVER_HOSTNAME/onlyofficeds/web-apps/apps/api/documents/api.js\"\nONLYOFFICE_FILE_EXTENSION = ('doc', 'docx', 'ppt', 'pptx', 'xls', 'xlsx', 'odt', 'fodt', 'odp', 'fodp', 'ods', 'fods', 'csv', 'ppsx', 'pps')\nONLYOFFICE_JWT_SECRET = 'secretjwttoken'\n</code></pre> <p>Change SEATABLE_SERVER_HOSTNAME to reflect the hostname of your SeaTable server. Additionally, adjust the value for ONLYOFFICE_JWT_SECRET to correspond to the JWT_SECRET in the docker-compose.yml.</p>"},{"location":"config/enterprise/deploy_onlyoffice_docker/#modifying-the-nginx-configuration","title":"Modifying the nginx Configuration","text":"<p>Open the nginx configuration file:</p> <pre><code>cd /opt/seatable/seatable-data/seatable/conf\nnano nginx.conf\n</code></pre> <p>Copy and paste the following lines at the top of the configuration file:</p> <pre><code># Required for only office document server\nmap $http_x_forwarded_proto $the_scheme {\n  default $http_x_forwarded_proto;\n  \"\" $scheme;\n}\nmap $http_x_forwarded_host $the_host {\n  default $http_x_forwarded_host;\n  \"\" $host;\n}\nmap $http_upgrade $proxy_connection {\n  default upgrade;\n  \"\" close;\n}\n</code></pre> <p>Add the following location for ONLYOFFICE to the server block for port 443:</p> <pre><code>location /onlyofficeds/ {\n  proxy_pass http://oods/;\n  proxy_http_version 1.1;\n  client_max_body_size 100M;\n  proxy_read_timeout 3600s;\n  proxy_connect_timeout 3600s;\n  proxy_set_header Upgrade $http_upgrade;\n  proxy_set_header Connection $proxy_connection;\n  proxy_set_header X-Forwarded-Host $the_host/onlyofficeds;\n  proxy_set_header X-Forwarded-Proto $the_scheme;\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n</code></pre>"},{"location":"config/enterprise/deploy_onlyoffice_docker/#restarting-seatable","title":"Restarting SeaTable","text":"<p>ONLYOFFICE is now configured and office documents can be directly edited from within SeaTable.</p> <p>Run docker-compose.yml and start SeaTable:</p> <pre><code>docker-compose up -d\ndocker exec -d seatable /shared/seatable/scripts/seatable.sh start\n</code></pre> <p>ONLYOFFICE takes some time to start up. If you get an error message when clicking an office file in SeaTable, be patient. With <code>docker-compose logs -f oods</code>, you can monitor the startup progress.</p>"},{"location":"config/enterprise/deploy_onlyoffice_docker/#faq","title":"FAQ","text":"<p>SeaTable doesn't start anymore/SeaTable is no longer accessible, what can I do? It is likely that there is a misconfiguration in either nginx.conf or dtable_web_settings.py.</p> <p>After docker-composing up, run <code>docker exec -it seatable nginx -t</code> to check the nginx configuration. If the nginx configuration is invalid, the output will tell you.</p> <p>If nginx shows no error, enter the seatable container and start seatable manually:</p> <pre><code>docker exec -it seatable bash\n/shared/seatable/scripts/seatable.sh start\n</code></pre>"},{"location":"config/enterprise/roles_permissions/","title":"User Roles","text":"<p>In SeaTable Enterprise Edition (SeaTable EE), a user's permissions are determined by the role assigned to the user.</p> <p>SeaTable has two standard roles. Additionally, extra roles can be created for more fine-grained permission management. All changes relating to the SeaTable's roles are done in the configuration file <code>dtable_web_settings.py</code>.</p> <p>NOTE: Admin privileges are not part of the user role.</p>"},{"location":"config/enterprise/roles_permissions/#available-permissions","title":"Available Permissions","text":"<p>The following permissions are supported/deleted in the latest SeaTable version:</p> Permission Added in version Deleted in version Description Additional information can_add_dtable 1.0 Permission to create bases. can_add_group 1.0 Permission to create groups. The user creating a group becomes automatically the group's owner. The permission can_add_dtable is necessary to create bases inside a group. can_use_global_address_book 1.0 Enables autocomplete of names and emails of other users in the system. If cloud_mode = True in <code>dtable_web_settings.py</code>, autocomplete is disabled for personal accounts and autocomplete is enabled inside teams. can_generate_external_link 1.0 Permission to create external links. can_generate_share_link 1.0 2.6 Permission to create invite links. Deprecated because of redundancy. role_asset_quota 1.0 Storage  quota for files and images inside a user's bases. '1G' means a storage quota of one gigabyte; an empty value '' means no storage quota. Files in shared bases owned by other users do not count against the user's storage quota. row_limit 1.0 Row limit for all bases of the user. '10000' (with quotes) means a limit of 10.000 rows; '-1' (with quotes) means no row limit. Rows in shared bases owned by other users do not count against the row limit.  Archived rows does not count against the limit either. can_create_common_dataset 1.0 Permission to create common datasets (CDS). If set to False, the user cannot create CDS, but the user can access existing CDS. can_use_advanced_permissions 1.1 Permission to use advanced permissions. Advanced  permissions include table permissions, column permissions, view share, custom  sharing permissions, row locking. can_use_advanced_customization 2.0 Permission to use advanced security customizations. Advanced customization includes base security settings. can_run_python_script 1.4 Permission to run Python scripts. The execution of Python scripts requires the installation of FAAS Scheduler and Python Runner. snapshot_days 2.1 Retention period for snapshots in days. 180 (without quotes) means a storage period of 180 days; no value means an unlimited retention period. Snapshots older than the retention period are automatically removed. can_use_external_app 2.2 Permission to use external apps. If set to False, the menu is not shown. can_use_automation_rules 2.2 Permission to create and run automation rules. scripts_running_limit 2.3 Number of Python scripts a user can run within a month. 100 (without quotes) means 100 script runs per month; -1 (without quotes) means unlimited script runs. The script run counter is reset at the beginning of every month. Only visible if  can_run_python_script = True and Python Runner is available. can_schedule_run_script 2.3 Permission to schedule the execution of Python scripts. The  permission can_run_python_script is also necessary to automatically run Python scripts. can_archive_rows 2.3 Permission  to archive rows. If set to False, the user cannot archive rows and cannot create archive views."},{"location":"config/enterprise/roles_permissions/#standard-roles","title":"Standard Roles","text":"<p>The two standard roles <code>default</code>and <code>guest</code>are defined as follows:</p> <pre><code>ENABLED_ROLE_PERMISSIONS = {\n    'default': {\n        'can_add_dtable': True,\n        'can_add_group': True,\n        'can_use_global_address_book': True,\n        'can_generate_external_link': True,\n        'role_asset_quota': '',\n        'row_limit': -1,\n        'can_create_common_dataset': True,\n        'can_run_python_script': True,\n        'can_use_advanced_permissions': True,\n        'can_use_advanced_customization': True,\n        'snapshot_days': 180,\n        'can_use_external_app': True,\n        'can_use_automation_rules': True,\n        'scripts_running_limit': -1,\n        'can_schedule_run_script': True,\n        'can_archive_rows': True\n    },\n    'guest': {\n        'can_add_dtable': False,\n        'can_add_group': False,\n        'can_use_global_address_book': False,\n        'can_generate_share_link': False,\n        'can_generate_external_link': True,\n        'role_asset_quota': '',\n        'row_limit': -1,\n        'can_create_common_dataset': False,\n        'can_run_python_script': True,\n        'can_use_advanced_permissions': False,\n        'snapshot_days': 30,\n        'can_use_external_app': True,\n        'can_use_automation_rules': True,\n        'scripts_running_limit': -1,\n        'can_schedule_run_script': True,\n        'can_archive_rows': True\n    },\n}\n</code></pre> <p>If you want to edit the standard roles, copy the above codeblock to <code>dtable_web_settings.py</code>and modify as per your needs. Restart SeaTable for the changes to take effect.</p>"},{"location":"config/enterprise/roles_permissions/#custom-roles","title":"Custom Roles","text":"<p>You can add extra roles by extending the codeblock in <code>dtable_web_settings.py</code>.</p> <p>To add a role <code>employee</code>, for example, add the following lines (beginning at <code>'employee'</code> and ending at <code>},</code> ) to the existing role definition.</p> <pre><code>ENABLED_ROLE_PERMISSIONS = {\n\n    'employee': {\n        'can_add_dtable': True,\n        'can_add_group': False,\n        'can_create_common_dataset': False\n    },\n\n\n}\n</code></pre> <p>Restart SeaTable for the new role to become available in SeaTable.</p>"},{"location":"docker/Cluster/SeaTable%20Cluster/","title":"SeaTable cluster","text":"<p>SeaTable Enterprise Edition support cluster for better performance.</p> <p>A general architecture is like following:</p> <p></p> <p>Note</p> <ul> <li> <p>In SeaTable cluster, we use the storage backend to store persistent data.</p> </li> <li> <p>All nodes use the same docker image, with a different docker compose file and seatable-controller.conf to control the behavior.</p> </li> </ul> <p>In the following manual, we will show the steps to setup a two nodes deployment</p> <ul> <li>A dtable-web node running dtable-web, seaf-server, dtable-events, dtable-db and dtable-storage-server</li> <li>A dtable-server node running dtable-server, dtable-storage-server</li> </ul>"},{"location":"docker/Cluster/SeaTable%20Cluster/#setup-dtable-web-nodes","title":"Setup dtable-web nodes","text":"<p>First, setup a one node deployment according to Enterprise-Edition</p> <p>Then, use storage backend according to S3 Object Storage</p>"},{"location":"docker/Cluster/SeaTable%20Cluster/#modify-configuration-file","title":"Modify configuration file","text":"<p>Modify <code>docker-compose.yml</code> to let Redis can be accessed from another node</p> <pre><code>  redis:\n    image: redis:5.0.7\n    container_name: seatable-redis\n    ports:\n      \"192.xx.xx.xx:6379:6379\"   # dtable-web server's IP\n</code></pre> <p>Modify dtable-web configuration file  <code>/Your SeaTable data volume/seatable/conf/dtable_web_settings.py</code></p> <pre><code>USE_INNER_FILESERVER_FOR_DTABLE_SERVER = False\n\nUSE_INNER_DTABLE_SERVER = False\nDTABLE_SERVER_URL = 'https://dtable-server.example.com/'  # dtable-server's url\nDTABLE_SOCKET_URL = 'https://dtable-server.example.com/'  # dtable-server's url\n</code></pre> <p>Modify dtable-db configuration file  <code>/Your SeaTable data volume/seatable/conf/dtable-db.comf</code></p> <pre><code>[dtable cache]\nprivate_key = \"xxx\"\ndtable_server_url = \"https://dtable-server.example.com/\"\ntotal_cache_size = 100\n</code></pre> <p>Create configuration file :  <code>/Your SeaTable data volume/seatable/conf/seatable-controller.conf</code></p> <pre><code>ENABLE_SEAFILE_SERVER=true\nENABLE_DTABLE_WEB=true\nENABLE_DTABLE_SERVER=false\nENABLE_DTABLE_DB=true\nENABLE_DTABLE_STORAGE_SERVER=true\nENABLE_DTABLE_EVENTS=true\nDTABLE_EVENTS_TASK_MODE=all\n</code></pre> <p>DTABLE_EVENTS_TASK_MODE can be all, foreground, background. Here we use all. If you want to deploy a separate background node for running dtable-events, use foreground here.</p>"},{"location":"docker/Cluster/SeaTable%20Cluster/#restart-dtable-web-server","title":"Restart dtable-web server","text":"<pre><code>docker-compose up -d\n\ndocker exec -it seatable bash\n\nseatable.sh\n</code></pre> <p>When you see following in the output log, it means success:</p> <pre><code>Skip dtable-server\n\nSeaTable started\n</code></pre>"},{"location":"docker/Cluster/SeaTable%20Cluster/#setup-dtable-server","title":"Setup dtable-server","text":""},{"location":"docker/Cluster/SeaTable%20Cluster/#copy-and-modify-docker-composeyml","title":"Copy and modify docker-compose.yml","text":"<p>The default directory for SeaTable is <code>/opt/seatable</code>. Create the directory:</p> <pre><code>mkdir /opt/seatable\n</code></pre> <p>Copy the docker-compose.yml file on the dtable-web server and modify docker-compose.yml.</p> <p>vim /opt/seatable/docker-compose.yml</p> <pre><code>version: '2.0'\nservices:\n  seatable:\n    image: seatable/seatable-enterprise:latest\n    container_name: seatable\n    ports:\n      - \"80:80\"\n      - \"443:443\"  # If https is enabled, cancel the comment.\n    volumes:\n      - /opt/seatable/shared:/shared  # Requested, specifies the path to Seafile data persistent store.\n    environment:\n      - SEATABLE_SERVER_HOSTNAME=dtable-server.example.com # Specifies your host name if https is enabled\n      - SEATABLE_SERVER_LETSENCRYPT=True\n      - TIME_ZONE=Asia/Shanghai # Optional, default is UTC. Should be uncomment and set to your local time zone.\n    networks:\n      - dtable-net\n\nnetworks:\n  dtable-net:\n</code></pre>"},{"location":"docker/Cluster/SeaTable%20Cluster/#copy-and-modify-configuration-file","title":"Copy and modify configuration file","text":"<p>Prepare configuration file directory</p> <pre><code>mkdir -p /opt/seatable/shared/seatable/conf\n</code></pre> <p>Copy the configuration file on the dtable-web server to the conf directory.</p> <p>Modify the dtable-server configuration file :  <code>/Your SeaTable data volume/seatable/conf/dtable_server_config.json</code></p> <pre><code>{\n    \"host\": \"mysql host\",\n    \"user\": \"mysql uer\",\n    \"password\": \"password\",\n    \"database\": \"dtable_db\",\n    \"port\": 3306,\n    \"private_key\": \"xxx\",\n    \"dtable_web_service_url\": \"xxx\",  # dtable-web server's URL\n    \"redis_host\": \"192.xx.xx.xx\",   # dtable-web server's IP\n    \"redis_port\": 6379,\n    \"redis_password\": \"\"\n}\n</code></pre> <p>Modify the Nginx configuration file : <code>/Your SeaTable data volume/seatable/conf/nginx.conf</code> </p> <pre><code>upstream dtable_servers {\n    server 127.0.0.1:5000;\n    keepalive 15;\n}\n\nserver {\n    if ($host = dtable-server.example.com) {\n        return 301 https://$host$request_uri;\n    }\n    listen 80;\n    server_name dtable-server.example.com;\n    return 404;\n}\n\nserver {\n    server_name dtable-server.example.com;\n    listen 443 ssl;\n    ssl_certificate /shared/ssl/&lt;your-ssl.cer&gt;;\n    ssl_certificate_key /shared/ssl/&lt;your-ssl.key&gt;;\n\n    proxy_set_header X-Forwarded-For $remote_addr;\n\n    location /socket.io {\n        proxy_pass http://dtable_servers;\n        ...\n    }\n\n    location / {\n        if ($request_method = 'OPTIONS') {\n            add_header Access-Control-Allow-Origin *;\n            add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;\n            add_header Access-Control-Allow-Headers \"deviceType,token, authorization, content-type\";\n            return 204;\n        }\n\n        proxy_pass         http://dtable_servers;\n    ...\n    }\n}\n</code></pre> <p>Create configuration file :  <code>/Your SeaTable data volume/seatable/conf/seatable-controller.conf</code></p> <pre><code>ENABLE_SEAFILE_SERVER=false\nENABLE_DTABLE_WEB=false\nENABLE_DTABLE_SERVER=true\nENABLE_DTABLE_DB=false\nENABLE_DTABLE_STORAGE_SERVER=true\nENABLE_DTABLE_EVENTS=false\nDTABLE_EVENTS_TASK_MODE=all\n</code></pre>"},{"location":"docker/Cluster/SeaTable%20Cluster/#start-dtable-server","title":"Start dtable-server","text":"<pre><code>docker-compose up -d\n\ndocker exec -it seatable bash\n\nseatable.sh\n</code></pre> <p>When you see following in the output log, it means success:</p> <pre><code>Skip seafile-server\nSkip dtable-events\nSkip dtable-web\nSkip dtable-db\n\nSeaTable started\n</code></pre>"},{"location":"docker/Cluster/dtable-db%20Standalone/","title":"dtable-db Standalone","text":"<p>On the basis of the previous manual, you can also deploy dtable-db separately.</p> <p>In the following manual, we will show the steps to setup a three nodes deployment</p> <ul> <li>A dtable-web node running dtable-web, seaf-server, dtable-events and dtable-storage-server</li> <li>A dtable-server node running dtable-server, dtable-storage-server</li> <li>A dtable-db node running dtable-db, dtable-storage-server</li> </ul>"},{"location":"docker/Cluster/dtable-db%20Standalone/#modify-dtable-web-server-configuration-file","title":"Modify dtable-web server configuration file","text":"<p>Modify the configuration file :  <code>/Your SeaTable data volume/seatable/conf/seatable-controller.conf</code></p> <pre><code>ENABLE_DTABLE_DB=false\n</code></pre> <p>Modify dtable-web configuration file  <code>/Your SeaTable data volume/seatable/conf/dtable_web_settings.py</code></p> <pre><code>DTABLE_DB_URL = 'https://dtable-db.example.com'  # dtable-db server's url\n</code></pre>"},{"location":"docker/Cluster/dtable-db%20Standalone/#restart-dtable-web-server","title":"Restart dtable-web server","text":"<pre><code>docker-compose up -d\n\ndocker exec -it seatable bash\n\nseatable.sh\n</code></pre> <p>When you see following in the output log, it means success:</p> <pre><code>Skip dtable-server\nSkip dtable-db\n\nSeaTable started\n</code></pre>"},{"location":"docker/Cluster/dtable-db%20Standalone/#modify-dtable-server-server-configuration-file","title":"Modify dtable-server server configuration file","text":"<p>Modify dtable-server configuration file  <code>/Your SeaTable data volume/seatable/conf/dtable_server_config.json</code></p> <pre><code>\"dtable_db_service_url\":  \"https://dtable-db.example.com\"  // dtable-db server's url\n</code></pre>"},{"location":"docker/Cluster/dtable-db%20Standalone/#restart-dtable-server-server","title":"Restart dtable-server server","text":"<pre><code>docker-compose up -d\n\ndocker exec -it seatable bash\n\nseatable.sh\n</code></pre> <p>When you see following in the output log, it means success:</p> <pre><code>Skip seafile-server\nSkip dtable-events\nSkip dtable-web\nSkip dtable-db\n\nSeaTable started\n</code></pre>"},{"location":"docker/Cluster/dtable-db%20Standalone/#setup-dtable-db","title":"Setup dtable-db","text":""},{"location":"docker/Cluster/dtable-db%20Standalone/#copy-and-modify-docker-composeyml","title":"Copy and modify docker-compose.yml","text":"<p>The default directory for SeaTable is <code>/opt/seatable</code>. Create the directory:</p> <pre><code>mkdir /opt/seatable\n</code></pre> <p>Copy the docker-compose.yml file on the dtable-web server and modify docker-compose.yml.</p> <p>vim /opt/seatable/docker-compose.yml</p> <pre><code>version: '2.0'\nservices:\n  seatable:\n    image: seatable/seatable-enterprise:latest\n    container_name: seatable\n    ports:\n      - \"80:80\"\n      - \"443:443\"  # If https is enabled, cancel the comment.\n    volumes:\n      - /opt/seatable/shared:/shared  # Requested, specifies the path to Seafile data persistent store.\n    environment:\n      - SEATABLE_SERVER_HOSTNAME=dtable-db.example.com # Specifies your host name if https is enabled\n      - SEATABLE_SERVER_LETSENCRYPT=True\n      - TIME_ZONE=Asia/Shanghai # Optional, default is UTC. Should be uncomment and set to your local time zone.\n    networks:\n      - dtable-net\n\nnetworks:\n  dtable-net:\n</code></pre>"},{"location":"docker/Cluster/dtable-db%20Standalone/#copy-and-modify-configuration-file","title":"Copy and modify configuration file","text":"<p>Prepare configuration file directory</p> <pre><code>mkdir -p /opt/seatable/shared/seatable/conf\n</code></pre> <p>Copy the configuration file on the dtable-web server to the conf directory.</p> <p>Modify the Nginx configuration file : <code>/Your SeaTable data volume/seatable/conf/nginx.conf</code></p> <pre><code>server {\n    if ($host = dtable-db.example.com) {\n        return 301 https://$host$request_uri;\n    }\n    listen 80;\n    server_name dtable-db.example.com;\n    return 404;\n}\n\nserver {\n    server_name dtable-db.example.com;\n    listen 443 ssl;\n    ssl_certificate /shared/ssl/&lt;your-ssl.cer&gt;;\n    ssl_certificate_key /shared/ssl/&lt;your-ssl.key&gt;;\n\n    proxy_set_header X-Forwarded-For $remote_addr;\n\n    location / {\n        if ($request_method = 'OPTIONS') {\n            add_header Access-Control-Allow-Origin *;\n            add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;\n            add_header Access-Control-Allow-Headers \"deviceType,token, authorization, content-type\";\n            return 204;\n        }\n\n        proxy_pass         http://127.0.0.1:7777/;\n    ...\n    }\n}\n</code></pre> <p>Create configuration file :  <code>/Your SeaTable data volume/seatable/conf/seatable-controller.conf</code></p> <pre><code>ENABLE_SEAFILE_SERVER=false\nENABLE_DTABLE_WEB=false\nENABLE_DTABLE_SERVER=false\nENABLE_DTABLE_DB=true\nENABLE_DTABLE_STORAGE_SERVER=true\nENABLE_DTABLE_EVENTS=false\nDTABLE_EVENTS_TASK_MODE=all\n</code></pre>"},{"location":"docker/Cluster/dtable-db%20Standalone/#start-dtable-db","title":"Start dtable-db","text":"<pre><code>docker-compose up -d\n\ndocker exec -it seatable bash\n\nseatable.sh\n</code></pre> <p>When you see following in the output log, it means success:</p> <pre><code>Skip seafile-server\nSkip dtable-events\nSkip dtable-web\nSkip dtable-server\n\nSeaTable started\n</code></pre>"},{"location":"docker/Cluster/dtable-server%20Cluster/","title":"dtable-server cluster (optional)","text":"<p>The dtable-server is stateful. A base should only be loaded into one server and write to that server. Every base has an UUID. The bases are distributed to different dtable-server according to the first 2 character in its UUID. So there are 256 buckets. The dtable-server servers should know the distribution map consistently. We use Etcd server to achieve the goal.</p> <p>When a dtable-server join to the cluster, it register its information to Etcd cluster. When a dtable-server is dead, the registered information will expire in 90 seconds. A separate cluster monitor program will periodically check available servers and assign buckets to different dtable-servers (it will keep existing assignment as much as possible to keep the assignment stable), and write the new assignment information to Etcd. When the assignment is changed, the dtable-servers will receive real-time notification from Etcd.</p> <p>When a base is visted by a user, the dtable-web will check the information in Etcd and return the corresponding dtable-server to the browser. The browser then loads the base from the dtable-server and establishes a Socket connection for real-time communication.</p> <p>For internal communication, dtable-web, dtable-event, dtable-db use dtable-server-proxy node, instead of talking to a specific dtable-server directly.</p> <p>Here we use two dtable-server nodes, one dtable-server-proxy node and three Etcd servers as an example to show how to setup the cluster.</p> <p>components</p> <ul> <li>dtable-server-01</li> <li>dtable-server-02</li> <li>dtable-server-proxy</li> <li>etcd-01</li> <li>etcd-02</li> <li>etcd-03</li> </ul> <p>Note: You need to deploy at least two dtable-server nodes according to the <code>Setup dtable-server</code> chapter in the previous manual.</p>"},{"location":"docker/Cluster/dtable-server%20Cluster/#etcd","title":"ETCD","text":"<p>Install</p> <pre><code># install\nsudo apt install -y etcd etcd-client\n\n# start\nservice etcd start\n</code></pre> <p>ETCD cluster</p> <p>Guide to setting up a cluster in etcd</p>"},{"location":"docker/Cluster/dtable-server%20Cluster/#deploy-dtable-server-proxy-by-docker","title":"Deploy dtable-server-proxy by docker","text":"<p>Download the docker-compose.yml sample file into dtable-server-proxy's directory and modify the Compose file to fit your environment and settings.</p> <pre><code>mkdir -p /opt/dtable-server-proxy/\n</code></pre> <p>Optional customizable options in the Compose file are:</p> <ul> <li>Volume path for the container dtable-server-proxy</li> <li>Image tag of the dtable-server-proxy version to install (image)</li> <li>Time zone (TIME_ZONE)</li> </ul> <p>Note: dtable-server-proxy only needs LAN communication, public domain is not required.</p> <p>Create dtable-server-proxy configuration file</p> <p>Prepare configuration file directory</p> <pre><code>mkdir -p /opt/dtable-server-proxy/shared/seatable-proxy/conf/\n</code></pre> <p>Create the dtable-server-proxy configuration file :  <code>/opt/dtable-server-proxy/shared/seatable-proxy/conf/dtable_server_config.json</code></p> <pre><code>{\n  \"cluster_config\": {\n    \"etcd_host_list\": [\"etcd-01.example.com:2379\", \"etcd-02.example.com:2379\", \"etcd-03.example.com:2379\"]  // domain of etcd servers\n  }\n}\n</code></pre> <p>Start dtable-server-proxy</p> <pre><code>docker-compose up -d\n</code></pre>"},{"location":"docker/Cluster/dtable-server%20Cluster/#modify-dtable-server-01-configuration-file","title":"Modify dtable-server-01 configuration file","text":"<p>dtable_server_config.json</p> <pre><code>{\n  \"cluster_config\": {\n    \"etcd_host_list\": [\"etcd-01.example.com:2379\", \"etcd-02.example.com:2379\", \"etcd-03.example.com:2379\"],  // domain of etcd servers\n    \"node_id\": \"dtable-server-01\",\n    \"node_url\": \"https://dtable-server-01.example.com/\",  // domain of dtable-server-01\n    \"local_node_url\": \"http://172.17.30.94/\"  // intranet IP of dtable-server-01\n  }\n}\n</code></pre> <p>Then restart dtable-server-01</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh restart\n</code></pre> <p>Note, the <code>node_url</code> is used by the end user to connect to the server. The <code>local_node_url</code> is used by the dtable-server-proxy to connect to the server.</p>"},{"location":"docker/Cluster/dtable-server%20Cluster/#modify-dtable-server-02-configuration-file","title":"Modify dtable-server-02 configuration file","text":"<p>dtable_server_config.json</p> <pre><code>{\n  \"cluster_config\": {\n    \"etcd_host_list\": [\"etcd-01.example.com:2379\", \"etcd-02.example.com:2379\", \"etcd-03.example.com:2379\"],  // domain of etcd servers\n    \"node_id\": \"dtable-server-02\",\n    \"node_url\": \"https://dtable-server-02.example.com/\",  // domain of dtable-server-02\n    \"local_node_url\": \"http://172.17.30.95/\"  // intranet IP of dtable-server-02\n  }\n}\n</code></pre> <p>Then restart dtable-server-02, the command is the same as before.</p>"},{"location":"docker/Cluster/dtable-server%20Cluster/#modify-dtable-web-configuration-files","title":"Modify dtable-web configuration files","text":"<p>dtable_web_settings.py</p> <pre><code># etcd\nENABLE_DTABLE_SERVER_CLUSTER = True\nETCD_SERVER_HOST_LIST = ['etcd-01.example.com', 'etcd-02.example.com', 'etcd-03.example.com']  # domain of etcd servers\nDTABLE_PROXY_SERVER_URL = 'http://dtable-server-proxy.example.com:5550/'  # domain of dtable-server-proxy\n</code></pre> <p>dtable-db.conf</p> <pre><code>[dtable cache]\ndtable_server_url = \"http://dtable-server-proxy.example.com:5550/\"  # domain of dtable-server-proxy\n</code></pre> <p>Then restart dtable-web, the command is the same as before.</p> <p>Now you can use the dtable-server cluster.</p>"},{"location":"docker/Cluster/dtable-server%20Cluster/#load-balance","title":"Load balance","text":"<p>In some cases, you can manually load balancing</p> <pre><code>curl -X POST http://dtable-server-proxy.example.com:5555/rebalance/  # domain of dtable-server-proxy\n</code></pre>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/","title":"Deploy SeaTable Developer Edition with Docker","text":""},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#requirements","title":"Requirements","text":"<p>SeaTable Developer Edition (SeaTable DE) requires 4 cores and 8GB RAM. These resources guarantee good performance for most applications with several hundred concurrent connections.  When bases become large, more RAM may be needed since SeaTable stores the bases in memory.</p> <p>This tutorial assumes that no other services are installed on the  server, especially no other services listening on port 80 and 443.</p> <p>SeaTable uses Docker and Docker Compose. If your platform does not support Docker, you cannot install SeaTable.</p>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#setup","title":"Setup","text":"<p>The following assumptions and conventions are used in the rest of this document:</p> <ul> <li><code>/opt/seatable</code> is the directory of SeaTable. If you decide to put SeaTable in a  different directory - which you can - adjust all paths accordingly. </li> <li>SeaTable uses two Docker volumes for persisting data generated in its database and SeaTable Docker container. The volumes' host paths are /opt/seatable/mysql-data and /opt/seatable/seatable-data,  respectively.  It is not recommended to change these paths. If you do, account for it when following these instructions.</li> <li>All configuration and log files for SeaTable and the webserver Nginx are stored in the volume of the SeaTable container.</li> <li>Due to SeaTable's cloud first approach, these instructions only  elaborate explicitly on the deployment of SeaTable's latest version. (An earlier version of SeaTable EE can be installed using these  instructions. Just download its image from Docker Hub and adjust the docker-compose file accordingly. Earlier versions may  not be compatible with the SeaTable plugins available on SeaTable's Market though.)</li> </ul>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#installing-docker","title":"Installing Docker","text":"<p>Use the official installation guide for your OS to install Docker. </p>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#installing-docker-compose","title":"Installing docker-compose","text":"<p>Install the Docker Compose package:</p> <pre><code># CentOS\nyum install docker-compose -y\n\n# Debian/Ubuntu\napt-get install docker-compose -y\n</code></pre>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#downloading-the-seatable-image","title":"Downloading the SeaTable Image","text":"<p>Pull the SeaTable image from Docker Hub:</p> <pre><code>docker pull seatable/seatable-developer:latest\n</code></pre> <p>NOTE: Older SeaTable versions are also available on Docker Hub. To pull an older version, replace 'latest' by the desired version.</p>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#downloading-and-modifying-docker-composeyml","title":"Downloading and Modifying docker-compose.yml","text":"<p>Download the docker-compose.yml sample file into SeaTable's directory and modify the file to fit your environment and settings.</p> <pre><code>mkdir /opt/seatable\ncd /opt/seatable\nwget -O \"docker-compose.yml\" \"https://manual.seatable.io/docker/Developer-Edition/docker-compose.yml\"\nnano docker-compose.yml\n</code></pre> <p>The following fields merit particular attention:</p> <ul> <li>Password of MariaDB root (MYSQL_ROOT_PASSWORD and DB_ROOT_PASSWD)</li> <li>Use of Let's Encrypt for HTTPS (SEATABLE_SERVER_LETSENCRYPT)</li> <li>Host name (SEATABLE_SERVER_HOSTNAME)</li> </ul> <p>Additional customizable options in the Compose file are:</p> <ul> <li>Volume path for the container db</li> <li>Volume path for the container seatable</li> <li>Image tag of the SeaTable version to install (image)</li> <li>Time zone (TIME_ZONE)</li> </ul>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#initializing-database","title":"Initializing Database","text":"<p>Initialize database by running docker-compose:</p> <pre><code>cd /opt/seatable\ndocker-compose up\n</code></pre> <p>NOTE: You should run the above command in the directory with the <code>docker-compose.yml</code>.</p> <p>Wait for a while. When you see <code>This is an idle script (infinite loop) to keep container running.</code>  in the output log, the database has been initialized successfully. Press keyboard <code>CTRL + C</code> (Windows) or <code>Control + C</code> (Mac)\u00a0to return to the prompt.</p>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#starting-the-docker-containers","title":"Starting the Docker Containers","text":"<p>Run docker-compose again, this time in detached mode:</p> <pre><code>docker-compose up -d\n</code></pre> <p>NOTE: You should run the above command in the directory with the <code>docker-compose.yml</code>.</p>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#starting-seatable-server","title":"Starting SeaTable Server","text":"<p>Now you can start SeaTable and create the first admin user:</p> <pre><code># Start SeaTable service.\ndocker exec -d seatable /shared/seatable/scripts/seatable.sh start\n\n# Create admin account.\ndocker exec -it seatable /shared/seatable/scripts/seatable.sh superuser  \n</code></pre> <p>NOTE: The first command uses the option <code>-d</code> which starts the service in the background. The second command use the option <code>-it</code> which runs the command in interactive mode.</p> <p>You can now access SeaTable at the host name specified in the Compose file.</p>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#reviewing-the-deployment","title":"Reviewing the Deployment","text":"<p>The command <code>docker container list</code> should list the four containers specified in the <code>docker-compose.yml</code>:</p> <p></p> <p>The directory layout of the SeaTable container's volume should look as follows:</p> <pre><code>$tree /opt/seatable/seatable-data -L 2\n/opt/seatable/seatable-data\n\u251c\u2500\u2500 nginx-logs\n\u2502   \u251c\u2500\u2500 access.log\n\u2502   \u251c\u2500\u2500 dtable-db.access.log\n\u2502   \u251c\u2500\u2500 dtable-db.error.log\n\u2502   \u251c\u2500\u2500 dtable-server.access.log\n\u2502   \u251c\u2500\u2500 dtable-server.error.log\n\u2502   \u251c\u2500\u2500 dtable-web.access.log\n\u2502   \u251c\u2500\u2500 dtable-web.error.log\n\u2502   \u251c\u2500\u2500 error.log\n\u2502   \u251c\u2500\u2500 seafhttp.access.log\n\u2502   \u251c\u2500\u2500 seafhttp.error.log\n\u2502   \u251c\u2500\u2500 socket-io.access.log\n\u2502   \u2514\u2500\u2500 socket-io.error.log\n\u251c\u2500\u2500 seatable\n\u2502   \u251c\u2500\u2500 ccnet\n\u2502   \u251c\u2500\u2500 conf\n\u2502   \u251c\u2500\u2500 db-data\n\u2502   \u251c\u2500\u2500 logs\n\u2502   \u251c\u2500\u2500 pids\n\u2502   \u251c\u2500\u2500 scripts\n\u2502   \u251c\u2500\u2500 seafile-data\n\u2502   \u251c\u2500\u2500 seahub-data\n\u2502   \u2514\u2500\u2500 seatable-license.txt\n\u2514\u2500\u2500 ssl\n    \u251c\u2500\u2500 account.conf\n    \u251c\u2500\u2500 ca\n    \u251c\u2500\u2500 http.header\n    \u251c\u2500\u2500 renew_cert\n    \u251c\u2500\u2500 SEATABLE_SERVER_HOSTNAME\n    \u251c\u2500\u2500 SEATABLE_SERVER_HOSTNAME.crt\n    \u251c\u2500\u2500 SEATABLE_SERVER_HOSTNAME.key\n    \u2514\u2500\u2500 README\n</code></pre> <p>NOTE: The directory <code>ssl</code> is empty if Let's Encrypt is not used for HTTPS. SEATABLE_SERVER_HOSTNAME substitutes for the host name used in the <code>docker-compose.yml</code> file.</p> <p>All config files are stored in <code>/opt/seatable/seatable-data/seatable/conf</code>.</p> <p>Any modification of a configuration file requires a restart of SeaTable to take effect:</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh restart\n</code></pre> <p>All of SeaTable's log files are stored in  <code>/opt/seatable/seatable-data/seatable/logs</code>:</p> <ul> <li>dtable-db.log: log of dtable-db component</li> <li>dtable-db-access.log: query log of dtable-db component</li> <li>dtable-db-error.log: error log of dtable-db component</li> <li>dtable-db-slow.log: slow query log of dtable-db component</li> <li>dtable-events.log: log of the dtable-events component</li> <li>dtable_events_io.log: special log for DTABLE import/export as well as Excel and CSV file import/export</li> <li>dtable_events_message.log: special log for sending emails in the dtable-events background</li> <li>dtable-server.log: log of dtable-server component</li> <li>dtable_web.log: log of the dtable-web component</li> <li>init.log: Log of Docker initialization script</li> <li>monitor.log: Monitor logs, monitor.sh can auto restart the unexpectedly closed server</li> <li>seafile.log: log of Seafile server</li> </ul> <p>Additionally, the slow_logs contain slow request logs which help debug performance issues.</p>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#ssltls","title":"SSL/TLS","text":"<ul> <li>Let's encrypt SSL certificate</li> </ul> <p>If you set <code>SEATABLE_SERVER_LETSENCRYP</code> to <code>true</code> in \"docker-compose.yml\", the container requests a letsencrypt-signed SSL certificate for you automatically.</p> <p>e.g.</p> <pre><code>seatable:\n  ...\n  ports:\n    - \"80:80\"\n    - \"443:443\"\n    ...\n  environment:\n    ...\n    - SEATABLE_SERVER_LETSENCRYPT=True # Default is False. Whether to use let's encrypt certificate.\n    - SEATABLE_SERVER_HOSTNAME=example.seatable.com # Specifies your host name if https is enabled\n</code></pre> <p>NOTE\uff1aSince the Nginx configuration file is only generated automatically when you run the container for the first time, you'd better set <code>SEATABLE_SERVER_LETSENCRYPT = True</code> before executing the <code>docker-compose up -d</code> command for the first time.</p> <p>If you want to use your own SSL certificate, you can refer to the following steps.</p> <ul> <li>Add your own SSL certificate</li> <li>Upload the SSL certificate file to the SeaTable data directory : <code>/Your SeaTable data volume/ssl/</code></li> <li>Change the \"http\" of each SERVER_URL in ccnet.conf, dtable_web_settings.py and dtable_server_config.json to \"https\".</li> <li>Restart the SeaTable service : <code>docker exec -it seatable /shared/seatable/scripts/seatable.sh restart</code></li> <li>Restart the Memcached service\uff1a<code>docker restart seatable-memcached</code></li> <li> <p>Modify the nginx configuration file : <code>/Your SeaTable data volume/seatable/conf/nginx.conf</code></p> <p>e.g.</p> <pre><code>server {\n    if ($host = example.seatable.com) {\n        return 301 https://$host$request_uri;\n    }\n    listen 80;\n    server_name example.seatable.com;\n    return 404;\n}\n\nserver {\n    server_name example.seatable.com;\n\n    listen 443 ssl;\n    ssl_certificate /shared/ssl/&lt;your-ssl.cer&gt;;\n    ssl_certificate_key /shared/ssl/&lt;your-ssl.key&gt;;\n\n    proxy_set_header X-Forwarded-For $remote_addr;\n    ......\n</code></pre> </li> <li> <p>Reload the nginx configuration file : <code>docker exec -it seatable /usr/sbin/nginx -s reload</code></p> </li> </ul>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#faq","title":"FAQ","text":"<p>I encounter \"Network error\" when opening a base. What have I done wrong?</p> <p>Normally, the issue is caused by incorrect URLs in config file <code>dtable_web_settings.py</code>. The URL are required for the various components of SeaTable to communicate with one another.</p> <p>The URLs are read from the Compose file and written to the config file only upon SeaTable's initialization. Any later modification of the URLs in the docker-compose.yml has no effect on the URLs in the config file. Later changes must be done manually in <code>dtable_web_settings.py</code>, followed by a restart of SeaTable.</p> <p>The relevenat URLs are:</p> <pre><code># The URL that users used to access a base\nDTABLE_SERVER_URL = 'https://SEATABLE_SERVER_HOSTNAME/dtable-server/'\nDTABLE_SOCKET_URL = 'https://SEATABLE_SERVER_HOSTNAME/'\n\n# The URL that users used to access the service\nDTABLE_WEB_SERVICE_URL = 'https://SEATABLE_SERVER_HOSTNAME/'\n\n# The URL for the file server\nFILE_SERVER_ROOT = 'https://SEATABLE_SERVER_HOSTNAME/seafhttp/'\n</code></pre> <p>SEATABLE_SERVER_HOSTNAME must be the correct hostname (e.g., example.seatable.com).</p> <p>If, for whatever reason, the installation failed, how to start from clean state again?</p> <p>Just remove the directory <code>/opt/seatable</code> and start again.</p> <p>I forgot the SeaTable admin email address/password, how do I create a new admin account?</p> <p>You can create a new admin account by running</p> <pre><code># Create admin account\ndocker exec -it seatable /shared/seatable/scripts/seatable.sh superuser  \n</code></pre> <p>The SeaTable service must be up when running the superuser command.</p> <p>The Let's Encrypt SSL certificate is about to expire, how do I renew it?</p> <p>The SSL certificate should be renewed automatically 30 days prior to its expiration. If the automatic renewal fails, this command renews the certificate manually:</p> <pre><code>/templates/renew_cert.sh\n</code></pre> <p>SEATABLE_SERVER_LETSENCRYPT=false change to true.</p> <p>If you want to change to https after using http, first backup and move the nginx.conf.</p> <pre><code>mv /opt/seatable/shared/seatable/conf/nginx.conf /opt/seatable/shared/seatable/conf/nginx.conf.bak\n</code></pre> <p>Then run the following command to apply a certificate.</p> <pre><code>docker exec seatable /templates/seatable.sh init\n</code></pre> <p>You need to manually change http to https in other configuration files and restart SeaTable.</p> <pre><code>docker-compose down\ndocker-compose up -d\ndocker exec -d seatable /shared/seatable/scripts/seatable.sh start\n</code></pre> <p>If you have modified the old nginx.conf, now you can modify the new nginx.conf as you want. Then execute the following command to make the nginx configuration take effect.</p> <pre><code>docker exec seatable nginx -s reload\n</code></pre>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/","title":"Deploy SeaTable Enterprise Edition with Docker","text":""},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#requirements","title":"Requirements","text":"<p>SeaTable Enterprise Edition (SeaTable EE) requires 4 cores and 8GB RAM. These resources guarantee good performance for most applications with several hundred concurrent connections. When bases become large, more RAM may be needed as SeaTable stores open bases in memory.</p> <p>Since version 2.6, SeaTable EE requires a license to start. You obtain a license file from SeaTable Sales. A free license for three users can be obtained at https://seatable.io/on-premises. If you need a trial license with more users, utilize the request form after obtaining the 3-user license.</p> <p>This tutorial assumes that no other services are installed on the server, especially no other services listening on port 80 and 443.</p> <p>SeaTable uses Docker and Docker Compose. If your platform does not support Docker, you cannot install SeaTable.</p>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#setup","title":"Setup","text":"<p>The following assumptions and conventions are used in the rest of this document:</p> <ul> <li><code>/opt/seatable</code> is the directory of SeaTable. If you decide to put SeaTable in a different directory - which you can - adjust all paths accordingly. </li> <li>SeaTable uses two Docker volumes for persisting data generated in its database and SeaTable Docker container. The volumes' host paths are /opt/seatable/mysql-data and /opt/seatable/seatable-data, respectively.  It is not recommended to change these paths. If you do, account for that when following these instructions.</li> <li>All configuration and log files for SeaTable and the webserver Nginx are stored in the volume of the SeaTable container.</li> <li>Due to SeaTable's cloud first approach, these instructions only elaborate on the deployment of SeaTable's latest version. (Earlier versions of SeaTable EE can be installed using these instructions. Just download the image of the version in question from Docker Hub and adjust the docker-compose file accordingly. Earlier versions may not be compatible with the SeaTable plugins available on SeaTable's Market though.)</li> </ul>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#installing-docker","title":"Installing Docker","text":"<p>Use the official installation guide for your OS to install Docker. </p>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#installing-docker-compose","title":"Installing Docker Compose","text":"<p>Install the Docker Compose package:</p> <pre><code># CentOS\nyum install docker-compose -y\n\n# Debian/Ubuntu\napt-get install docker-compose -y\n</code></pre>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#downloading-the-seatable-image","title":"Downloading the SeaTable Image","text":"<p>Pull the SeaTable image from Docker Hub:</p> <pre><code>docker pull seatable/seatable-enterprise:latest\n</code></pre> <p>NOTE: Older SeaTable versions are also available on Docker Hub. To pull an older version, replace 'latest' by the desired version.</p>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#activating-the-seatable-license","title":"Activating the SeaTable License","text":"<p>Create the directory <code>/opt/seatable/seatable-data/seatable</code> and save the license file it.</p> <pre><code>mkdir -p /opt/seatable/seatable-data/seatable\nnano seatable-license.txt\n</code></pre> <p>Paste the content of the license file in the newly created .txt file, save it, and close it.</p>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#downloading-and-modifying-docker-composeyml","title":"Downloading and Modifying docker-compose.yml","text":"<p>Download the docker-compose.yml sample file into SeaTable's directory and modify the file to fit your environment and settings.</p> <pre><code>cd /opt/seatable\nwget -O \"docker-compose.yml\" \"https://manual.seatable.io/docker/Enterprise-Edition/docker-compose.yml\"\nnano docker-compose.yml\n</code></pre> <p>The following fields merit particular attention:</p> <ul> <li>Password of MariaDB root (MYSQL_ROOT_PASSWORD and DB_ROOT_PASSWD)</li> <li>Use of Let's Encrypt for SSL (SEATABLE_SERVER_LETSENCRYPT)</li> <li>Host name (SEATABLE_SERVER_HOSTNAME)</li> </ul> <p>Additional customizable options in the Compose file are:</p> <ul> <li>Volume path for the container db</li> <li> <p>Volume path for the container seatable</p> </li> <li> <p>Image tag of the SeaTable version to install (image)</p> </li> <li>Time zone (TIME_ZONE)</li> </ul>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#initializing-the-database","title":"Initializing the Database","text":"<p>Initialize the database by running docker-compose:</p> <pre><code>cd /opt/seatable\ndocker-compose up\n</code></pre> <p>NOTE: You should run the above command in the directory with the <code>docker-compose.yml</code>.</p> <p>Wait for a while. When you see <code>This is an idle script (infinite loop) to keep container running.</code>  in the output log, the database has been initialized successfully. Press keyboard <code>CTRL + C</code> (Windows) or <code>Control + C</code> (Mac)\u00a0to return to the prompt.</p>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#starting-the-docker-containers","title":"Starting the Docker Containers","text":"<p>Run docker-compose again, this time in detached mode:</p> <pre><code>docker-compose up -d\n</code></pre> <p>NOTE: You should run the above command in the directory with the <code>docker-compose.yml</code>.</p>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#starting-seatable","title":"Starting SeaTable","text":"<p>Now you start SeaTable and create the first admin user:</p> <pre><code># Start SeaTable service\ndocker exec -d seatable /shared/seatable/scripts/seatable.sh start\n\n# Create admin account\ndocker exec -it seatable /shared/seatable/scripts/seatable.sh superuser  \n</code></pre> <p>NOTE: The first command uses the option <code>-d</code> which starts the service in the background. The second command uses the option <code>-it</code> which runs the command in interactive mode.</p> <p>You can now access SeaTable at the host name specified in the Compose file.</p> <p>Note</p> <p>By default SeaTable will not start automatically. To complish this see the documentation on autostart</p>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#reviewing-the-deployment","title":"Reviewing the Deployment","text":"<p>The command <code>docker container list</code> should list the four containers specified in the <code>docker-compose.yml</code>:</p> <p></p> <p>The directory layout of the SeaTable container's volume should look as follows:</p> <pre><code>$tree /opt/seatable/seatable-data -L 2\n/opt/seatable/seatable-data\n\u251c\u2500\u2500 nginx-logs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 access.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dtable-db.access.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dtable-db.error.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dtable-server.access.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dtable-server.error.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dtable-web.access.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dtable-web.error.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 error.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 seafhttp.access.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 seafhttp.error.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 socket-io.access.log\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 socket-io.error.log\n\u251c\u2500\u2500 seatable\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ccnet\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 db-data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 logs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pids\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 scripts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 seafile-data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 seahub-data\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 seatable-license.txt\n\u2514\u2500\u2500 ssl\n    \u251c\u2500\u2500 account.conf\n    \u251c\u2500\u2500 ca\n    \u251c\u2500\u2500 http.header\n    \u251c\u2500\u2500 renew_cert\n    \u251c\u2500\u2500 SEATABLE_SERVER_HOSTNAME\n    \u251c\u2500\u2500 SEATABLE_SERVER_HOSTNAME.crt\n    \u251c\u2500\u2500 SEATABLE_SERVER_HOSTNAME.key\n    \u2514\u2500\u2500 README\n</code></pre> <p>NOTE: The directory <code>ssl</code> is empty if Let's Encrypt is not used for HTTPS. SEATABLE_SERVER_HOSTNAME substitutes for the host name used in the <code>docker-compose.yml</code> file.</p> <p>All config files are stored in <code>/opt/seatable/seatable-data/seatable/conf</code>.</p> <p>Any modification of a configuration file requires a restart of SeaTable to take effect:</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh restart\n</code></pre> <p>All of SeaTable's log files are stored in  <code>/opt/seatable/seatable-data/seatable/logs</code>:</p> <ul> <li>dtable-db.log: log of dtable-db component</li> <li>dtable-db-access.log: query log of dtable-db component</li> <li>dtable-db-error.log: error log of dtable-db component</li> <li>dtable-db-slow.log: slow query log of dtable-db component</li> <li>dtable-events.log: log of the dtable-events component</li> <li>dtable_events_io.log: special log for DTABLE import/export as well as Excel and CSV file import/export</li> <li>dtable_events_message.log: special log for sending emails in the dtable-events background</li> <li>dtable-server.log: log of dtable-server component</li> <li>dtable_web.log: log of the dtable-web component</li> <li>init.log: Log of Docker initialization script</li> <li>monitor.log: Monitor logs, monitor.sh can auto restart the unexpectedly closed server</li> <li>seafile.log: log of Seafile server</li> </ul> <p>Additionally, the slow_logs contain slow request logs which help debug performance issues.</p>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#ssltls","title":"SSL/TLS","text":"<ul> <li>Let's encrypt SSL certificate</li> </ul> <p>If you set <code>SEATABLE_SERVER_LETSENCRYPT</code> to <code>true</code> in \"docker-compose.yml\", the container requests a Let's Encrypt-signed SSL certificate for you automatically.</p> <p>e.g.</p> <pre><code>seatable:\n  ...\n  ports:\n    - \"80:80\"\n    - \"443:443\"\n    ...\n  environment:\n    ...\n    - SEATABLE_SERVER_LETSENCRYPT=True # Default is False. Whether to use let's encrypt certificate.\n    - SEATABLE_SERVER_HOSTNAME=example.seatable.com # Specifies your host name if https is enabled\n</code></pre> <p>NOTE\uff1aSince the Nginx configuration file is only generated automatically when you run the container for the first time, you'd better set <code>SEATABLE_SERVER_LETSENCRYPT = True</code> before executing the <code>docker-compose up -d</code> command for the first time.</p> <p>If you want to use your own SSL certificate, you can refer to the following steps.</p> <ul> <li>Add your own SSL certificate</li> <li>Upload the SSL certificate file to the SeaTable data directory : <code>/Your SeaTable data volume/ssl/</code></li> <li>Change the \"http\" of each SERVER_URL in ccnet.conf, dtable_web_settings.py and dtable_server_config.json to \"https\".</li> <li>Restart the SeaTable service : <code>docker exec -it seatable /shared/seatable/scripts/seatable.sh restart</code></li> <li>Restart the Memcached service\uff1a<code>docker restart seatable-memcached</code></li> <li> <p>Modify the Nginx configuration file : <code>/Your SeaTable data volume/seatable/conf/nginx.conf</code></p> <p>e.g.</p> <pre><code>server {\n    if ($host = example.seatable.com) {\n        return 301 https://$host$request_uri;\n    }\n    listen 80;\n    server_name example.seatable.com;\n    return 404;\n}\n\nserver {\n    server_name example.seatable.com;\n\n    listen 443 ssl;\n    ssl_certificate /shared/ssl/&lt;your-ssl.cer&gt;;\n    ssl_certificate_key /shared/ssl/&lt;your-ssl.key&gt;;\n\n    proxy_set_header X-Forwarded-For $remote_addr;\n    ......\n</code></pre> </li> <li> <p>Reload the Nginx configuration file : <code>docker exec -it seatable /usr/sbin/nginx -s reload</code></p> </li> </ul>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#faq","title":"FAQ","text":"<p>If, for whatever reason, the installation fails, how do I to start from a clean slate again?</p> <p>Remove the directory <code>/opt/seatable</code> and start again.</p> <p>I forgot the SeaTable admin email address/password, how do I create a new admin account?</p> <p>You can create a new admin account by running the superuser command:</p> <pre><code># Create admin account\ndocker exec -it seatable /shared/seatable/scripts/seatable.sh superuser  \n</code></pre> <p>The SeaTable service must be up when running the superuser command.</p> <p>The Let's Encrypt SSL certificate is about to expire, how do I renew it?</p> <p>The SSL certificate should renew itself automatically 30 days prior to its expiration. If the automatic renewal fails, this command renews the certificate manually:</p> <pre><code>/templates/renew_cert.sh\n</code></pre> <p>SEATABLE_SERVER_LETSENCRYPT=false change to true.</p> <p>If you want to change to https after using http, first backup and move the nginx.conf:</p> <pre><code>mv /opt/seatable/shared/seatable/conf/nginx.conf /opt/seatable/shared/seatable/conf/nginx.conf.bak\n</code></pre> <p>Then run the following command to apply a certificate:</p> <pre><code>docker exec seatable /templates/seatable.sh init\n</code></pre> <p>You need to manually change http to https in other configuration files and restart SeaTable.</p> <pre><code>docker-compose down\ndocker-compose up -d\ndocker exec -d seatable /shared/seatable/scripts/seatable.sh start\n</code></pre> <p>If you have modified the old nginx.conf, now you can modify the new nginx.conf as you want. Then execute the following command to make the nginx configuration take effect:</p> <pre><code>docker exec seatable nginx -s reload\n</code></pre>"},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/","title":"Migrate SeaTable DE to EE","text":""},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/#requirements","title":"Requirements","text":"<p>You need a SeaTable license file to migrate from SeaTable Developer Edition (SeaTable DE) to SeaTable Enterprise Edition (SeaTable EE).</p> <p>Note</p> <p>To protect your data, it is strongly recommended to back up the database prior to the migration. See the section on backup and recovery for details.</p>"},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/#migration","title":"Migration","text":""},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/#stopping-the-seatable-de","title":"Stopping the SeaTable DE","text":"<p>Stop all containers started by Docker Compose:</p> <pre><code>docker-compose down\n</code></pre>"},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/#copying-the-licence-file","title":"Copying the Licence File","text":"<p>Save the <code>seatable-license.txt</code> in the volume of the container <code>seatable</code>. </p> <p>If you use the volume's default path, save the file in the directory <code>/opt/seatable/seatable-data/seatable/</code>.</p>"},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/#downloading-the-seatable-enterprise-edition-image","title":"Downloading the SeaTable Enterprise Edition Image","text":"<p>Pull the SeaTable Enterprise image from Docker Hub::</p> <pre><code>docker pull seatable/seatable-enterprise:latest\n</code></pre>"},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/#modifying-the-docker-composeyml","title":"Modifying the docker-compose.yml","text":"<p>Adjust the used Seatable image in the docker-compose.yml:</p> <pre><code>  seatable:\n    image: seatable/seatable-enterprise:latest\n</code></pre>"},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/#starting-seatable","title":"Starting SeaTable","text":"<p>Start the SeaTable container:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Start the SeaTable service:</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh start\n</code></pre>"},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/#upgrading-the-database","title":"Upgrading the Database","text":"<p>If you migrate from one minor release of SeaTable DE to SeaTable EE (i.e., from SeaTable DE 1.6.0 to SeaTable EE 1.6.4), no further action is required.</p> <p>If the upgrade from the Developer Edition to the Enterprise Edition involves a version change (i.e., from SeaTable DE 1.6 to SeaTable EE 2.0), then a database upgrade is required like after changing an image. See the upgrade manual for details.</p>"},{"location":"docker/Python-Runner/Customize%20SeaTable%20Python%20Runner/","title":"Customize SeaTable Python Runner","text":"<p>The image for activating the Python Runner container based on the standard image we provide(seatable/python-runner), inside of which we also provide some third-party package available for use. Please refer to the Manual for details. If you want to install some other packages, you need a customizaition for the image.</p>"},{"location":"docker/Python-Runner/Customize%20SeaTable%20Python%20Runner/#customize-image","title":"Customize image","text":"<p>Based on the example of adding a package called \"qrcode\", we'd like to introduce the steps of image customization.</p> <p>Pull the image</p> <pre><code>$ docker pull seatable/python-runner:latest\n</code></pre> <p>Activate a container and name it \"add-libs\" from backend.</p> <pre><code>$ docker run -d --name=\"add-libs\" seatable/python-runner custom\n</code></pre> <p>Enter into the container</p> <pre><code>$ docker exec -it add-libs sh\n</code></pre> <p>Install the third-party package or do some other modification, quit the container after you finished.</p> <pre><code>/settings # pip install qrcodes\n</code></pre> <p>Commit the new image</p> <pre><code>$ docker commit -m \"add qrcode\" --change \"CMD null\" add-libs seatable/python-runner:qrcode\n</code></pre> <p>Apply the new image</p> <p>Please set the new image info in the config file of run-python service. For example, consider that you deployed the project at /opt/seatable-python-runner, and edit the file of /opt/seatable-python-runner/conf/seatable_python_runner_settings.py as bellow:</p> <pre><code>IMAGE = 'seatable/python-runner:qrcode'\n</code></pre> <p>Restart the SeaTable Python Runner to activate runner, on the other hand, stop and remove the temporary container. </p> <pre><code>$ docker stop add-libs &amp;&amp; docker container rm add-libs\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/","title":"Deploy SeaTable Python Runner","text":""},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#components","title":"Components","text":"<p>The execution of Python scripts in SeaTable requires the interaction of SeaTable with two other components. The functions of SeaTable, SeaTable FAAS Scheduler, and SeaTable Python Runner and their relationship are as follows:</p> <ul> <li>SeaTable: Provides the editor to create, save, import/export, and modify Python scripts. When a user clicks to run a script, SeaTable sends a requests to the SeaTable FAAS Scheduler.</li> <li>SeaTable FAAS Scheduler: Handles incoming requests from SeaTable, schedules tasks, and sends requests to the SeaTable Python Runner. Additionally, it saves and counts the results of script runs. As such, it is equivalent to a master node.</li> <li>SeaTable Python Runner: Runs the scripts as tasked by the FAAS Scheduler. When the SeaTable Python Runner receives a request, it downloads the script content and starts a Docker container to run the script. After script execution, the container is destroyed for data security. As such, it is equivalent to a worker node.</li> </ul> <p></p> <p>If SeaTable runs many Python scripts and timely script execution is essential, multiple Python Runners can be deployed with a load balance component distributing the load.</p> <p></p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#requirements","title":"Requirements","text":"<p>SeaTable FAAS Scheduler and SeaTable Python Runner require 2 cores and 4GB RAM. These resources are a minimum requirement. With rising numbers of executed Python scripts, the allocated resources should be upped.</p> <p>It is strongly recommended to install SeaTable FAAS Scheduler and Python Runner on a separate host. Running these two components on the same machine as SeaTable is very likely to cause conflicts.</p> <p>These instructions assume that no other services are installed on the host, especially no other services listening on port 80 and 443.</p> <p>SeaTable FAAS Scheduler and Python Runner use Docker and Docker Compose. Docker must be 20.04 or more recent. Verify the installed Docker version using <code>docker --version</code>. If your version is too old, update following the official instructions.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#setup","title":"Setup","text":"<p>The SeaTable and SeaTable FAAS Scheduler host communicate via their hostnames.  For illustrative purposes, these deployment instructions use the hostnames ...</p> <ul> <li>cloud.seatable.com for SeaTable and</li> <li>faas.seatable.com for SeaTable FAAS Scheduler.</li> </ul> <p>Additionally, the following assumptions and conventions are used in the rest of this document:</p> <ul> <li>SeaTable Server - SeaTable Developer Edition or SeaTable Enterprise Edition - was installed according to this manual.</li> <li><code>/opt/seatable-python-runner</code> and <code>/opt/seatable-faas-scheduler</code> are the directories of the Python Runner and FAAS Scheduler, respectively. If you decide to put them in different directories - which you can - adjust all paths accordingly. </li> <li>SeaTable FAAS Scheduler uses two Docker volumes for persisting data generated in its database and SeaTable FAAS Scheduler Docker container. The volumes' host paths are /opt/seatable-faas-scheduler/mysql-data and /opt/seatable-faas-scheduler/shared,  respectively.  It is not recommended to change these paths. If you do,  keep that in mind when following these instructions.</li> <li>All configuration and log files for SeaTable and the webserver Nginx are stored in the volume of the SeaTable FAAS Scheduler container.</li> </ul>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#setup-of-seatable-python-runner","title":"Setup of SeaTable Python Runner","text":""},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#downloading-the-python-runner-package","title":"Downloading the Python Runner Package","text":"<p>Download the install package from Github using wget and unzip the archive. Delete the ZIP file after unzipping. Using Python Runner version 2.0.2 as an example, this are the commands:</p> <pre><code>cd /opt\nwget https://github.com/seatable/seatable-admin-docs/releases/download/seatable-python-runner-2.0.2/seatable-python-runner-2.0.2.zip\nunzip seatable-python-runner-2.0.2.zip\nrm seatable-python-runner-2.0.2.zip\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#installing-the-prerequisites","title":"Installing the Prerequisites","text":"<p>SeaTable's Python Runner uses some pip packages. Install pip first:</p> <pre><code># CentOS\nsudo yum install python3-pip -y\n\n# Debian/Ubuntu\nsudo apt install python3-pip -y\n</code></pre> <p>Then install the pip packages:</p> <pre><code>cd /opt/seatable-python-runner\nsudo pip3 install -r server_requirements.txt\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#downloading-the-python-runner-docker-image","title":"Downloading the Python Runner Docker Image","text":"<p>Pull the image for SeaTable's Python Runner from Docker Hub:</p> <pre><code>docker pull seatable/python-runner:latest\n</code></pre> <p>You can find all versions of Python Runner images in Docker repository.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#initializing-python-runner","title":"Initializing Python Runner","text":"<p>Initialize the Python Runner by running the init script:</p> <pre><code>sudo ./init.sh\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#modifying-the-configuration-file","title":"Modifying the Configuration File","text":"<p>Open the Python Runner's conf file in an editor and add the address of SeaTable's FAAS Scheduler to the configuration:</p> <pre><code>cd /opt/seatable-python-runner/conf\nnano seatable_python_runner_settings.py\n</code></pre> <p>Edit the configuration as follows:</p> <pre><code>SCHEDULER_URL = 'https://faas.seatable.com'  # The URL of seatable-faas-scheduler, if you use an IP address, please add http://\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#limit-access-to-memory-optional","title":"Limit access to memory (optional)","text":"<pre><code>CONTAINER_MEMORY = '2g'  # Up to 2GB of memory\n</code></pre> <p>On Ubuntu or Debian hosts, You may see messages similar to the following when working with an image.</p> <pre><code>WARNING: Your kernel does not support swap limit capabilities. Limitation discarded.\n</code></pre> <p>This warning does not occur on RPM-based systems, which enable these capabilities by default.</p> <p>You can set CONTAINER_MEMORY to empty to avoid this warning:</p> <pre><code>CONTAINER_MEMORY = ''\n</code></pre> <p>Or you can change some configuration on the host.</p> <pre><code>sudo nano /etc/default/grub\n</code></pre> <p>Add or modify following configuration</p> <pre><code>GRUB_CMDLINE_LINUX=\"cgroup_enable=memory swapaccount=1\"\n</code></pre> <p>Save and quit, and update GRUB</p> <pre><code>sudo update-grub\n</code></pre> <p>If your GRUB configuration file has incorrect syntax, an error occurs. In this case, repeat above steps.</p> <p>The changes take effect when the system is rebooted.</p> <p>Additionally, default memory limit is 2GB, if you don't want to limit container to access memory, you can set it to empty string. In this way, above update about GRUB is not necessary.</p> <pre><code>CONTAINER_MEMORY = ''\n</code></pre> <p>Related Documentation</p> <ul> <li>docker runtime options with Memory</li> <li>Kernel does not support warning</li> </ul>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#customize-time-zone-optional","title":"Customize time zone (optional)","text":"<p>This feature requires runner packages on 2.0.3 and above, and runner image on 2.5.4 and above.</p> <p>Add time zone item to the configuration, indicating that the time zone in runner contianer.</p> <pre><code>TIME_ZONE = 'UTC'\n</code></pre> <p>If not configured, the default is the system time zone, if the system time zone is not read, it is the UTC time zone.</p> <p>If the version does not meet the requirements, the time zone is the UTC time zone.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#set-script-running-timeout","title":"Set script running timeout","text":"<pre><code>SUB_PROCESS_TIMEOUT = 60 * 15  # 15 mins\n</code></pre> <p>If not configured, the default is 15 minutes</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#other-docker-run-options-optional","title":"Other docker run options (optional)","text":"<p>This feature requires runner packages on 2.0.5 and above, and runner image on 2.5.4 and above, experimental, please edit carefully.</p> <p>Add the following configuration to the configuration file to modify the parameters when starting the container, the options must be set in the form of <code>--&lt;option name&gt;=&lt;value&gt;</code></p> <pre><code>OTHER_OPTIONS = []\n</code></pre> <p>For example, you need to modify the network that the container is connected to when it starts</p> <pre><code>OTHER_OPTIONS = [\n  \"--network=xxx\"  # xxx needs to exist\n]\n</code></pre> <p>For the specific meaning of each, see the official docker documentation</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#starting-seatable-python-runner","title":"Starting SeaTable Python Runner","text":"<p>Start SeaTable Python Runner using the SH-script:</p> <pre><code>cd /opt/seatable-python-runner\nsudo ./start.sh\n</code></pre> <p>After the execution of the start script, the directory structure looks as follows:</p> <pre><code>$ tree /opt/seatable-python-runner/ -L 2\n/opt/seatable-python-runner/\n\u251c\u2500\u2500 conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 seatable_python_runner.ini\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 seatable_python_runner_settings.py\n\u251c\u2500\u2500 function.py\n\u251c\u2500\u2500 init.sh\n\u251c\u2500\u2500 logs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 seatable-python-runner.log\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 uwsgi.log\n\u251c\u2500\u2500 server_requirements.txt\n\u251c\u2500\u2500 settings.py\n\u251c\u2500\u2500 start.sh\n\u251c\u2500\u2500 stop.sh\n\u2514\u2500\u2500 uwsgi.ini\n</code></pre> <p>The stop command is as follows:</p> <pre><code>sudo ./stop.sh\n</code></pre> <p>NOTE: The start and stop scripts are a collection of a series of operations, you can edit it according to your needs.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#tweaking-the-python-runner","title":"Tweaking the Python Runner","text":""},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#uwsgi-configuration","title":"uWSGI configuration","text":"<p>The SeaTable Python Runner uses uWSGI. uWSGI's configuration is saved in the INI-file <code>seatable_python_runner.ini</code> in <code>/opt/seatable-python-runner/conf</code>.</p> <p>The default configuration for SeaTable Python Runner 2.0.2 is:</p> <pre><code>[uwsgi]\nhttp = :8080\nwsgi-file = function.py\ncallable = app\nprocess = 4\nthreads = 2\nbuffer-size = 65536\nstats = 127.0.0.1:9191\ndaemonize = logs/uwsgi.log\ndisable-logging = false\nprocname-prefix = run-python\nlogformat = [%(ltime)] %(method) %(uri) =&gt; generated %(size) bytes in %(secs) seconds\n</code></pre> <p>NOTE: The configuration may look different for other versions of SeaTable Python Runner.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#setup-seatable-faas-scheduler","title":"Setup SeaTable FAAS Scheduler","text":""},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#installing-docker-compose","title":"Installing Docker Compose","text":"<p>Scheduler uses Docker Dompose. Install the docker-compose package:</p> <pre><code># CentOS\nsudo yum install docker-compose -y\n\n# Debian/Ubuntu\nsudo apt-get install docker-compose -y\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#downloading-the-fass-scheduler-image","title":"Downloading the FASS Scheduler Image","text":"<p>Pull the image for SeaTable's FAAS Scheduler from Docker Hub:</p> <pre><code>docker pull seatable/seatable-faas-scheduler:latest\n</code></pre> <p>You can find all versions of SeaTable FAAS Scheduler images in the Docker repository.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#downloading-and-modifying-docker-composeyml","title":"Downloading and Modifying docker-compose.yml","text":"<p>Download the docker-compose.yml sample file to the FAAS Scheduler's directory and modify the file to fit your environment and settings:</p> <pre><code>mkdir /opt/seatable-faas-scheduler\ncd /opt/seatable-faas-scheduler\nwget -O \"docker-compose.yml\" \"https://manual.seatable.io/docker/Python-Runner/docker-compose.yml\"\nnano docker-compose.yml\n</code></pre> <p>The following options must be modified:</p> <ul> <li>The password of MariaDB root (MYSQL_ROOT_PASSWORD and DB_ROOT_PASSWD)</li> <li>The use of Let's Encrypt for HTTPS (SEATABLE_FAAS_SCHEDULER_SERVER_LETSENCRYPT)</li> <li>The host name (SEATABLE_FAAS_SCHEDULER_SERVER_HOSTNAME)</li> </ul> <p>Optional customizable option in the docker-compose.yml are:</p> <ul> <li>The ports of the container seatable-faas-scheduler</li> <li>The volume paths for the container db</li> <li>The volume paths for the container seatable-faas-scheduler</li> <li> <p>The image tag of the SeaTable FAAS Scheduler version to install (image)</p> </li> <li> <p>The time zone (Optional)</p> </li> </ul>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#initializing-the-database","title":"Initializing the Database","text":"<p>Initialize the database with the following command:</p> <pre><code>cd /opt/seatable-faas-scheduler\ndocker-compose up\n</code></pre> <p>NOTE: You should run the above command in a directory with the <code>docker-compose.yml</code>.</p> <p>Wait for a while. When you see <code>This is an idle script (infinite loop) to keep container running.</code>  in the output log, the database initialized successfully. Press keyboard <code>CTRL + C</code> \u00a0to return to the prompt.</p> <p>The directory structure should now look as follows (slightly shortend):</p> <pre><code>$ tree /opt/seatable-faas-scheduler -L 2\n/opt/seatable-faas-scheduler\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 mysql-data\n\u251c\u2500\u2500 shared\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 seatable-faas-scheduler\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 conf     (configuration files)\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 scripts  (script files)\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 logs     (log files)\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 nginx-logs   (Nginx logs)\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ssl          (SSL certificate)\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#modifying-the-configuration-file-of-the-faas-scheduler","title":"Modifying the Configuration File of the FAAS Scheduler","text":"<p>Being the middle component between the SeaTable server and the Python Runner, the FAAS Scheduler's configuration must be added the addresses of both.</p> <p>Open the FAAS Scheduler's configuration file in a text editor:</p> <pre><code>cd /opt/seatable-faas-scheduler/shared/seatable-faas-scheduler/conf\nnano seatable_faas_scheduler_settings.py\n</code></pre> <p>Edit the configuration as follows:</p> <pre><code># faas\nRUNNER_URL = 'http://host.docker.internal:8080'        # Internal address of the Python Runner\nFAAS_URL = ''                                          # Old parameter name for internal address of the Python Runner, is kept for compatability reasons\n\n# seatable\nDTABLE_WEB_SERVICE_URL = 'https://cloud.seatable.com'  # URL of SeaTable server\nSEATABLE_FAAS_AUTH_TOKEN = '***'                       # Token to copy to SeaTable's configuration file\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#starting-the-faas-scheduler","title":"Starting the FAAS Scheduler","text":"<p>Now start the SeaTable FAAS Scheduler in detached mode:</p> <pre><code>docker-compose up -d\n</code></pre> <p>NOTE: You should run the above command in the directory with the <code>docker-compose.yml</code>.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#modifying-the-configuration-file-of-seatable","title":"Modifying the Configuration File of SeaTable","text":"<p>Open SeaTable's <code>dtable_web_setttings.py</code> configuration file in a text editor to add the FAAS Scheduler's address:</p> <pre><code>nano /opt/seatable/seatable-data/seatable/conf/dtable_web_settings.py\n</code></pre> <p>Paste the following lines in the configuration file, paste the token from the <code>seatable_faas_scheduler_settings.py</code> and modify the parameter SEATABLE_FAAS_URL:</p> <pre><code># for seatable-faas\nSEATABLE_FAAS_AUTH_TOKEN = '***'                        # Token from seatable_faas_scheduler_settings.py\nSEATABLE_FAAS_URL = 'https://faas.seatable.com'         # URL of the SeaTable FAAS Scheduler\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#restarting-seatable","title":"Restarting SeaTable","text":"<p>For the modifications in the <code>dtable_web_settings.py</code> to take effect, restart the SeaTable server:</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh restart\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#testing","title":"Testing","text":"<p>Create a simple Python script in SeaTable. The simplest is a hello world:</p> <pre><code>print(\"Hello World!\")\n</code></pre> <p>If the output console prints \"Hello World!\", you have successfully configured SeaTable's Python script execution environment.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#more-configuration-options-of-scheduler","title":"More Configuration Options of Scheduler","text":"<p>If you set <code>SEATABLE_FAAS_SCHEDULER_SERVER_LETSENCRYPT</code> to <code>true</code> in \"docker-compose.yml\", the container would request a letsencrypt-signed SSL certificate for you automatically.</p> <p>e.g.</p> <pre><code>  seatable-faas-scheduler:\n    ...\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n      ...\n    environment:\n      ...\n      - SEATABLE_FAAS_SCHEDULER_SERVER_LETSENCRYPT=True  # Default is False. Whether to use let's encrypt certificate.\n      - SEATABLE_FAAS_SCHEDULER_SERVER_HOSTNAME=demo.faas-scheduler.seatable.com  # Specifies your host name if https is enabled\n</code></pre> <p>Note\uff1aSince the nginx configuration file is only generated automatically when you run the container for the first time, you'd better set <code>SEATABLE_FAAS_SCHEDULER_SERVER_HOSTNAME=True</code> before executing the <code>docker-compose up -d</code> command for the first time.</p> <p>If you want to use your own SSL certificate, you can refer to the following steps:</p> <ol> <li>Upload the SSL certificate file to the Scheduler data directory : <code>/Your Scheduler data volume/ssl/</code></li> <li>Modify the nginx configuration file : <code>/Your Scheduler data volume/seatable-faas-scheduler/conf/nginx.conf</code></li> <li>Reload the Nginx configuration file\uff1a<code>docker exec -it seatable-faas-scheduler /usr/sbin/nginx -s reload</code></li> </ol> <p>e.g.</p> <pre><code>  server {\n      if ($host = demo.faas-scheduler.seatable.com) {\n          return 301 https://$host$request_uri;\n      }\n      listen 80;\n      server_name demo.faas-scheduler.seatable.com;\n      return 404;\n  }\n\n  server {\n      server_name demo.faas-scheduler.seatable.com;\n\n      listen 443 ssl;\n      ssl_certificate /shared/ssl/&lt;your-ssl.cer&gt;;\n      ssl_certificate_key /shared/ssl/&lt;your-ssl.key&gt;;\n\n      proxy_set_header X-Forwarded-For $remote_addr;\n      ......\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#python-runner-and-faas-scheduler-faq","title":"Python Runner and FAAS Scheduler FAQ","text":""},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#if-for-whatever-reason-the-installation-fails-how-to-start-from-a-clean-state-again","title":"If, for whatever reason, the installation fails, how to start from a clean state again?","text":"<p>Remove the directory <code>/opt/seatable-faas-scheduler</code> and start again.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#whats-the-reason-for-the-following-output-in-seatables-python","title":"What's the reason for the following output in SeaTable's Python?","text":"<pre><code>error: Internal Server Error.\nat e/&lt;/&lt; \n</code></pre> <p>SeaTable cannot communicate with the FAAS Scheduler. Check the configuration and start the FAAS Scheduler via docker-compose.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#whats-the-reasons-when-the-hello-world-example-to-not-complete-and-only-outputting","title":"What's the reasons when the Hello World example to not complete and only outputting?","text":"<pre><code>Running...\n</code></pre> <p>The FAAS Scheduler cannot communicate with the Python Runner. Check the configuration and start the FAAS Scheduler via the SH-script.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#the-lets-encrypt-ssl-certificate-is-about-to-expire-how-do-i-renew-it","title":"The Let's Encrypt SSL certificate is about to expire, how do I renew it?","text":"<p>The SSL certificate shoud be renewed automatically 30 days prior to it expiration. If the automatic renewal fails, this command renews the certificate manually:</p> <pre><code>docker exec -it seatable-faas-scheduler /scripts/renew_cert.sh\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#how-to-run-python-runner-package-using-non-root-user","title":"How to run Python Runner Package using non-root user","text":"<p>Assume that the runner user runs the package and the package has been downloaded to /root/seatable-python-runner-x.x.x.zip.</p> <p>Create runner user and home directory.</p> <pre><code># useradd runner -m\n</code></pre> <p>Since the package program needs to call docker, but the new user runner may not have permission to use docker, the verification method is as follows.</p> <pre><code># su - runner       # Switch to runner user\n$ docker version    # Try to call docker\n</code></pre> <p>If you see permission denied or similar words, the runner user cannot call docker, ctrl + D exit the current session, and then use the following command to make the runner join the docker user group.</p> <pre><code># usermod -aG docker runner\n</code></pre> <p>After running, you can use the su command again to switch to retry whether you can call docker.</p> <p>If you still need to deploy seatable-python-runner to the /opt directory, please switch back from user runner and execute the following command.</p> <pre><code># unzip /root/seatable-python-runner-x.x.x.zip -d /opt\n# chown runner:runner /opt/seatable-python-runner -R\n</code></pre> <p>Use the su command again to switch to the runner user.</p> <pre><code># su - runner\n$ cd /opt/seatable-python-runner\n</code></pre> <p>Then follow the documentation to continue setup and deployment.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#how-to-run-script-as-non-root-user-inside-python-runner-container","title":"How to run script as non-root user inside Python Runner container","text":"<p>Please deploy version 2.0.2 or later of Python Runner package.</p> <p>Suppose you want to run scripts as the runner user in the container.</p> <p>First you need to determine the uid of the runner on the host using following command.</p> <pre><code># id runner\nuid=1000(runner) gid=1001(runner) groups=1001(runner),999(docker)\n</code></pre> <p>1000 is the uid of user runner and 1001 is the gid of group runner.</p> <p>Edit file seatable_python_runner_settings.py.</p> <pre><code>cd /opt/seatable-python-runner/conf\nnano seatable_python_runner_settings.py\n</code></pre> <p>Add configurations as follows:</p> <pre><code>UID = '1000'\nGID = '1001'\n</code></pre> <p>Save it and quit.</p> <p>All completed and restart Python Runner Package.</p>"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/","title":"Upgrade of SeaTable Python Runner","text":"<p>Upgrade of the SeaTable python runner includes the upgrade of FAAS Scheduler, Python Runner service and Python Runner Docker image.</p> <p>The different version of components and compatibility of SeaTable Python Runner are listed in the tables bellow:</p> SeaTable version faas-scheduler version Python runner Python runner Docker version 2.4 2.1 2.0 2.6 2.5 2.2 2.0 2.6 2.6 2.2 2.0 2.6 3.2 2.2 2.0 2.6 3.3 2.2 2.0 2.6"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#upgrade-of-seatable-faas-scheduler","title":"Upgrade of SeaTable FAAS Scheduler","text":"<p>Because the scheduler is deployed by docker,  just please update the local image and restart it.</p>"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#pull-the-docker-image","title":"Pull the docker image","text":"<p>Please pull the latest docker image of scheduler</p> <pre><code>docker pull seatable/seatable-faas-scheduler:latest\n</code></pre>"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#restart-the-service","title":"Restart the service","text":"<p>Enter into the installation directory, and restart the service by docker-compose commad</p> <pre><code>docker-compose down\ndocker-compose up -d\n</code></pre>"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#change-the-image","title":"Change the image","text":"<p>Please specify the version you want to change</p> <pre><code>docker pull seatable/seatable-faas-scheduler:&lt;version-tag&gt;\n</code></pre> <p>Modify docker-compose.yml file</p> <pre><code>vim docker-compose.yml\n</code></pre> <p>Modify the info of the \"image\" belonging to seatable-faas-scheduler in docker-compose.yml file</p> <pre><code>seatable-faas-scheduler:\n    image: seatable/seatable-faas-scheduler:&lt;version-tag&gt;\n</code></pre> <p>Restart the service</p> <pre><code>docker-compose down\ndocker-compose up -d\n</code></pre>"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#upgrade-of-python-runner-service","title":"Upgrade of Python Runner service","text":"<p>Generally, you need to download the settable-python-runner package after we update the code.</p>"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#stop-the-service","title":"Stop the service","text":"<p>Enter into the directory of /opt/seatable-python-runner</p> <pre><code>./stop.sh\n</code></pre>"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#download-the-package","title":"Download the package","text":"<p>The seatable-python-runnder service should be running in the host machine. After downloading the package manually, please unzip it and enter into the project directory</p> <pre><code>unzip seatable-python-runner-2.x.x.zip -d /opt\n</code></pre> <p>If a query pop up during unziping process about whether or not replace the file, generally choose 'yes'.  If you edit the code, make your own choices  based on your interests  </p>"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#start-service","title":"Start Service","text":"<pre><code>./start.sh\n</code></pre>"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#upgrade-of-python-runner-docker","title":"Upgrade of Python Runner Docker","text":"<p>Please pull the latest image</p> <pre><code>docker pull seatable/python-runner:latest\n</code></pre>"},{"location":"limitations/system_limitations/","title":"System limitations","text":"Category Limitation Type Threshold Additional notes Base Rows 100,000 The base becomes read-only when exceeding 100,000 rows. Rows 2 150,000 The base will not be loaded to the memory if exceeding 150,000 rows. Archived rows no limit Tables 200 Table Columns 500 API calls Max. number of rows appending in a single call 1,000 Max. number of rows modification in a single call 1,000 Max. numbers of rows deletion in a single call 10,000 Max. numbers of rows moving in a single call 1,000 Max. numbers of rows listed in a single call 10,000 Use the <code>start</code> and <code>limit</code> params to list further rows. API calling rate API calling for a single base 300/min for the cloud edition. 5000/day. This limit can be set by yourself for the Developer / Enterprise Edition. You should use batch APIs to reduce API calls. API calling for getting rows of a table 100/min for a single table,  600/hour maximum This limit can be set by yourself for the Developer / Enterprise Edition. However, we strongly suggest that you add some cache in your code if the API calling is frequent. External links viewing Viewing rate of a base's external link 300/min maximum Import / export operations Size of a base being exported as a .dtable file 100MB This limit can be set by yourself for the Developer / Enterprise Edition. A base's attachments can be viewed and deleted in batch in the base's Attachments Management. Import of a xlsx/csv file 50,000 records maximum Scripts Notification rules"},{"location":"maintain/account/","title":"Account Management","text":""},{"location":"maintain/account/#user-management","title":"User Management","text":"<p>When you setup SeaTable, you should have setup a admin account. After you logged in a admin, you may add/delete users.</p>"},{"location":"maintain/account/#resetting-user-password","title":"Resetting User Password","text":"<p>Administrator can reset password for a user in \"System Admin\" page.</p> <p>In a private server, the default settings doesn't support users to reset their password by email. If you want to enable this, you have first to set up notification email.</p>"},{"location":"maintain/account/#forgot-admin-account-or-password","title":"Forgot Admin Account or Password?","text":"<p>You may create a new admin account by running <code>seatable.sh superuser</code> script under the scripts directory. After logging in the new admin account, you can reset the original admin account's password.</p>"},{"location":"maintain/backup_recovery/","title":"Backup And Recovery","text":""},{"location":"maintain/backup_recovery/#overview","title":"Overview","text":"<p>There are generally two parts of data to backup</p> <ul> <li>SeaTable tables data</li> <li>Databases</li> </ul> <p>If you setup SeaTable server according to our manual, you should have a directory layout like:</p> <pre><code>/Your SeaTable data volume/seatable/\n\u251c\u2500\u2500 ccnet\n\u251c\u2500\u2500 conf\n\u251c\u2500\u2500 db-data\n\u251c\u2500\u2500 logs\n\u251c\u2500\u2500 pids\n\u251c\u2500\u2500 scripts\n\u251c\u2500\u2500 seafile-data\n\u251c\u2500\u2500 seafile-license.txt\n\u251c\u2500\u2500 seahub-data\n\u2514\u2500\u2500 storage-data\n</code></pre> <p>All your data is stored under the <code>/Your SeaTable data volume/seatable/</code> directory. Below are important sub-directories that contain user data:</p> <ul> <li>seafile-data: contains uploaded files for file and image columns</li> <li>seahub-data: contains data used by web front-end, such as avatars</li> <li>db-data: contains archived rows in bases</li> <li>storage-data: contains backups for the bases in dtable-db (added in Enterprise Edition 3.0.0); Since version 3.0.0, tables and snapshots are also stored in this directory.</li> </ul> <p>SeaTable also stores some important metadata data in a few databases.</p> <p>MySQL databases:</p> <ul> <li>ccnet_db: contains user and group information</li> <li>seafile_db: contains library metadata</li> <li>dtable_db: contains tables used by the web front end</li> </ul> Database structure <p>SeaTable stores the following data types in the SQL database in the <code>seatable-mysql</code> Docker container:</p> <ul> <li>user actions and inputs in bases (e.g. new/modified/deleted rows, new/modified/deleted columns, new/modified, deleted views)</li> <li>meta-information for bases (e.g. API-token, common datasets, links, row comments, snapshots, third-party accounts, webhooks)</li> <li>statistical and log information (e.g. automation rules execution, row count)</li> <li>user and group information (e.g. 2FA status, logins, user quota)</li> <li>versioning information for the assets (e.g. files and images) saved in bases</li> </ul>"},{"location":"maintain/backup_recovery/#backup","title":"Backup","text":""},{"location":"maintain/backup_recovery/#steps","title":"Steps","text":"<ol> <li>Backup the MySQL databases;</li> <li>Backup the SeaTable data directory;</li> </ol> <p>Backup Order: Database First or Data Directory First</p>"},{"location":"maintain/backup_recovery/#backing-up-database","title":"Backing up Database","text":"<pre><code># It's recommended to backup the database to a separate file each time. Don't overwrite older database backups for at least a week.\ncd /opt/seatable-backup/databases\ndocker exec -it seatable-mysql mysqldump -uroot -pMYSQL_ROOT_PASSWORD --opt ccnet_db &gt; ccnet_db.sql\ndocker exec -it seatable-mysql mysqldump -uroot -pMYSQL_ROOT_PASSWORD --opt seafile_db &gt; seafile_db.sql\ndocker exec -it seatable-mysql mysqldump -uroot -pMYSQL_ROOT_PASSWORD --opt dtable_db &gt; dtable_db.sql\n</code></pre>"},{"location":"maintain/backup_recovery/#backing-up-seatable-data","title":"Backing up SeaTable data","text":"<p>You can use rsync to do incremental backup for data directories (assuming /opt/seatable-backup/ already exists)</p> <pre><code>rsync -az --exclude 'ccnet' --exclude 'logs' --exclude 'db-data' /opt/seatable/seatable-data/seatable /opt/seatable-backup/seatable\n</code></pre> <p>You may notice that <code>db-data</code> directory is not backed up. The data in this directory is backed up in a different way. Please refer to the next sub-section.</p>"},{"location":"maintain/backup_recovery/#setup-automatic-backup-for-dtable-db","title":"Setup automatic backup for dtable-db","text":"<p>available since Enterprise Edition 3.0.0</p> <p>Data managed by dtable-db component is archived rows from bases. They should be backed up as well. Data for dtable-db sits in the <code>/opt/seatable/seatable-data/seatable/db-data</code> directory.</p> <p>Unlike other components, dtable-db provides built-in automatic backup mechanism. It will take a snapshot for each base and upload to dtable-storage-server. dtable-db only make new backup for a base if it detects changes to it. This makes the backup more efficient. dtable-storage-server also compresses the backups to make it more storage-efficient.</p> <p>To setup automatic backup for dtable-db:</p> <ol> <li>Setup and run dtable-storage-server. It should be started by default. Find more details in dtable-storage-server documentation.</li> <li>Set <code>[backup]</code> configuration options in dtable-db.conf as in dtable-db documentation</li> </ol> <p>If you configure dtable-storage-server with local file system as backend, dtable-storage-server saves its data to the path specified in dtable-storage-server.conf. By default it's set to <code>/opt/seatable/seatable-data/seatable/storage-data</code>. If you set up your backup as in the last section, you should have already backed up this directory as well. Since storage-data directory has already contained the backups for dtable-db, data in db-data directory doesn't need to backup.</p> <p>If you configure dtable-storage-server with object storage as backend, there will be no data saved to <code>/opt/seatable/seatable-data/seatable/storage-data</code>. So you don't have to backup storage-data directory either.</p> <p>You can also manually execute the command to backup dtable-db data immediately</p> <pre><code>docker exec -it seatable /opt/seatable/scripts/seatable.sh backup-all\n</code></pre>"},{"location":"maintain/backup_recovery/#recovery","title":"Recovery","text":""},{"location":"maintain/backup_recovery/#restore-the-databases","title":"Restore the databases","text":"<pre><code>docker exec -i seatable-mysql /usr/bin/mysql -uroot -pMYSQL_ROOT_PASSWORD ccnet_db &lt; /opt/seatable-backup/databases/ccnet_db.sql\ndocker exec -i seatable-mysql /usr/bin/mysql -uroot -pMYSQL_ROOT_PASSWORD seafile_db &lt; /opt/seatable-backup/databases/seafile_db.sql\ndocker exec -i seatable-mysql /usr/bin/mysql -uroot -pMYSQL_ROOT_PASSWORD dtable_db &lt; /opt/seatable-backup/databases/dtable_db.sql\n</code></pre>"},{"location":"maintain/backup_recovery/#restore-the-seatable-data","title":"Restore the SeaTable data","text":"<pre><code>rsync -az /opt/seatable-backup/seatable /opt/seatable/seatable-data/seatable\n</code></pre>"},{"location":"maintain/backup_recovery/#restore-the-dtable-db-data","title":"Restore the dtable-db data","text":"<pre><code>docker exec -it seatable /opt/seatable/scripts/seatable.sh restore-all\n</code></pre>"},{"location":"maintain/clean_database/","title":"Clean Database","text":""},{"location":"maintain/clean_database/#clean-database-records","title":"Clean Database Records","text":"<p>Since version 1.2, we offer a command to clear records older than the retention period in the seatable database (the default database name is <code>dtable_db</code>).</p> <pre><code>$ docker exec -it seatable /bin/bash\n\n$ seatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py clean_db_records\n</code></pre> <p>The following tables will be cleaned:</p> Database table Table description Retention period activities Aggregated log (based on operation_log) recording row creations, modifications, and deletions &gt; 30 days delete_operation_log High level log (based on operation_log) recording all row deletions &gt; 30 days dtable_notifications User notifications inside the bases &gt; 30 days dtable_snapshots Snapshots of bases that are not store in dtable-storage-server &gt; 365 days notifications_usernotification User notifications on the home page &gt; 30 days operation_log Low level log recording all operations &gt; 14 days session_log Low level log recording all user sessions &gt; 30 days"},{"location":"maintain/clean_database/#database-backup-optional","title":"Database Backup (optional)","text":"<p>Before running <code>clean_db_records</code>, you can make a backup by a shell script. The following tables with many records will be excluded:</p> <ul> <li>operation_log</li> <li>delete_operation_log</li> <li>session_log</li> <li>activities</li> </ul> <p>Example of the <code>database_backup.sh</code> backup shell script\uff1a</p> <pre><code>#!/bin/bash\nset -e\ndb_host='&lt;IP address of database&gt;'\ndb_user='root'\ndb_name='dtable_db'\nbackup_dir='/opt/seatable/db-backups'\n\necho 'Start backing up the database'\n\nmysqldump -h$db_host -u$db_user -p --opt $db_name \\\n  --ignore-table=$db_name.activities \\\n  --ignore-table=$db_name.delete_operation_log \\\n  --ignore-table=$db_name.operation_log \\\n  --ignore-table=$db_name.session_log \\\n  &gt; $backup_dir/seatable.sql.`date +\"%Y-%m-%d\"`\n\necho 'Database backup succeeded'\n</code></pre> <p>Run the shell script:</p> <pre><code>$ ./database_backup.sh\nStart backing up the database\nEnter password: xxxxx\nDatabase backup succeeded\n</code></pre>"},{"location":"maintain/logs/","title":"Logs","text":""},{"location":"maintain/logs/#log-files-of-seatable-server","title":"Log files of SeaTable server","text":"<p>The SeaTable logs are under <code>/shared/seatable/logs</code> in the docker, or <code>/Your SeaTable data volume/seatable/logs</code> in the server that run the docker.</p> <p>Main log files:</p> <ul> <li>dtable_web.log: logs for dtable-web</li> <li>dtable-events.log: logs for dtable-events</li> <li>dtable_events_io.log: logs for Base's import or export and Excel or CSV file import or export</li> <li>dtable_events_message.log: logs for sending emails in the dtable-events background</li> <li>dtable-server.log: logs for dtable-server</li> <li>dtable-db.log: logs for dtable-db</li> <li>dtable-db-error.log: error logs for dtable-db</li> <li>dtable-db-access.log: query log for dtable-db</li> <li>dtable-db-slow.log: slow query log for dtable-db</li> </ul> <p>Other log files:</p> <ul> <li>seafile.log: logs of Seafile server</li> <li>slow_logs: Slow request logs, which can be used to debug performance issues</li> <li>monitor.log: Monitor logs, monitor.sh can auto restart the unexpectedly closed server</li> <li>init.log:  Logs for docker initialization script</li> </ul>"},{"location":"maintain/logs/#log-files-of-nginx-server","title":"Log files of Nginx server","text":"<p>The Nginx logs are under <code>/shared/nginx-logs</code>, or <code>/Your SeaTable data volume/nginx-logs</code> in the server that run the docker.</p> <ul> <li>dtable-web.access.log</li> <li>dtable-web.error.log</li> <li>access.log</li> <li>error.log</li> </ul>"},{"location":"maintain/others/","title":"Other maintenance","text":""},{"location":"maintain/others/#measurements-for-domain-changed","title":"Measurements for domain changed","text":"<p>Changing of domain can make an image or file unreadable in a SeaTable base.  Therefore, we provide some commands for users for transferring all the image or file urls from an old domain to a new one in a base.</p> <pre><code>$ docker exec -it seatable /bin/bash\n\n# for one base\n$ seatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py domain_transfer -uuid &lt;:base uuid&gt; -od &lt;:old domain&gt; -nd &lt;:new domain&gt;\n\n# for all bases\n$ seatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py domain_transfer -all -od &lt;:old domain&gt; -nd &lt;:new domain&gt;\n</code></pre> <p>For example, we want to change the domain in base '695fa115-4927-4be1-b5b6-fbbbabd43b72' from 'https://dev.seatable.cn' into 'https://cloud.seatable.io' , we can run:  </p> <pre><code>seatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py domain_transfer -uuid 695fa115-4927-4be1-b5b6-fbbbabd43b72  -od https://dev.seatable.cn -nd https://cloud.seatable.io\n</code></pre>"},{"location":"maintain/seafile_fsck/","title":"SeaTable FSCK","text":"<p>On the server side, SeaTable stores the files in the libraries in an internal format. SeaTable has its own representation of directories and files (similar to Git).</p> <p>With default installation, these internal objects are stored in the server's file system directly (such as Ext4, NTFS). But most file systems don't assure the integrity of file contents after a hard shutdown or system crash. So if new SeaTable internal objects are being written when the system crashes, they can be corrupt after the system reboots. This will make part of the corresponding library not accessible.</p> <p>Note: If you store the seafile-data directory in a battery-backed NAS (like EMC or NetApp), or use S3 backend available in the Pro edition, the internal objects won't be corrupt.</p> <p>SeaTable server comes with a seaf-fsck tool to help you recover from this corruption (similar to git-fsck tool). This tool recovers any corrupted library back to its last consistent and usable state.</p> <p>We provide a seaf-fsck.sh script. The seaf-fsck tool accepts the following arguments:</p> <pre><code>docker exec -it seatable /opt/seatable/seatable-server-latest/seaf-fsck.sh [--repair|-r] [--export|-E export_path] [repo_id_1 [repo_id_2 ...]]\n</code></pre> <p>There are three modes of operation for seaf-fsck:</p> <ol> <li>checking integrity of tables.</li> <li>repairing corrupted tables.</li> <li>exporting tables.</li> </ol>"},{"location":"maintain/seafile_fsck/#checking-integrity-of-libraries","title":"Checking Integrity of Libraries","text":"<p>Running seaf-fsck.sh without any arguments will run a read-only integrity check for all tables.</p> <pre><code>docker exec -it seatable /opt/seatable/seatable-server-latest/seaf-fsck.sh\n</code></pre> <p>If you want to check integrity for specific tables, just append the library id's as arguments:</p> <pre><code>cd seafile-server-latest\n./seaf-fsck.sh [library-id1] [library-id2] ...\n</code></pre> <p>The output looks like:</p> <pre><code>[02/13/15 16:21:07] fsck.c(470): Running fsck for repo ca1a860d-e1c1-4a52-8123-0bf9def8697f.\n[02/13/15 16:21:07] fsck.c(413): Checking file system integrity of repo fsck(ca1a860d)...\n[02/13/15 16:21:07] fsck.c(35): Dir 9c09d937397b51e1283d68ee7590cd9ce01fe4c9 is missing.\n[02/13/15 16:21:07] fsck.c(200): Dir /bf/pk/(9c09d937) is corrupted.\n[02/13/15 16:21:07] fsck.c(105): Block 36e3dd8757edeb97758b3b4d8530a4a8a045d3cb is corrupted.\n[02/13/15 16:21:07] fsck.c(178): File /bf/02.1.md(ef37e350) is corrupted.\n[02/13/15 16:21:07] fsck.c(85): Block 650fb22495b0b199cff0f1e1ebf036e548fcb95a is missing.\n[02/13/15 16:21:07] fsck.c(178): File /01.2.md(4a73621f) is corrupted.\n[02/13/15 16:21:07] fsck.c(514): Fsck finished for repo ca1a860d.\n</code></pre> <p>The corrupted files and directories are reported.</p> <p>Sometimes you can see output like the following:</p> <pre><code>[02/13/15 16:36:11] Commit 6259251e2b0dd9a8e99925ae6199cbf4c134ec10 is missing\n[02/13/15 16:36:11] fsck.c(476): Repo ca1a860d HEAD commit is corrupted, need to restore to an old version.\n[02/13/15 16:36:11] fsck.c(314): Scanning available commits...\n[02/13/15 16:36:11] fsck.c(376): Find available commit 1b26b13c(created at 2015-02-13 16:10:21) for repo ca1a860d.\n</code></pre> <p>This means the \"head commit\" (current state of the library) recorded in database is not consistent with the library data. In such case, fsck will try to find the last consistent state and check the integrity in that state.</p> <p>Tips: If you have many libraries, it's helpful to save the fsck output into a log file for later analysis.</p>"},{"location":"maintain/seafile_fsck/#repairing-corruption","title":"Repairing Corruption","text":"<p>Corruption repair in seaf-fsck basically works in two steps:</p> <ol> <li>If the library state (commit) recorded in database is not found in data directory, find the last available state from data directory.</li> <li>Check data integrity in that specific state. If files or directories are corrupted, set them to empty files or empty directories. The corrupted paths will be reported, so that the user can recover them from somewhere else.</li> </ol> <p>Running the following command repairs all the libraries:</p> <pre><code>cd seafile-server-latest\n./seaf-fsck.sh --repair\n</code></pre> <p>Most of time you run the read-only integrity check first, to find out which libraries are corrupted. And then you repair specific libraries with the following command:</p> <pre><code>cd seafile-server-latest\n./seaf-fsck.sh --repair [library-id1] [library-id2] ...\n</code></pre> <p>After repairing, in the library history, seaf-fsck includes the list of files and folders that are corrupted. So it's much easier to located corrupted paths.</p>"},{"location":"maintain/seafile_fsck/#best-practice-for-repairing-a-library","title":"Best Practice for Repairing a Library","text":"<p>To check all libraries and find out which library is corrupted, the system admin can run seaf-fsck.sh without any argument and save the output to a log file. Search for keyword \"Fail\" in the log file to locate corrupted libraries. You can run seaf-fsck to check all libraries when your Seafile server is running. It won't damage or change any files.</p> <p>When the system admin find a library is corrupted, he/she should run seaf-fsck.sh with \"--repair\" for the library. After the command fixes the library, the admin should inform user to recover files from other places. There are two ways:</p> <ul> <li>Upload corrupted files or folders via the web interface</li> <li>If the library was synced to some desktop computer, and that computer has a correct version of the corrupted file, re-syncing the library on that computer will upload the corrupted files to the server.</li> </ul>"},{"location":"maintain/seafile_fsck/#exporting-libraries-to-file-system","title":"Exporting Libraries to File System","text":"<p>Since version 4.2.0, you can use seaf-fsck to export all the files in libraries to external file system (such as Ext4). This procedure doesn't rely on the seafile database. As long as you have your seafile-data directory, you can always export your files from Seafile to external file system.</p> <p>The command syntax is</p> <pre><code>cd seafile-server-latest\n./seaf-fsck.sh --export top_export_path [library-id1] [library-id2] ...\n</code></pre> <p>The argument <code>top_export_path</code> is a directory to place the exported files. Each library will be exported as a sub-directory of the export path. If you don't specify library ids, all libraries will be exported.</p> <p>Currently only un-encrypted libraries can be exported. Encrypted libraries will be skipped.</p>"},{"location":"maintain/seafile_gc/","title":"Seafile GC","text":"<p>Seafile uses storage de-duplication technology to reduce storage usage. The underlying data blocks will not be removed immediately after you delete a file or a library. As a result, the number of unused data blocks will increase on Seafile server.</p> <p>To release the storage space occupied by unused blocks, you have to run a \"garbage collection\" program to clean up unused blocks on your server.</p> <p>The GC program cleans up two types of unused blocks:</p> <ol> <li>Blocks that no library references to, that is, the blocks belong to deleted libraries;</li> <li>If you set history length limit on some libraries, the out-dated blocks in those libraries will also be removed.</li> </ol> <p>Before running GC, you must shutdown the Seafile program on your server if you use the community edition. For professional edition, from version 3.1.11, online GC operation is supported. If you use Professional edition, you don't need to shutdown the Seafile program if you are using MySQL or PostgreSQL as database. This is because new blocks written into Seafile while GC is running may be mistakenly deleted by the GC program.</p> <p>Community version - GC cleanup Script</p> <p>At the bottom of the page there is a script that you can use to run the cleanup manually or e.g. once a week with as cronjob.</p>"},{"location":"maintain/seafile_gc/#run-gc-in-version-411-and-later","title":"Run GC in version 4.1.1 and later","text":"<p>In community edition 4.1.1 and Pro edition 4.1.0, GC program's command line and output are improved.</p>"},{"location":"maintain/seafile_gc/#dry-run-mode","title":"Dry-run Mode","text":"<p>To see how much garbage can be collected without actually removing any garbage, use the dry-run option:</p> <pre><code>seaf-gc.sh --dry-run [repo-id1] [repo-id2] ...\n</code></pre> <p>The output should look like:</p> <pre><code>[03/19/15 19:41:49] seafserv-gc.c(115): GC version 1 repo My Library(ffa57d93)\n[03/19/15 19:41:49] gc-core.c(394): GC started. Total block number is 265.\n[03/19/15 19:41:49] gc-core.c(75): GC index size is 1024 Byte.\n[03/19/15 19:41:49] gc-core.c(408): Populating index.\n[03/19/15 19:41:49] gc-core.c(262): Populating index for repo ffa57d93.\n[03/19/15 19:41:49] gc-core.c(308): Traversed 5 commits, 265 blocks.\n[03/19/15 19:41:49] gc-core.c(440): Scanning unused blocks.\n[03/19/15 19:41:49] gc-core.c(472): GC finished. 265 blocks total, about 265 reachable blocks, 0 blocks can be removed.\n\n[03/19/15 19:41:49] seafserv-gc.c(115): GC version 1 repo aa(f3d0a8d0)\n[03/19/15 19:41:49] gc-core.c(394): GC started. Total block number is 5.\n[03/19/15 19:41:49] gc-core.c(75): GC index size is 1024 Byte.\n[03/19/15 19:41:49] gc-core.c(408): Populating index.\n[03/19/15 19:41:49] gc-core.c(262): Populating index for repo f3d0a8d0.\n[03/19/15 19:41:49] gc-core.c(308): Traversed 8 commits, 5 blocks.\n[03/19/15 19:41:49] gc-core.c(264): Populating index for sub-repo 9217622a.\n[03/19/15 19:41:49] gc-core.c(308): Traversed 4 commits, 4 blocks.\n[03/19/15 19:41:49] gc-core.c(440): Scanning unused blocks.\n[03/19/15 19:41:49] gc-core.c(472): GC finished. 5 blocks total, about 9 reachable blocks, 0 blocks can be removed.\n\n[03/19/15 19:41:49] seafserv-gc.c(115): GC version 1 repo test2(e7d26d93)\n[03/19/15 19:41:49] gc-core.c(394): GC started. Total block number is 507.\n[03/19/15 19:41:49] gc-core.c(75): GC index size is 1024 Byte.\n[03/19/15 19:41:49] gc-core.c(408): Populating index.\n[03/19/15 19:41:49] gc-core.c(262): Populating index for repo e7d26d93.\n[03/19/15 19:41:49] gc-core.c(308): Traversed 577 commits, 507 blocks.\n[03/19/15 19:41:49] gc-core.c(440): Scanning unused blocks.\n[03/19/15 19:41:49] gc-core.c(472): GC finished. 507 blocks total, about 507 reachable blocks, 0 blocks can be removed.\n\n[03/19/15 19:41:50] seafserv-gc.c(124): === Repos deleted by users ===\n[03/19/15 19:41:50] seafserv-gc.c(145): === GC is finished ===\n\n[03/19/15 19:41:50] Following repos have blocks to be removed:\nrepo-id1\nrepo-id2\nrepo-id3\n</code></pre> <p>If you give specific library ids, only those libraries will be checked; otherwise all libraries will be checked.</p> <p>Notice that at the end of the output there is a \"repos have blocks to be removed\" section. It contains the list of libraries that have garbage blocks. Later when you run GC without --dry-run option, you can use these libraries ids as input arguments to GC program.</p>"},{"location":"maintain/seafile_gc/#removing-garbage","title":"Removing Garbage","text":"<p>To actually remove garbage blocks, run without the --dry-run option:</p> <pre><code>seaf-gc.sh [repo-id1] [repo-id2] ...\n</code></pre> <p>If libraries ids are specified, only those libraries will be checked for garbage.</p> <p>As described before, there are two types of garbage blocks to be removed. Sometimes just removing the first type of blocks (those that belong to deleted libraries) is good enough. In this case, the GC program won't bother to check the libraries for outdated historic blocks. The \"-r\" option implements this feature:</p> <pre><code>seaf-gc.sh -r\n</code></pre> <p>In Seafile version 4.1.1 and later, libraries deleted by the users are not immediately removed from the system. Instead, they're moved into a \"trash\" in the system admin page. Before they're cleared from the trash, their blocks won't be garbage collected.</p>"},{"location":"maintain/seafile_gc/#using-multiple-threads-in-gc","title":"Using Multiple Threads in GC","text":"<p>Since Pro server 5.1.0, you can specify the thread number in GC. By default,</p> <ul> <li>If storage backend is S3/Swift/Ceph, 10 threads are started to do the GC work.</li> <li>If storage backend is file system, only 1 thread is started.</li> </ul> <p>You can specify the thread number in with \"-t\" option. \"-t\" option can be used together with all other options. Each thread will do GC on one library. For example, the following command will use 20 threads to GC all libraries:</p> <pre><code>seaf-gc.sh -t 20\n</code></pre> <p>Since the threads are concurrent, the output of each thread may mix with each others. Library ID is printed in each line of output.</p>"},{"location":"maintain/seafile_gc/#run-gc-in-older-versions-before-411","title":"Run GC in older versions (before 4.1.1)","text":"<p>To run GC program</p> <pre><code>./seaf-gc.sh run\n</code></pre> <p>If you want to do sanity check before actually removing any data, you can use the --dry-run option</p> <pre><code>./seaf-gc.sh dry-run\n</code></pre> <p>It will show you the total block number vs. the number of blocks to be removed.</p> <p>To check data integrity after running GC, you can use seaf-fsck</p>"},{"location":"maintain/seafile_gc/#gc-cleanup-script-for-community-version","title":"GC cleanup script for Community Version","text":"<p>To use this script you need:</p> <ul> <li>Setup the seafile-service file at '/etc/init.d/seafile-server'</li> <li>Files of seafile setup need to be owner by 'seafile:nogroup' or 'seafile:seafile'</li> <li>Run the script with sudo or as root</li> <li>Put the script into crontab of a root user</li> </ul> <p>Create the script file (change the location to your liking):</p> <pre><code>touch /opt/haiwen/seafile/cleanupScript.sh\n</code></pre> <p>Use your favorite text editor and paste the following code:</p> <p><pre><code>#!/bin/bash\n\n#####\n# Uncomment the following line if you rather want to run the script manually.\n# Display usage if the script is not run as root user\n#        if [[ $USER != \"root\" ]]; then\n#                echo \"This script must be run as root user!\"\n#                exit 1\n#        fi\n#\n# echo \"Super User detected!!\"\n# read -p \"Press [ENTER] to start the procedure, this will stop the seafile server!!\"\n#####\n\n# stop the server\necho Stopping the Seafile-Server...\nsystemctl stop seafile.service\nsystemctl stop seahub.service\n\necho Giving the server some time to shut down properly....\nsleep 20\n\n# run the cleanup\necho Seafile cleanup started...\nsudo -u seafile $pathtoseafile/seafile-server-latest/seaf-gc.sh\n\necho Giving the server some time....\nsleep 10\n\n# start the server again\necho Starting the Seafile-Server...\nsystemctl start seafile.service\nsystemctl start seahub.service\n\necho Seafile cleanup done!\n</code></pre> Make sure that the script has been given execution rights, to do that run this command.</p> <pre><code>sudo chmod +x /path/to/yourscript.sh\n</code></pre> <p>Then open crontab with the root user</p> <pre><code>crontab -e\n</code></pre> <p>Add the following line (change the location of your script accordingly!)</p> <pre><code>0 2 * * Sun /opt/haiwen/seafile/cleanupScript.sh\n</code></pre> <p>The script will then run every Sunday at 2:00 AM.</p>"},{"location":"maintain/seafile_gc/#gc-in-the-seafile-docker-container","title":"GC in the seafile docker container","text":"<p>To perform garbage collection inside the seafile docker container, you must run the <code>/scripts/gc.sh</code> script. Simply run <code>docker exec &lt;whatever-your-seafile-container-is-called&gt; /scripts/gc.sh</code>.</p>"},{"location":"maintain/seatable_gc/","title":"SeaTable GC","text":"<p>SeaTable uses storage de-duplication technology to reduce storage usage. The underlying data blocks will not be removed immediately after you delete a file or a base. As a result, the number of unused data blocks will increase on SeaTable server.</p> <p>To release the storage space occupied by unused blocks, you have to run a garbage collection program to clean up unused blocks on your server.</p>"},{"location":"maintain/seatable_gc/#configuration","title":"Configuration","text":"<p>Add following lines to <code>seafile.conf</code> to keep deleted files for only 60 days:</p> <pre><code>[history]\nkeep_days = 60\n</code></pre>"},{"location":"maintain/seatable_gc/#dry-run-mode","title":"Dry-run mode","text":"<p>To see how much garbage can be collected without actually removing any garbage, use the dry-run option:</p> <pre><code>seatable.sh gc --dry-run\n</code></pre> <p>The output should look like:</p> <pre><code>Starting seafserv-gc, please wait ...\n2021-04-27 14:30:13 gc-core.c(904): Database is MySQL/Postgre/Oracle, use online GC.\n2021-04-27 14:30:13 gc-core.c(928): Using up to 1 threads to run GC.\n2021-04-27 14:30:13 gc-core.c(873): GC version 1 repo plugins repo(92ba689b-51a3-457b-a264-1e46537025c8)\n2021-04-27 14:30:13 gc-core.c(609): No blocks for repo 92ba689b, skip GC.\n\n2021-04-27 14:30:13 gc-core.c(873): GC version 1 repo My Workspace(7041b9ea-cec7-43a1-9639-70aaeb572aed)\n2021-04-27 14:30:13 gc-core.c(615): GC started for repo 7041b9ea. Total block number is 14.\n2021-04-27 14:30:13 gc-core.c(78): GC index size is 1024 Byte for repo 7041b9ea.\n2021-04-27 14:30:13 gc-core.c(390): Populating index for repo 7041b9ea.\n2021-04-27 14:30:13 gc-core.c(369): Traversed 22 commits, 14 blocks for repo 7041b9ea.\n2021-04-27 14:30:13 gc-core.c(682): Scanning and deleting unused blocks for repo 7041b9ea.\n2021-04-27 14:30:13 gc-core.c(700): GC finished for repo 7041b9ea. 14 blocks total, about 14 reachable blocks, 0 blocks are removed.\n\n2021-04-27 14:30:13 gc-core.c(873): GC version 1 repo My Library Template(3fe6b035-2e0f-4c2f-9347-2673b5778e72)\n2021-04-27 14:30:13 gc-core.c(609): No blocks for repo 3fe6b035, skip GC.\n2021-04-27 14:30:13 gc-core.c(773): === Repos deleted by users ===\n2021-04-27 14:30:13 gc-core.c(980): === GC is finished ===\nseafserv-gc run done\nDone.\n</code></pre>"},{"location":"maintain/seatable_gc/#removing-garbage","title":"Removing Garbage","text":"<p>Run a garbage collection program without adding --dry-run option to actually remove garbage block.</p> <pre><code>seatable.sh gc\n</code></pre>"},{"location":"upgrade/extra-upgrade-notice/","title":"Extra upgrade notice","text":""},{"location":"upgrade/extra-upgrade-notice/#30","title":"3.0","text":"<p>3.0 adds another component, dtable-storage-server, which provides better performance for persistent storage of bases. A base in SeaTable is saved as a file, which is automatically saved every 5 minutes. In 2.x, this file saved in seaf-server, but seaf-server will keep a version for each save, which will take up a lot of disk space. In 3.0, only one version is actually saved when a snapshot is generated every 24 hours, which saves space. dtable-storage-server is a simple abstract layer of traditional file system and object storage.</p> <p>1) For new installation, dtable-storage-server.conf will be generated automatically. For upgrade from 2.x, you need to generate the config file manually</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh init\n</code></pre> <p>dtable-storage-server.conf is as follows</p> <pre><code>[general]\nlog_dir = /opt/seatable/logs\ntemp_file_dir = /tmp/tmp-storage-data\n\n[storage backend]\ntype = filesystem\npath = /opt/seatable/storage-data\n\n[snapshot]\ninterval = 86400\nkeep_days = 180\n</code></pre> <p>2) Add configuration in dtable_web_settings.py so that the newly created bases are saved to the dtable-storage-server, and the old bases are still read and written from seaf-server.</p> <p>In dtable_web_settings.py</p> <pre><code>NEW_DTABLE_IN_STORAGE_SERVER = True\n</code></pre> <p>3) Enterprise edition needs to add configuration items in dtable-db.conf to automatically back up the archived data in the dtable-db.</p> <p>In dtable-db.conf</p> <pre><code>[backup]\ndtable_storage_server_url = http://127.0.0.1:6666\nbackup_interval = 1440\nkeep_backup_num = 3\n</code></pre>"},{"location":"upgrade/extra-upgrade-notice/#27","title":"2.7","text":"<p>The configuration of the embedded base to other webpages (iframe mode) needs to be modified as follows</p> <p>In dtable_web_settings.py</p> <pre><code>SESSION_COOKIE_SAMESITE = None\n              |\n              V\nSESSION_COOKIE_SAMESITE = 'None'\n\n\nCSRF_COOKIE_SAMESITE = None\n              |\n              V\nCSRF_COOKIE_SAMESITE = 'None'\n</code></pre>"},{"location":"upgrade/extra-upgrade-notice/#23","title":"2.3","text":"<p>In 2.3 version, we made a small change to dtable-db configuration. If you're upgrading from older versions, you have to manually add below option to conf/dtable-db.conf:</p> <pre><code>[general]\n......\nlog_dir = /shared/seatable/logs\n\n......\n</code></pre> <p>It's also suggested to change the <code>total_cache_size</code> option to a larger value (e.g. 500MB, depending on how much memory you have):</p> <pre><code>[dtable cache]\n......\ntotal_cache_size = 500\n\n......\n</code></pre> <p>You also need to add access information to dtable-server MySQL database. (You have to change below options based on your conf/dtable-server.json)</p> <pre><code>[database]\nhost = 127.0.0.1\nuser = root\npassword = mypass\ndb_name = dtable\n</code></pre> <p>Add <code>DTABLE_DB_URL</code> to dtable_web_settings.py</p> <pre><code>DTABLE_DB_URL = 'https://&lt;your-domain&gt;/dtable-db/'\n</code></pre> <p>Add dtable-db configuration to nginx.conf </p> <pre><code>    location /dtable-db/ {\n        proxy_pass         http://127.0.0.1:7777/;\n        proxy_redirect     off;\n        proxy_set_header   Host              $host;\n        proxy_set_header   X-Real-IP         $remote_addr;\n        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\n        proxy_set_header   X-Forwarded-Host  $server_name;\n        proxy_set_header   X-Forwarded-Proto $scheme;\n\n        access_log      /opt/nginx-logs/dtable-db.access.log seatableformat;\n        error_log       /opt/nginx-logs/dtable-db.error.log;\n    }\n</code></pre>"},{"location":"upgrade/extra-upgrade-notice/#21","title":"2.1","text":"<p>2.1 add another component dtable-db, which is used to provide SQL query API (more features will be provided based on this component). For newly installation, the config file will be generated automatically. For upgrade from 2.0, you need to add the config file manually.</p> <p>Add a new file conf/dtable-db.conf with the following contents and modify <code>private_key</code> according to your instance:</p> <pre><code>[general]\nhost = 127.0.0.1\nport = 7777\n\n[storage]\ndata_dir = /opt/seatable/db-data\n\n[dtable cache]\nprivate_key = \"my private key\"\ndtable_server_url = \"http://127.0.0.1:5000\"\nexpire_time = 600\ntotal_cache_size = 1\nclean_cache_interval = 300\n</code></pre> <p>The value of <code>private_key</code> should be the same as the value in <code>dtable_server_config.json</code>.</p> <p>dtable_server_url should be http://127.0.0.1:5000. You don't need to modify the value.</p>"},{"location":"upgrade/upgrade_manual/","title":"Upgrade manual","text":"<p>In general, to upgrade to a new version, you need to</p> <ol> <li>Pull a new docker image version</li> <li>Stop the service and do the database migration manually</li> <li>Restart the service </li> </ol> <p>If there are extra notes for a specific version, you can find it here: extra notices</p>"},{"location":"upgrade/upgrade_manual/#get-latest-seatable","title":"Get latest SeaTable","text":"<p>You can find all versions of SeaTable from Docker Hub.</p> <p>Run the following command to get the latest version of Seatable.</p> <pre><code>docker pull seatable/seatable-developer:{tag}\n</code></pre> <p>Stop the currently running SeaTable container.</p> <pre><code>docker-compose down\n</code></pre> <p>Then modify SeaTable version in \"docker-compose.yml\". And start a new SeaTable container.</p> <pre><code>docker-compose up -d\n</code></pre>"},{"location":"upgrade/upgrade_manual/#upgrade-database","title":"Upgrade database","text":""},{"location":"upgrade/upgrade_manual/#major-or-minor-version-upgrade","title":"Major or minor version upgrade","text":"<p>Major version upgrade, like from 1.x to 2.x, and minor version upgrade, like from 1.1.x to 1.2.x, involve database changes. You need to manually change the database like following:</p> <pre><code>docker exec -it seatable /bin/bash # Login to the SeaTable container. Then execute the upgrade statement\n\n\nseatable.sh upgrade-sql 1.1\nseatable.sh upgrade-sql 1.2\n</code></pre> <p>If the above commands failed to execute for some reasons, (for example, you are using external database instead of the default one started by docker-compose), you can execute the database upgrade commands manually as below:</p> <pre><code>docker exec -it seatable /bin/bash\n\nmysql -h$DB_HOST -p$DB_ROOT_PASSWD dtable_db &lt;/opt/seatable/seatable-server-latest/sql/mysql/upgrade/1.1/dtable.sql\nmysql -h$DB_HOST -p$DB_ROOT_PASSWD dtable_db &lt;/opt/seatable/seatable-server-latest/sql/mysql/upgrade/1.2/dtable.sql\n</code></pre> <p>If you upgrade several versions at once, just run all the database upgrade statement one by one, starting from the lowest version.</p>"},{"location":"upgrade/upgrade_manual/#tiny-version-upgrade","title":"Tiny version upgrade","text":"<p>Tiny version upgrade, like from 1.0.1 to 1.0.2, does not involve database changes.</p>"},{"location":"upgrade/upgrade_manual/#start-seatable-server","title":"Start SeaTable server","text":"<p>Now you can start the SeaTable service. Execute the following command in the host server:</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh start\n</code></pre>"}]}