{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SeaTable","text":"<p>Everything a SeaTable administrator needs</p> <p>This admin manual cover the typical topics, from installation to configuration, backup and maintenance of your own SeaTable Server. So if you want to run your own SeaTable Server, this is the place to be!</p> <p>If you don't want to run your own server, there are other ressources available, that might help you also:</p> <ul> <li>For users: For information about how to use SeaTable, please refer to the user documentation.</li> <li>For developers: For developer-focus documentation, such as using SeaTable's API, scripting, automations and plugin development refer either to the API reference or have a look at the developer manual.</li> <li>Others: There are additional ressources. Check out our YouTube channel to get a better understanding of how to use SeaTable or to raise questions at the community forum.</li> </ul>"},{"location":"#what-is-seatable","title":"What is SeaTable?","text":"<p>SeaTable is a no-code database and app-building platform. At the first glimpse it looks like an online spreadsheet selection like google sheets, but under the hood it offers so much more. SeaTable helps you to record and manage all kinds of scattered information. Use Filters, Sortings or Group to work corabolative with friends and collegues. Visualize any data with various plugins like Kanban, Gallery or Calendar.</p> <p>With APIs and SDKs, you can quickly scale to your needs, automate data processing and automate business processes.</p> <p>Main features includes:</p> <ul> <li>A spreadsheet like interface to records data supporting collaboratively editing.</li> <li>A form app to collect data from outside.</li> <li>Mobile ready UI to be used on browsers in mobile system to view and collect data.</li> <li>Comprehensive API and SDK for adding extensions.</li> <li>Filters, sorts, charts and pivotal tables to visualize and analyze data.</li> </ul> <p>This admin manual will help you to install, configure and update your own SeaTable Server.</p>"},{"location":"#how-to-use-seatable","title":"How to use SeaTable?","text":"<p>Due to the fact, that you are reading the administrator manual, you might run your own SeaTable Server. Just keep reading. </p> <p>But just in case that you don't want to take the hurdle to run your own server, SeaTable GmbH offers two other products next to SeaTable Server:</p> SeaTable Cloud: ready in seconds <p>Additionally, there is SeaTable Cloud, a cloud service for users that do not want to self-host or simply trial SeaTable Server. SeaTable Cloud can be used free-of-charge with the \"Free\" subscription. More features and higher resource limits are available in SeaTable Cloud's paid subscriptions.</p> SeaTable Dedicated: Full control without any huzzle <p>Then, there is SeaTable Dedicated. SeaTable Dedicated is a managed and private SeaTable Cloud. We (=SeaTable GmbH) run and manage the Server for you, but it is your system. You define which URL to use, which logo or color code should greet your users.</p>"},{"location":"#installation","title":"Installation","text":"<p>This manual provides two different approaches how to install SeaTable.</p>"},{"location":"#single-node-installation","title":"Single-Node Installation","text":"<p>There is a Single-Node Setup, where all components of SeaTable are installed on one Server or virtual machine. All services can be reached by one single URL. The installation is fairly straigt forward thanks to the consequent usage of Docker. This setup is easy for testing and production for up to 100 users.</p> <p>Let's begin with the Single-Node installation</p>"},{"location":"#advanced-setup","title":"Advanced Setup","text":"<p>The advanced setup is not an installation type, but the articles in this section provide the necessary information to operate each component separately. The descriptions result in a highly available cluster setup for thousands of users.</p>"},{"location":"#screenshots","title":"Screenshots","text":""},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#docker-containers","title":"Docker Containers","text":"<p>A SeaTable Server consists of a handful of docker containers, which are all required to work properly.</p> <p>Please be aware, that the following graph is highly simplified. More details will be provided later in this manual.</p> <pre><code>flowchart LR\n    subgraph s[SeaTable Server]\n        subgraph d[Docker Containers]\n            A[caddy]\n            B[SeaTable Server]\n            C[mariadb]\n            D[redis]\n            E[memcached]\n            A&lt;--&gt;B\n            B&lt;--&gt;C\n            B&lt;--&gt;D\n            B&lt;--&gt;E\n        end\n        F[File System]\n        C --&gt; F\n        D --&gt; F\n        B --&gt; F\n        E --&gt; F\n    end</code></pre>"},{"location":"architecture/#caddy-the-flexible-web-proxy","title":"Caddy: the flexible web proxy","text":"<p>The only task of caddy is to offer a central way into the SeaTable Server. Caddy makes TLS termination with Let's Encrypt or the usage of custom certificates super easy.</p>"},{"location":"architecture/#mariadb-the-database","title":"mariadb: the database","text":"<p>Every software that want to save some data needs a database. SeaTable uses mariadb to store persistent data about the users, which bases exist, which groups were created and so on.</p> <p>Important: the content of the SeaTable bases are not stored inside the database.</p>"},{"location":"architecture/#redis-internal-events-queue","title":"redis: Internal events queue","text":"<p>Redis is used for sending messages from dtable-web/dtable-server to dtable-events</p>"},{"location":"architecture/#memcache-caching-for-the-django-framework","title":"memcache: Caching for the Django framework","text":"<p>Memcache is used to provide caching for Django framework.</p>"},{"location":"architecture/#seatable-server-container","title":"SeaTable Server Container","text":"<p>Let's look at the SeaTable Server container. Also this graph is simplified for explanatory reasons. It should explain the connections and logics and should not be super precise.</p> <pre><code>flowchart LR\n    subgraph s[SeaTable Server Container]\n        A[nginx]\n        B[dtable-web]\n        C[dtable-servers]\n        D[dtable-db]\n        E[seaf-server]\n        G[dtable-events]\n        F[dtable-storage]\n        A&lt;-- Start Page --&gt;B\n        A&lt;-- Base Editor --&gt;C\n        A&lt;--&gt;D\n        A&lt;-- Files/Images --&gt;E\n        C&lt;--&gt;F\n        D&lt;--&gt;F\n        C&lt;--&gt;G\n        D&lt;--&gt;G\n    end</code></pre> <p>SeaTable consists of following component</p> <ul> <li>dtable-web: The website for manage bases.</li> <li>dtable-server: Store the bases and provide collaborating feature.</li> <li>dtable-db: Provide big data storage and SQL query interface.</li> <li>dtable-events: Background tasks likes email sending and so on.</li> <li>seaf-server: Store attachments (files and images).</li> <li>dtable-storage-server: An simple abstract layer upon file storage and S3-like object storage.</li> </ul> <p>Some explanation:</p> <ul> <li>MariaDB, Memcache, Redis are running in their own docker containers.</li> <li>Redis is used for sending messages from dtable-web/dtable-server to dtable-events</li> <li>All the components use Memcache for storing cache and MariaDB for storing permanent information</li> <li>Bases are maintained in dtable-server and periodically saved to dtable-storage-server for persistent storage.</li> <li>Attachments are saved in seaf-server, which save to file storage/object storage</li> </ul>"},{"location":"architecture/#seatable-backends","title":"SeaTable Backends","text":"<p>SeaTable has two different backends to provide on the one hand real-time collaboration in the base editor and at the same time is capable to store millions of rows in one single base.</p>"},{"location":"architecture/#json-based-collaborative-backend","title":"JSON based collaborative backend","text":"<p>The hearth of a SeaTable Server is the base editor, which allows real-time collaborative work in the browser.</p> <p>SeaTable stores the base data as json-files in the filesystem (and not in the database). When a user access the base, the json file is loaded into the memory and rendered by the dtable-server.</p> <p></p> <p>Every change of the base is stored in memory and also in an operation log in the mariadb. Every 5 minutes, dtable-server automatically saves all changes to the file system.</p> <p>In addition, the dtable-storage-server creates a snapshot of the base every 24 hours.</p> <p>Why not store base in Mariadb?</p> <p>In the first moment it sounds counter-intuitive that SeaTable saves the base data in a json file and not the database. The reason for that is that an SQL table is efficient in handling a huge amount of rows. The problem raises in the change of the database structure. Adding new columns, renaming columns, change column types in a table with hundred of thousand of rows it not efficient. Therefore the decision was made to persist the base data into json files instead of storing it directly in the database.</p> <p>The drawback of the real-time collaboration is that the base editor is limited</p>"},{"location":"architecture/#sql-like-big-data-backend","title":"SQL-like big data backend","text":"<p>The second backend is the so called Big Data backend. It is an SQL-like database which is capable to store millions of rows in a base. You have to activate the Big Data backend for a base and then a database structure is created for this base. More details about the Big Data backend will follow soon.</p>"},{"location":"dtable-server-license/","title":"EULA","text":"<p>End User License Agreement for dtable-server</p> <p>Version: September 2020</p>"},{"location":"dtable-server-license/#1-parties-and-subject-matter","title":"1. Parties and Subject Matter","text":"<ol> <li> <p>The provisions of this End User License Agreement (\"EULA\") govern the relationship between Seafile Ltd., GuiGuLiangCheng, Block 2B, #310, HaiDian District, Beijing, China (\"Seafile\") and end users (\"End Users\") (collectively the \"Parties\") with respect to the licensing by Seafile of the software dtable-server (\"Server\" of \"Software\").</p> </li> <li> <p>A License Agreement between the Parties pursuant to this EULA is concluded when the End User downloads the Server, alone or bundled with other software. IF YOU DO NOT AGREE TO THIS EULA, DO NOT DOWNLOAD, INSTALL AND USE THE SERVER. The same applies for the software with which the Server is bundled.</p> </li> </ol>"},{"location":"dtable-server-license/#2-changes-to-the-eula","title":"2. Changes to the EULA","text":"<p>Seafile is entitled to amend this EULA. SeaTable posts the amended EULA on the website https://seatable.io no less than two months before it becomes effective. The End User is therefore advised to visit this EULA regularly and to check for amendments. IF YOU DO NOT AGREE TO THE AMENDED EULA, QUIT USING THE SERVER AND UNINSTALL IT. The same applies for the software with which the Server is bundled.</p>"},{"location":"dtable-server-license/#3-product-specification-availability-and-updates","title":"3. Product Specification, Availability and Updates","text":"<ol> <li> <p>The Server is a software developed by Seafile. Its functions and its requirements are described on the website https://seatable.io; technical details are provided in the administrator manual. The Server can be used free of charge. </p> </li> <li> <p>The Server is made available to the End User by download, bundled with other software in the form of the application SeaTable Community Edition (\"SeaTable CE\"), of which the Server is a key component and without which SeaTable CE is not functional.  This applies for installation media as well as updates.</p> </li> <li> <p>The End User is responsible for installation and configuration. Seafile does not offer any kind of support for the Server nor has the End User any claim. Seafile and its affiliates operate a Community Forum at https://forum.seatable.io where End Users can help one another.</p> </li> <li> <p>Seafile will regularly release new versions of the Server. At its sole discretion, it may add/modify/remove functions and features and/or supported platforms. Seafile informs about new releases and associated changes on its blog and in the Community Forum. </p> </li> <li> <p>Seafile may also decide, at its discretion, to discontinue the development of the Server.</p> </li> <li> <p>Some functions and features of the Server may depend on third-party products and services, all of which may be subject to changes. As a consequence, Seafile may need to modify or limit functions and features of the Server.</p> </li> </ol>"},{"location":"dtable-server-license/#5-rights-of-use","title":"5. Rights of Use","text":"<ol> <li> <p>Seafile grants to the End User the non-exclusive, non-transferable and non-sublicensable right to install, run and use the Server to the extent granted by this EULA.</p> </li> <li> <p>The rights of use, granted under this EULA, are unlimited in time as long as the End User agrees to this EULA.</p> </li> <li> <p>Any use of the Server beyond the scope granted under this EULA is prohibited and may be prosecuted.</p> </li> <li> <p>The rights of use, granted pursuant to this EULA, do not include any rights to the source code of the Server.</p> </li> <li> <p>The rights, granted pursuant to this EULA, do not include and the End User is not entitled to and shall not allow a third party to (I) attempt to circumvent any technical measures and devices of the Server that are directed at, or have the effect of, enforcing this EULA and its terms; (II) modify, create derivative works, translate, decompile or create or attempt to create, by reverse engineering or otherwise, the source code of the Server;  (III) remove, modify or obscure any copyright, trademark, service mark or other proprietary rights, confidentiality, serial number, notice, legend or similar on any copy of the Server, or related data, manuals, documentation or other materials;  (IV) market, sell, lend, rent, lease or distribute the Server; (V) use the Server, on its own or as a part of another product and irrespective of the delivery model, for creating or providing a commercial service or a free public or de-facto public service; and (VI) assign, sublicense or otherwise transfer any rights in or to the Server.</p> </li> <li> <p>Seafile retains all right, title and interest in and to the Server (and any new versions thereof provided by Seafile) and in all copies, modifications and derivative works of the Server including, without limitation, all rights to patent, copyright, trade secret, trademark and other proprietary or intellectual property rights.</p> </li> </ol>"},{"location":"dtable-server-license/#6-documentation-and-interfaces","title":"6. Documentation and Interfaces","text":"<ol> <li>Seafile and its affiliates provide an online user and administrator manual in English on the website https://seatable.io. Any further languages may be offered by Seafile on a voluntary basis. </li> <li>Seafile retains all right, title and interest in and to such documentation and in all copies, modifications and derivative works thereof.</li> <li>The Server may, at Seafile's sole discretion, provide application programming interfaces or other software interfaces (collectively \"API\") that allow third-party or customer applications to communicate with the Server (collectively \"third-party software\"). Seafile may change or discontinue APIs at any time without any obligation or liability to the End User. The respective provider is responsible for the third-party software. The provisions of the EULA do not apply to any such third-party software. Under no circumstances is Seafile liable for any third-party software.</li> </ol>"},{"location":"dtable-server-license/#7-obligations-and-duties-of-the-end-user","title":"7. Obligations and Duties of the End User","text":"<ol> <li> <p>The End User is obliged to use the Server only in accordance with the provisions of this EULA and in accordance with laws and regulations applicable to such use and may not infringe on any third-party rights in connection with such use. The End User must, in particular, comply with all applicable data protection and export control provisions.</p> </li> <li> <p>The requirements for the Server are specified in the administrator manual. The End User familiarizes himself/hersef with these requirements prior to download, installation and use of the Server.</p> </li> <li> <p>The End User reports errors and bugs (\"Defects\") on the Community Forum. The report of any Defect must include</p> </li> <li> <p>a detailed description of the defect,</p> </li> <li>instructions to reproduce it,</li> <li>the relevant logs,</li> <li>the Software's version and</li> <li>the operating system and version. </li> </ol> <p>If a Defect occurred when accessing the Software via a browser, the report must additionally include</p> <ul> <li>browser type and version,</li> <li>screenshots of the defect and</li> <li>the content of browser console.</li> </ul>"},{"location":"dtable-server-license/#8-data-privacy","title":"8. Data Privacy","text":"<ol> <li> <p>Seafile collects, processes and uses personal data of the End User as described in detail in the Privacy Statement.</p> </li> <li> <p>Non-personal or anonymous data may be collected automatically to improve functionality and the user experience with the Server. The End User agrees that Seafile owns all rights in, and is free to use any such non-personal or anonymous data in any way it deems fit for development, diagnostic, corrective as well as marketing or any other purposes.</p> </li> </ol>"},{"location":"dtable-server-license/#9-limitation-of-liability","title":"9. Limitation of Liability","text":"<p>IN NO EVENT, UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING, WILL SEAFILE BE LIABLE TO END USERS FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY THE END USER OR THIRD PARTIES OR A FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SEAFILE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"dtable-server-license/#10-warranty-claims","title":"10. Warranty Claims","text":"<p>THERE IS NO WARRANTY FOR THE SERVER, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH THE END USER. SHOULD THE PROGRAM PROVE DEFECTIVE, THE END USER ASSUMES THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"dtable-server-license/#11-final-provisions","title":"11. Final Provisions","text":"<ol> <li> <p>Any notifications and declarations in connection with the EULA will be made through public announcements on the website https://seatable.io and/or the Community Forum at https://forum.seatable.io. The End User is responsible for checking these two sites regularly.</p> </li> <li> <p>The EULA and any disputes in connection with it are solely governed by, and construed in accordance with, the law of the People's Republic of China.</p> </li> <li> <p>The exclusive place of jurisdiction is Beijing, China. Seafile reserves the right to sue at the End User\u2019s head office.</p> </li> <li> <p>If a provision of the EULA is found to be partly or wholly invalid or unenforceable, this shall not affect the validity and enforceablity of the remaining providions of the EULA. In place of the invalid or unenforceable provision, a valid and enforceable provision shall apply which reflects as closely as possible the commercial intention of the parties as regards the invalid or unenforceable provision.</p> </li> </ol>"},{"location":"editions/","title":"SeaTable Server Editions","text":"<p>SeaTable Server has two editions for self hosting.</p> <ul> <li> <p>Enterprise Edition: almost no limitation for storage, row numbers and API calls and have advanced permissions and user management features. It is meant for large teams to use SeaTable in both ways. Users can use it in the cloud or self-hosted.</p> </li> <li> <p>Developer Edition: for users that want to use SeaTable as database and heavily using APIs and scripts. The developer edition has no limit on storage, row numbers and API calls, but can support at most 200 concurrent connections to dtable-server.</p> </li> </ul> <p>The components of SeaTable Developer Edition are released under the following licenses:</p> <ul> <li>dtable-web: Apache License v2</li> <li>dtable-events: Apache License v2</li> <li>dtable-server: Proprietary License</li> <li>seaf-server: AGPLv3</li> </ul> <p>SeaTable developer edition should not be used to provide SaaS service or as a part of your SaaS service. Other kinds of usage are okay, including</p> <ul> <li>Personal or home use</li> <li>Internal in-house use</li> <li>Collaboration with customers</li> <li>IT projects for customers, as long as a separate server is used for each customer</li> </ul> <p>The SeaTable Enterprise Edition is released under a proprietary license. You find the EULA at https://seatable.io/en/eula.</p> <p>Es gibt Enterprise vs Developer.</p> <p>Target Groups of both editions.</p>"},{"location":"get_support/","title":"Get support","text":"<p>Next to this administration manual there are more documentations available. To learn more about how to use SeaTable as a user, how to use the SeaTable API, the possibilities to develop your own plugins or scripts in SeaTable, please refer to their respective manuals:</p> <ul> <li>SeaTable User Manual</li> <li>SeaTable Developer Manual</li> <li>SeaTable API Reference</li> </ul> <p>See the official SeaTable channel on YouTube for tutorials, guides and overviews. Visit our blog for latest news and to learn more about what is going on in and around SeaTable.</p> <p>At any time you could have a look at the SeaTable Community Forum to share your experience with other users or report issues or bugs.</p> <p>Enterprise support</p> <p>If you're using SeaTable in your organization and need assistance, e.g., to digitalization of processes, develop custom solutions or improve efficiency, get in touch to discuss our enterprise support offerings.</p> <p>We're happy to help!</p>"},{"location":"requirements/","title":"Requirements","text":"<p>One of the main advantages of SeaTable against other solutions is, that you can run SeaTable on your own hardware or on any server your like. Still there are some requirements:</p> <ul> <li>Linux-Server with Root-Shell</li> <li>Public domain pointing to your server</li> <li>Open Ports for HTTP and HTTPS access (probably more ports for other components)</li> <li>The ports should not be already in use by another proxy such as NGINX or Apache</li> </ul> <p>Does this sounds complicated? Not really. So lets get started.</p> <p>Let's begin with the installation in the root-shell</p> <p>If you need more information, you can get more details in this article.</p>"},{"location":"requirements/#platform-support","title":"Platform support","text":"<p>SeaTable uses <code>docker</code> and <code>docker compose</code>. Therefore it should run as long as docker virtualisation is available. Still we recommend Debian 11 or newer because we always use Debian for production and testing.</p> <p>Currently only x86/x64 architecture is officially supported. Bigger customers might get support with ARM based systems.</p>"},{"location":"requirements/#hardware","title":"Hardware","text":"<p>SeaTable Server requires at least</p> <ul> <li>4 CPU cores</li> <li>8 GB RAM</li> <li>50 GB SSD</li> </ul> <p>These resources guarantee good performance for most applications with up to 100 users. When bases become large or the number of users increase, more RAM is needed since SeaTable stores the bases in memory. More CPU could help, but has much lower impact on system performance.</p> <p>As soon as you have more than 100 users, you should consider extending your SeaTable Platform and move some components to separate VMs.</p> <p>Additional components need additional ressources</p> <p>These hardware requirements are for SeaTable Server. If you install additional components like n8n, collabora online or onlyoffice the requirements for these ressources stack up and you have to add additional ressources.</p> <p>For sure we need a root shell on this server to execute the installation commands.</p>"},{"location":"requirements/#public-available-domain","title":"Public available domain","text":"<p>This manual assumes that you have one domain or subdomain that points to your public IP address of your server.</p> <pre><code>flowchart LR\n    A[User /\\nBrowser]\n    B[Domain / Subdomain\\nPorts 80+443]\n    C[Server or VM\\nwith Docker]\n    A--&gt;B\n    B--&gt;C</code></pre> <p>For sure, it is possible to run SeaTable without an internet connection (air-gapped) or with custom SSL certificates. This requires additional settings which are explained in separate chapters.</p>"},{"location":"requirements/#ports","title":"Ports","text":"<p>SeaTable needs by default only the default ports 80 (HTTP) and 443 (HTTPS).</p> <p>Most of the additional components will require additional ports in the range of 6230 to 6240. You have to open the firewall or create port forwardings if you want to use these functions. If you don't use this component, the port can stay closed.</p>"},{"location":"requirements/#list-of-required-ports","title":"List of required ports","text":"<ul> <li>80: HTTP access is necessary to receive a Let's Encrypt certificate</li> <li>443: HTTPS is the main entrance to SeaTable Server</li> </ul>"},{"location":"requirements/#list-of-optional-ports","title":"List of optional ports","text":"<ul> <li>6230: Uptime Kuma</li> <li>6231: n8n</li> <li>6232: Collabora Online</li> <li>6233: OnlyOffice</li> <li>6235: Zabbix</li> </ul>"},{"location":"requirements/#license","title":"License","text":"<p>SeaTable Enterprise Edition requires a license to start. A free license for two years and three users can be obtained at https://seatable.io/on-premises or via the command line, which will be explained during the installation. Licenses with more than three users can be obtained from SeaTable Sales. Just contact us and ask for a quote.</p> <p>SeaTable Developer Edition does not require a license.</p>"},{"location":"security/","title":"Security measures","text":""},{"location":"security/#web-security","title":"Web-Security","text":"<p>The default configuration of SeaTable is a good combination of best practies to improve the security without creating too many problems. HTTPS is required by default, modern ciphers are required and we enforce some security headers to prevent against typical script kiddies attacks.</p> <p>This configuration approach delivers good results like:</p> <ul> <li>A+ from https://www.ssllabs.com/</li> <li>A from https://securityheaders.com/</li> <li>100% from internet.nl (requires DNSSEC from your domain hoster)</li> <li>80/100 or B+ from https://observatory.mozilla.org/</li> </ul> <p>Secure cookies require additional configuration</p> <p>To get these ratings, it is required to add two more options to <code>dtable_web_settings.py</code>. In one of the next versions, these parameters will probably be added by default.</p> <pre><code>CSRF_COOKIE_SECURE = True\nSESSION_COOKIE_SECURE = True\n</code></pre>"},{"location":"security/#network-security","title":"Network security","text":"<ul> <li>Only one entry point. HTTPS. Only one internet facing container.</li> <li>Networks segration. Docker container only have the network, they need. Network for public access, backend access...</li> <li>Grafik hinzuf\u00fcgen.</li> </ul>"},{"location":"security/#security-scans","title":"Security scans","text":"<p>Up-to date container images. probably.com... Docker scout activated</p>"},{"location":"security/#documentation-support-and-source-code","title":"Documentation, Support and source code","text":"<p>For sure you can run any software product that just runs, but that is not our approach. Our goal is to build the world leading self-hosted no-code database and app building plattform. This includes also</p> <ul> <li>great documentation</li> <li>fast human support team</li> <li>source code available (except for parts where our intelectual property is not on risk)</li> <li>automatic testing and deployment processes</li> </ul>"},{"location":"authentication/auth_switch/","title":"Switch authentication type","text":"<p>SeaTable Server supports multiple authentication types. Switching between the types is possible, but any switch requires modifications of SeaTable's databases.</p> <p>Note</p> <pre><code>Before manually manipulating your database, make a database backup, so you can restore your system if anything goes wrong!\n</code></pre> <p>See more about make a database backup.</p>"},{"location":"authentication/auth_switch/#migrating-from-local-user-database-to-external-authentication","title":"Migrating from local user database to external authentication","text":"<p>As an organisation grows and its IT infrastructure matures, the migration from local authentication to external authentication like LDAP, SAML, OAUTH is common requirement. Fortunately, the switch is comparatively simple.</p>"},{"location":"authentication/auth_switch/#general-procedure","title":"General procedure","text":"<ol> <li>Configure and test the desired external authentication. Note the name of the <code>provider</code> you use in the config file. The user to be migrated should already be able to log in with this new authentication type, but he will be created as a new user with a new unique identifier, so he will not have access to his existing bases. Note the <code>uid</code> from the <code>social_auth_usersocialauth</code> table. Delete this new, still empty user again.</li> <li>Determine the <code>xxx@auth.local</code> address of the user to be migrated.</li> <li>Replace the password hash with an exclamation mark.</li> <li>Create a new entry in <code>social_auth_usersocialauth</code> with the <code>xxx@auth.local</code>, your <code>provider</code> and the <code>uid</code>.</li> </ol> <p>The login with the password stored in the local database is not possible anymore. After logging in via external authentication, the user has access to all his previous bases.</p>"},{"location":"authentication/auth_switch/#example","title":"Example","text":"<p>This example shows how to migrate the user with the username <code>12ae56789f1e4c8d8e1c31415867317c@auth.local</code> from local database authentication to SAML. The SAML authentication is configured in <code>dtable_web_settings.py</code> with the provider name <code>authentik-saml</code>. The <code>uid</code> of the user inside the Identity Provider is <code>HR12345</code>.</p> <p>This is what the database looks like before these commands must be executed:</p> <pre><code>mysql&gt; select email,left(passwd,25) from EmailUser where email = '12ae56789f1e4c8d8e1c31415867317c@auth.local';\n+---------------------------------------------+------------------------------+\n| email                                       | left(passwd,25)              |\n+---------------------------------------------+------------------------------+\n| 12ae56789f1e4c8d8e1c31415867317c@auth.local | PBKDF2SHA256$10000$4cdda6... |\n+---------------------------------------------+------------------------------+\n\nmysql&gt; update EmailUser set passwd = '!' where email = '12ae56789f1e4c8d8e1c31415867317c@auth.local';\n\nmysql&gt; insert into social_auth_usersocialauth \\\n  (`username`, `provider`, `uid`) \\\n  set \\\n  ('12ae56789f1e4c8d8e1c31415867317c@auth.local', 'authentik-saml', 'HR12345');\n</code></pre> <p>Afterwards the databases should look like this:</p> <pre><code>mysql&gt; select email,passwd from EmailUser where email = '12ae56789f1e4c8d8e1c31415867317c@auth.local';\n+---------------------------------------------+------- +\n| email                                       | passwd |\n+---------------------------------------------+--------+\n| 12ae56789f1e4c8d8e1c31415867317c@auth.local | !      |\n+---------------------------------------------+--------+\n\nmysql&gt; select username,provider,uid from social_auth_usersocialauth where username = '12ae56789f1e4c8d8e1c31415867317c@auth.local';\n+---------------------------------------------+----------------+---------+\n| username                                    | provider       | uid     |\n+---------------------------------------------+----------------+---------+\n| 12ae56789f1e4c8d8e1c31415867317c@auth.local | authentik-saml | HR12345 |\n+---------------------------------------------+----------------+---------+\n</code></pre>"},{"location":"authentication/auth_switch/#migrating-from-one-external-authentication-to-another","title":"Migrating from one external authentication to another","text":"<p>First configure the two external authentications and test them with a dummy user. Then, to migrate all the existing users you only need to make changes to the <code>social_auth_usersocialauth</code> table. No entries need to be deleted or created. You only need to modify the existing ones. The <code>xxx@auth.local</code> remains the same, you only need to replace the <code>provider</code> and the <code>uid</code>.</p>"},{"location":"authentication/auth_switch/#migrating-from-external-authentication-to-local-user-database","title":"Migrating from external authentication to local user database","text":"<p>First, delete the entry in the <code>social_auth_usersocialauth</code> table that belongs to the particular user.</p> <p>Then you can reset the user's password, e.g. via the web interface. The user will be assigned a local password and from now on the authentication against the local database of SeaTable will be done.</p>"},{"location":"authentication/auth_switch/#use-ldap-and-saml-together","title":"Use LDAP and SAML together","text":"<p>SeaTable supports since version 3.5 to use SAML and LDAP together for one user. To activate this function the following configuration has to be set in <code>dtable_web_settings.py</code>.</p> <pre><code># Enable that SAML and LDAP use the same username\nLDAP_SAML_USE_SAME_UID = True\n</code></pre> <p>More details about this option will follow soon.</p>"},{"location":"authentication/jwt/","title":"JSON Web Tokens","text":"<p>JSON Web Tokens (=JWT) is another authentication type SeaTable provides. It is used by the SeaTable API but it can also be used to allow server-to-server authentication. JWTs are used for example if you switch from (SeaTable Cloud)[https://cloud.seatable.io] to the (team administration)[https://account.seatable.io] without the need to re-authenticate. </p>"},{"location":"authentication/jwt/#what-is-jwt","title":"What is JWT?","text":"<p>JWT is a very popular technology but comes with its share of controversy. Some say you should never use it. Others say JWT authentication is amazing. We think that JWT can be very helpful in some specific scenarios. If you want to know more aboout JWT, please read this article. </p> <p>Here is a short introduction into JWT:</p> <ul> <li>JWT is an encoded and cryptographically signed URL, that contains an json object.</li> <li>This json object can contain any kind and amount of data. </li> <li>When a server receives this JWT it can guarantee the data it contains can be trusted because it's signed (not encrypted).</li> <li>Both parties (sender and receiver) must know a shared secret that is used to sign the JWT request.</li> </ul>"},{"location":"authentication/jwt/#how-to-configure-and-use-jwt","title":"How to configure and use JWT?","text":"<p>To enable the login with JWTs you have to define a secret key in your <code>dtable_web_settings.py</code> and restart the SeaTable service: <pre><code>SSO_SECRET_KEY = 'your-shared-secret-like-a38B232XQJLx392871#2DEF_dowfWE#_39dwefidWFwLw39fDFEF='\n</code></pre></p> <p>Afterwards SeaTable allows the login with the following URL <code>https://cloud.seatable.io/sso-auto-login/?token=...</code>. </p> <p>The token is the encoded json object with these elements:</p> <pre><code>{\n    \"exp\": \"1682582542\",\n    \"user_id\": \"b7bd00e840a14b748ce2bffdf409488b@auth.local\"\n}\n</code></pre>"},{"location":"authentication/jwt/#examples-how-to-use-jwt-and-generate-the-login-link","title":"Examples how to use JWT and generate the login-link","text":"<p>Every programming language offers libraries to sign JWTs. A good place to start looking for such a library is (https://jwt.io/libraries)[https://jwt.io/libraries].</p> <p>Here is an example with PHP and the (firebase-library)[https://github.com/firebase/php-jwt]:</p> <pre><code>// This code generates an URL to login as the user defined in user_id.\n// The URL is valid for 30 seconds.\n// After successful login, the user jumps to $url_next. \n\n$url_next = \"/\"\n$jwt_signing_key = \"your-shared-secret\"\n$payload = [\n    \"exp\" =&gt; time() + 30,\n    \"user_id\" =&gt; \"b7bd00e840a14b748ce2bffdf409488b@auth.local\",\n];\n$jwt = \\Firebase\\JWT\\JWT::encode($payload, $jwt_signing_key, 'HS256');\n$jwt_url = 'https://cloud.seatable.io/sso-auto-login/?token='. rawurlencode($jwt) . $url_next;\necho $jwt_url;\n</code></pre> <p>Other examples can be found here:</p> <ul> <li>Vue and Node.js</li> <li>Python</li> </ul>"},{"location":"authentication/ldap/","title":"LDAP","text":"<p>Lightweight Directory Access Protocol (LDAP) is is an open, vendor-neutral, industry standard application protocol for accessing and maintaining distributed directory information services. Microsoft's Active Directory (AD) is fully compatible with LDAP. For simplicity, this Manual refers to LDAP and AD when using the term LDAP unless explicitly stated otherwise.</p> <p>This document assumes that you have a basic understanding of LDAP and that you understand the related terminology.</p>"},{"location":"authentication/ldap/#ldap-integration-in-seatable","title":"LDAP integration in SeaTable","text":"<p>SeaTable supports two modes of operation with LDAP:</p> <ul> <li>LDAP authentication: SeaTable uses the LDAP Server for user authentication.</li> <li>LDAP synchronisation: SeaTable syncs users and groups with the LDAP server regularly.</li> </ul> <p>Regardless of the mode of operation used, SeaTable requires each user in the LDAP server to have a unique ID.</p> <p>Additionally, LDAP in SeaTable can be configured to work seamlessly with SAML.</p>"},{"location":"authentication/ldap/#ldap-authentication","title":"LDAP Authentication","text":"<p>To enable LDAP Authentication (LDAP Auth), add the following parameters to <code>dtable_web_settings.py</code>, customize to your environment, and restart the SeaTable service:</p> Parameter Description Values ENABLE_LDAP On/off switch for authentication via LDAP <code>True</code> or <code>False</code> LDAP_PROVIDER Internal name to refer to LDAP as authentication type Alphanumeric string, e.g. 'ldap' LDAP_SERVER_URL URL of the LDAP server and port if non-standard URL, e.g. 'ldap://192.168.0.10:389' LDAP_BASE_DN DN of the root node used for querying users - all users under this node can log in LDAP DN LDAP_ADMIN_DN DN of the user used for querying the LDAP server - user must have the rights to access all information under LDAP_BASE_DN For LDAP: LDAP DNFor AD: LDAP DN or email LDAP_ADMIN_PASSWORD User password for LDAP_ADMIN_DN user Alphanumeric string LDAP_USER_UNIQUE_ID Unique user ID in the LDAP server For LDAP: 'EntryUUID'For AD: 'ObjectGUID' LDAP_LOGIN_ATTR User attribute used for logging in 'mail', 'userPrincipalName' or 'sAMAccountName' <p>This is a simple sample configuration:</p> <pre><code>ENABLE_LDAP = True\nLDAP_PROVIDER = 'ldap'\nLDAP_SERVER_URL = 'ldap://192.168.0.10'\nLDAP_BASE_DN = 'ou=test,ou=test,dc=example,dc=com'\nLDAP_ADMIN_DN = 'administrator@example.com'\nLDAP_ADMIN_PASSWORD = 'secret'\nLDAP_USER_UNIQUE_ID = 'ObjectGUID'\nLDAP_LOGIN_ATTR = 'mail'\n</code></pre> <p>Some tips on how to select LDAP_BASE_DN and LDAP_ADMIN_DN:</p> <ul> <li>To determine your LDAP_BASE_DN attribute, you first need to open the graphical interface of the domain manager and browse your organizational structure.</li> <li>If you want all users in the system to be able to access SeaTable, you can use 'cn=users,dc=yourdomain,dc=com' as the BASE option (need to replace your domain name).</li> <li>If you only want people in a certain department to be able to access, you can limit the scope to a certain OU. You can use the <code>dsquery</code> command-line tool to find the DN of the corresponding OU. For example, if the name of the OU is <code>staffs</code>, you can run <code>dsquery ou -name staff</code>. More information can be found here.</li> <li>Although AD supports the use of usernames in email address format as <code>LDAP_ADMIN_DN</code> such as administrator@example.com, it sometimes does not correctly recognize this format. At this point, you can use <code>dsquery</code> to find the DN of the user. For example, if the username is <code>seatableuser</code>, run <code>dsquery user -name seatableuser</code> to find the user. More information can be found here.</li> </ul> <p>The following parameters are also available, but optional:</p> Parameter Description Values LDAP_FILTER Filter for users who can log in, e.g. a certain security group LDAP filter, e.g. 'memberOf=CN=group,CN=developers,DC=example,DC=com' LDAP_GROUP_FILTER LDAP_USER_ROLE_ATTR Name of user role in the LDAP server Attribute name, e.g. <code>title</code> LDAP_USER_FIRST_NAME_ATTR First part of the user's SeaTable nickname when nickname is spliced; default value is '' Attribute name, e.g. <code>givenName</code> LDAP_USER_LAST_NAME_ATTR Second part of the user's SeaTable nickname when nickname is spliced; default value is '' Attribute name, e.g. <code>sn</code> LDAP_USER_NAME_REVERSE Option to reverse order of first name and last name f spliced nickname; default value is <code>False</code> <code>True</code>or <code>False</code> LDAP_SAML_USE_SAME_UID Option to allow users to log in via LDAP and SAML using the same username <code>True</code>or <code>False</code> LDAP_CONTACT_EMAIL_ATTR Alternative attribute as a mail address when LDAP_LOGIN_ATTR is not <code>mail</code>; the attribute overrides the email address imported through LOGIN_ATTR; default value is '' <p>To enable LDAP authentication via SASL, add the following parameters to <code>dtable_web_settings.py</code>:</p> Parameter Description Values ENABLE_SASL On/off switch for LDAP authentication via SASL <code>True</code> or <code>False</code> SASL_MECHANISM SASL mechanism configured on LDAP server SASL mechanism, e.g. <code>DIGEST-MD5</code>, <code>CRAM-MD5</code>, <code>GSSAPI</code>, <code>Plain</code> SASL_AUTHC_ID_ATTR User attribute used for authentication identity mapping Attribute name, e.g. <code>uid</code>, <code>cn</code>"},{"location":"authentication/ldap/#ldap-synchronisation","title":"LDAP Synchronisation","text":"<p>To enable LDAP synchronisation (LDAP Sync), LDAP Auth must be configured and the following parameters added to <code>dtable_web_settings</code>:</p> Parameter Description Values LDAP_SYNC_GROUP On/off switch for group sync <code>True</code>or <code>False</code> LDAP_GROUP_MEMBER_ATTR Attribute used when syncing group members For most directory servers, the attributes is \"member\", which is the default value. For \"posixGroup\", it should be set to \"memberUid\". LDAP_GROUP_MEMBER_UID_ATTR User attribute set in 'memberUid' option, which is used in \"posixGroup\"; default value is <code>uid</code> LDAP_USER_OBJECT_CLASS Name of the class used to search for user objects; default value is <code>person</code> LDAP_GROUP_OBJECT_CLASS Name of the class used to search for group objects; default value is <code>group</code> For LDAP: <code>groupOfNames</code>, <code>groupOfUniqueNames</code>, <code>posixGroup</code>For AD: <code>group</code> LDAP_GROUP_UUID_ATTR ...; default value is <code>ObjectGUID</code> For LDAP: refer to https://ldapwiki.com/wiki/Universally%20Unique%20IdentifierFor AD: <code>ObjectGUID</code> SYNC_GROUP_AS_DEPARTMENT Option to sync LDAP groups as departments rather than SeaTable groups <code>True</code>or <code>False</code> LDAP_DEPARTMENT_NAME_ATTR Name of the department when SYNC_GROUP_AS_DEPARTMENT = True, the default department name is the OU name Object name, e.g. <code>description</code> <p>Additionally, the following parameters must be added to <code>dtable-events.conf</code>:</p> <pre><code>[LDAP_SYNC]\nenabled = true\nsync_interval = 60  # The unit is seconds\n</code></pre>"},{"location":"authentication/ldap/#ldap-and-saml","title":"LDAP and SAML","text":"<p>In some situations, it is useful to configure LDAP - especially LDAP Sync - and SAML as authentication providers. In this case, SeaTable must be prevented from creating two different users (as identified by the <code>username</code>) for one and the same <code>uid</code>when the person authenticates via LDAP and SAML, which would be the default behavior.</p> <p>Add the following parameter to <code>dtable_web_settings.py</code> to instruct SeaTable to use the same <code>username</code> no matter if a user (as identified by its <code>uid</code>) authenticates via LDAP or SAML.</p> <pre><code>LDAP_SAML_USE_SAME_UID = True\n</code></pre> <p>When enabled, SeaTable creates an additional record for the authenticating user in social_auth_usersocialauth when the user logs in using LDAP. This record maps the <code>username</code> to the <code>uid</code> for the SAML provider.</p>"},{"location":"authentication/oauth/","title":"OAuth","text":"<p>First, register the Client App on the OAuth authorization server (such as Github), remember the Client ID and Client Secret, and set the Redirect Uri (Authorization callback URL in Github).</p> <p>Add the following configuration to dtable_web_settings.py:</p> <pre><code>ENABLE_OAUTH = True\nOAUTH_ENABLE_INSECURE_TRANSPORT = True\nOAUTH_PROVIDER_DOMAIN = 'github.com'\nOAUTH_CLIENT_ID = \"wd529b3b2ae8320e06fr\"\nOAUTH_CLIENT_SECRET = \"8159c3dcc8ef197cc3bbd94ff6cf101c93ba6d8r\"\nOAUTH_REDIRECT_URL = 'https://test.seatable.cn/oauth/callback/'\nOAUTH_AUTHORIZATION_URL = 'https://github.com/login/oauth/authorize'\nOAUTH_TOKEN_URL = 'https://github.com/login/oauth/access_token'\nOAUTH_USER_INFO_URL = 'https://api.github.com/user'\nOAUTH_SCOPE = [\"user\",]\nOAUTH_ATTRIBUTE_MAP = {\n    \"id\": \"uid\",\n    \"name\": \"name\",\n    \"email\": \"contact_email\",\n}\n</code></pre> <p>The meaning of configuration option is as follows:</p>"},{"location":"authentication/oauth/#enable_oauth_insecure_transport","title":"ENABLE_OAUTH_INSECURE_TRANSPORT","text":"<p>If https is not configured, you can add it in dtable_web_settings.py <code>ENABLE_OAUTH_INSECURE_TRANSPORT = True</code>\u3002</p> <p>See more in https://requests-oauthlib.readthedocs.io/en/latest/examples/examples.html</p> <p>note:</p> <p>If you use Google OAuth2 login, the OAUTH_SCOPE configuration should be configured as follows: <pre><code>OAUTH_SCOPE = [\"openid\", \"https://www.googleapis.com/auth/userinfo.email\", \"https://www.googleapis.com/auth/userinfo.profile\"]\n</code></pre></p>"},{"location":"authentication/oauth/#oauth_provider","title":"OAUTH_PROVIDER","text":"<p>SeaTable uses this configuration to distinguish OAuth from other login methods\uff0csuch as: github.com.</p>"},{"location":"authentication/oauth/#oauth_redirect_url","title":"OAUTH_REDIRECT_URL","text":"<p>The Redirect URL, Authorization callback URL in Github, such as: https://test.seatable.cn/oauth/callback/</p>"},{"location":"authentication/oauth/#oauth_authorization_urloauth_token_urloauth_user_info_urloauth_scope","title":"OAUTH_AUTHORIZATION_URL\u3001OAUTH_TOKEN_URL\u3001OAUTH_USER_INFO_URL\u3001OAUTH_SCOPE","text":"<p>Set these values according to the document of OAuth provider, for GitHub, please check https://docs.github.com/en/developers/apps/authorizing-oauth-app</p>"},{"location":"authentication/oauth/#oauth_attribute_map","title":"OAUTH_ATTRIBUTE_MAP","text":"<p>The correspondence between the user fields obtained from the OAuth authorization server and the user fields in SeaTable.</p> <ul> <li>uid: the unique identifier for SeaTable identify a user from the OAuth provider.</li> <li>name: the name of a user in SeaTable</li> <li>contact_email: a user's contact email in SeaTable</li> </ul>"},{"location":"authentication/overview/","title":"Authentication","text":"<p>SeaTable Server Enterprise Edition (SeaTable) supports multiple authentication types.</p> <p>The default authentication type is authentication against the local user database (with or without two-factor authentication).</p> <p>Additionally, SeaTable supports the following external authentication types:</p> <ul> <li>LDAP (Auth and Sync)</li> <li>OAuth</li> <li>SAML</li> </ul> <p>Finally, users can also authenticate using JWT, which may be interesting for some special use cases.</p>"},{"location":"authentication/overview/#username","title":"Username","text":"<p>SeaTable assigns every user a unique <code>username</code>, regardless of the authentication type used. The <code>username</code> serves as a key to link the different SQL database tables.</p> <p>The <code>username</code> looks like this: <code>b7bd00e840a14b748ce2bffdf409488b@auth.local</code> The corresponding regular expression is <code>^[a-f0-9]{32}(@auth.local)$</code>. The part of the username in front of the @-sign is a random value. If a user account is deleted and recreated with exactly the same details, the new <code>username</code> will be different from the previous one.</p> <p>The <code>username</code> is generated when the account is created. The time at which SeaTable creates the account in the database depends on the authentication type:</p> <ul> <li>Local user database: when the administrator registers the user or when the user self-registers</li> <li>LDAP Auth, OAuth, and SAML: when the user logs in for the first time</li> <li>LDAP Sync: when the sync job runs for the first time after the corresponding modification in the LDAP directory</li> </ul> <p>One username - multiple names</p> <p>For historical reasons, the SQL database tables use non-uniform names for <code>username</code>. In some tables, <code>username</code> is simply <code>user</code>. In some others, it goes by the name of <code>email</code> or <code>virtual_id</code>. Despite the inconsistent naming, it is always the same object. In the SeaTable Manual, only <code>username</code> is used unless reference is made to a specific table column.</p>"},{"location":"authentication/overview/#database-structure","title":"Database Structure","text":"<p>SeaTable's databases encompass almost 100 tables. Four of those are relevant for user management and authentication. (Tables related to 2FA are disregarded in this document.)</p> Database Table ccnet_db EmailUser dtable_db profile_profile dtable_db social_auth_usersocialauth dtable_db id_in_org_tuple <p>Note: The table LDAPUsers in ccnet_db is no longer used.</p> <p>The database tables shown in the following sections are for illustrative purposes only. Yet, they represent a possible system configuration and are internally consistent.</p>"},{"location":"authentication/overview/#table-emailuser","title":"Table EmailUser","text":"<p>The table EmailUser stores all user accounts of a SeaTable Server with the account status and privileges for every user account. Additionally, the table also contains the (hashed) passwords for all users that authenticate directly against SeaTable.</p> <pre><code>mysql&gt; select email,is_staff,is_active,left(passwd,25) from ccnet_db.EmailUser;\n+---------------------------------------------+----------+-----------+---------------------------+\n| email                                       | is_staff | is_active | left(passwd,20)           |\n+---------------------------------------------+---------------------------+----------+-----------+\n| b7bd00e840a14b748ce2bffdf409488b@auth.local |        1 |         1 | PBKDF2SHA256$10000$4cd... |\n| 12ae56789f1e4c8d8e1c31415867317c@auth.local |        0 |         1 | PBKDF2SHA256$10000$736... |\n| 145504ae043c438cbb55f2afb084d586@auth.local |        0 |         1 | !                         |\n| 91e3f171e9214b0cab6418abfb70bc53@auth.local |        0 |         1 | !                         |\n| 1a8d6725c4ae40c688b40028fd62c73f@auth.local |        0 |         1 | !                         |\n+---------------------------------------------+---------------------------+----------+-----------+\n</code></pre> <p><code>is_staff</code> determines whether the user has system administrator privileges. <code>is_staff</code> accepts only 0 (False) and 1 (True) as values.</p> <p><code>is_active</code> determines whether the user is active. Only active users can log into SeaTable. <code>is_active</code> also accepts only 0 (False) and 1 (True) as values.</p> <p>Users with a password in the local SQL database:</p> <p>SeaTable stores the passwords in the database as hash values. Every password hash starts with <code>PBKDF2SHA256$10000$</code> which means that the password was hashed using the PBKDF2SHA256 algorithm and that 10.000 iterations where used (more about PBKDF2 on Wikipedia).</p> <p>The first two users in the sample table above are users using the default authentication type. The first of the two is system administrator.</p> <p>External authentication:</p> <p>A <code>!</code> instead of a hash value means that the user uses external authentication. The table, however, does not contain the information of which authentication type.</p> <p>The last three users in the sample table above are users authenticating using either LDAP, OAuth, or SAML.</p>"},{"location":"authentication/overview/#table-profile_profile","title":"Table profile_profile","text":"<p>The table <code>profile_profile</code>, as the name indicates, contains profile information for every user in the system such as nickname, interface language, and contact email address. Every record in the table <code>EmailUser</code> has its correspondence in <code>profile_profile</code>.</p> <pre><code>mysql&gt; select user,nickname,lang_code,contact_email,login_id from dtable_db.profile_profile;\n+---------------------------------------------+--------------+-----------+-------------------+----------+\n| user                                        | nickname     | lang_code | contact_email     | login_id |\n+---------------------------------------------+--------------+-----------+-------------------+----------+\n| b7bd00e840a14b748ce2bffdf409488b@auth.local | admin        | en        | admin@seatable.io | NULL     |\n| 12ae56789f1e4c8d8e1c31415867317c@auth.local | Test         | en        | test@seatable.io  | NULL     |\n| 145504ae043c438cbb55f2afb084d586@auth.local | Hulk         | en        | hulk@seatable.io  | hulk     |\n| 91e3f171e9214b0cab6418abfb70bc53@auth.local | Tony Stark   | en        | tony@seatable.io  | tony     |\n| 1a8d6725c4ae40c688b40028fd62c73f@auth.local | Steve Rogers | en        | steve@seatable.io | steve    |\n+---------------------------------------------+--------------+-----------+----------+-------------------+\n</code></pre> <p><code>nickname</code> is the display name of the user in the web interface of SeaTable.</p> <p><code>contact_email</code> is the real email address of the user. SeaTable sends notifications to this address.</p> <p><code>login_id</code> is an alternative to the username that the user can use to log in. The <code>login_id</code> can only be set via SeaTable API and not in system administration in SeaTable's web interface.</p> <p>Three valid combos for default authentication</p> <p>Users authenticating against the local database can use the following three combinations to login: \\1) <code>contact_email</code> + <code>password</code> \\2) <code>login_id</code> + <code>password</code> \\3) <code>username</code> + <code>password</code></p>"},{"location":"authentication/overview/#table-social_auth_usersocialauth","title":"Table social_auth_usersocialauth","text":"<p>The table <code>social_auth_usersocialauth</code> is critical for external authentication with LDAP, SAML, or OAuth. This table maps the user's SeaTable username to its unique identifiers from the identity providers. Every record in the table <code>EmailUser</code> without a password must have at least one correspondence in this table to be able to log into SeaTable using external authentication.</p> <pre><code>mysql&gt; select username,provider,uid from dtable_db.social_auth_usersocialauth;\n+---------------------------------------------+----------------+--------------------------------------+\n| username                                    | provider       | uid                                  |\n+---------------------------------------------+----------------+--------------------------------------+\n| 145504ae043c438cbb55f2afb084d586@auth.local | OAuth          | 877e1964-5585-4e1a-b069-1951ff79d373 |\n| 91e3f171e9214b0cab6418abfb70bc53@auth.local | Authentik-SAML | 28347@authentik                      |\n| 1a8d6725c4ae40c688b40028fd62c73f@auth.local | my-ldap        | 39731673920273                       |\n+---------------------------------------------+----------------+--------------------------------------+\n</code></pre> <p><code>provider</code> specifies the external authentication used. The name shown in this column is the name specified in the configuration of the external authentication source in<code>dtable_web_settings.py</code>.</p> <p><code>uid</code> in this table is the unique identifier as communicated by the external authentication service. The <code>uid</code> has to be provided by the external authentication method and allows to match the users from the external service with the users inside SeaTable. This <code>uid</code> must not be changed over the lifetime of the user (despite name, email address, ... changes) If the <code>uid</code> changes, SeaTable considers the user as a new user and creates a new <code>username</code> accordingly.</p>"},{"location":"authentication/overview/#table-id_in_org_tuple","title":"Table id_in_org_tuple","text":"<p>This table stores the user IDs. Because setting a user ID is optional, this table can be significantly shorter than all the other three tables.</p> <pre><code>mysql&gt; select * from dtable_db.id_in_org_tuple;\n+---------------------------------------------+-----------+--------+\n| virtual_id                                  | id_in_org | org_id |\n+---------------------------------------------+-----------+--------+\n| b7bd00e840a14b748ce2bffdf409488b@auth.local | 21        |     -1 |\n| 145504ae043c438cbb55f2afb084d586@auth.local | 222       |     12 |\n| 91e3f171e9214b0cab6418abfb70bc53@auth.local | 333AZE    |     34 |\n| 1a8d6725c4ae40c688b40028fd62c73f@auth.local | EF_3479   |     -1 |\n+---------------------------------------------+-----------+--------+\n</code></pre> <p><code>id_in_org</code> is the ID of the user. The user ID can be an alphanumeric string and must be unique within every team/organization.</p> <p><code>org_id</code> is the id of the team/organization which is unique in the system. An <code>org_id</code> value of -1 signifies that the user does not belong to any team/organization.</p>"},{"location":"authentication/saml/","title":"SAML","text":"<p>Security Assertion Markup Language (SAML) is an open standard for exchanging authentication and authorization data between parties. An important use case of SAML is web-browser single sign-on (SSO).</p> <p>This document assumes that you have a basic understanding of SAML and that you understand the related terminology.</p> <p>Recent</p> <pre><code>SeaTable's SAML configuration has undergone substantial changes in SeaTable 3.5. It is highly recommended to update to SeaTable 3.5 or younger if you use SAML. The SAML configuration in prior versions is no longer included in this document. You can still find it in Github.\n</code></pre>"},{"location":"authentication/saml/#sso-with-saml-in-seatable","title":"SSO with SAML in SeaTable","text":"<p>SeaTable supports SSO with SAML. Specifically, SeaTable supports SAML's IdP-init and SP-init authentication flows.</p> <p>Besides basic authentication and authorization, SeaTable's SAML implementation also allows to have additional attributes be set by the IdP. Specifically, the following five attributes are supported:</p> Attribute Description Stored in database table ... in column uid Unique identifier from the IdP dtable_db.social_auth_usersocialauth uid contact_email Email address of the user dtable_db.profile_profile contact_email name Name of the user dtable_db.profile_profile nickname employee_id User ID dtable_db.id_in_org_tuple id_in_org user_role Name of the role ccnet_db.UserRole role <p>SeaTable also supports the side-by-side configuration of SAML and LDAP. For more information, see LDAP.</p>"},{"location":"authentication/saml/#configuration","title":"Configuration","text":"<p>The SAML configuration proceeds in two phases:</p> <ol> <li>IdP: You create a new application in your IdP and configure the application. The IdP-side configuration is concluded with the download of the IdP's signing certificate.</li> <li>SeaTable: You upload the certificate and configure SAML in the config file <code>dtable_web_settings.py</code></li> </ol> <p>SeaTable's SAML configuration must be done manually on the command line. SeaTable does not provide a graphic wizard for configuring SAML. SeaTable cannot be configured by uploading the IdP's <code>metadata.xml</code>.</p> <p>Due to the large number of identity and access management (IAM) solutions, this document explains the SeaTable's SAML SSO configuration in general terms in the rest of this section and showcases the procedure using Microsoft Azure AD (Azure) as one example. (Additional IAM solutions may be added in the future.)</p>"},{"location":"authentication/saml/#creating-and-configuring-a-new-application-in-the-idp","title":"Creating and configuring a new application in the IdP","text":"<p>Add a new application in the IdP and assign at least one user to this application.</p> <p>The configuration of SSO with SAML for the just created application involves adding SeaTable's SAML URLs as well as specifying the SAML attributes. The following table contains the relevant URLs in generalized form. Replace <code>&lt;YOUR_SEATABLE_SERVER_HOSTNAME&gt;</code> with the fully qualified domain name (FQDN) of your SeaTable Server.</p> Type URL Metadata URL <code>https://&lt;YOUR_SEATABLE_SERVER_HOSTNAME&gt;/saml/metadata/</code> Assertion consumer service (ACS) URL <code>https://&lt;YOUR_SEATABLE_SERVER_HOSTNAME&gt;/saml/acs/</code> Service URL <code>https://&lt;YOUR_SEATABLE_SERVER_HOSTNAME&gt;/</code>"},{"location":"authentication/saml/#downloading-the-certificate-from-the-idp","title":"Downloading the certificate from the IdP","text":"<p>After creating and configuring the application, download the IdP's signing certificate in PEM format. If the certificate cannot be downloaded in PEM format, download the metadata.xml instead and extract the certificate file from there. The content in the \\&lt;\\&lt;xxx:X509Certificate&gt;&gt; tag contains the certificate.</p> <p>Also note the URL for the IdP's metadata.xml.</p>"},{"location":"authentication/saml/#uploading-the-idps-certificate-to-seatable","title":"Uploading the IdP's certificate to SeaTable","text":"<p>The IdP's certificate must be saved on the SeaTable Server. The volume of the SeaTable container is the right place. When saved there, the certificate can be used in different SeaTable Docker containers, e.g. when a new container is created during an update.</p> <p>The default host path for the SeaTable Docker container is <code>/opt/seatable/seatable-data/</code> which is mapped to <code>/shared/</code> in the container. It is recommended to create a directory here. If you decide to create the directory elsewhere - which you can - you'll need to account for the custom path in the following steps.</p> <pre><code>$ mdkir /opt/seatable/seatable-data/certs/\n</code></pre> <p>Change into the directory, create a file idp.crt, and open the file with a text editor of your choice (here nano):</p> <pre><code>$ cd /opt/seatable/seatable-data/certs/\n$ touch idp.crt\n$ nano idp.crt\n</code></pre> <p>Paste the content of the certificate in the text editor and save the edits.</p> <p>Note: You can check the validity of the certificate file using openssl:</p> <pre><code>$ openssl x509 -in idp.crt -noout -dates\n</code></pre>"},{"location":"authentication/saml/#creating-seatables-certificate-and-key","title":"Creating SeaTable's certificate and key","text":"<p>Create SeaTable's certificate and key using openssl. The two files must be placed in the same directory as the IdP's certificate.</p> <pre><code>$ cd /opt/seatable/seatable-data/certs/\n$ openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout sp.key -out sp.crt\n</code></pre> <p>Once the command has finished, the directory contains three files: <code>idp.crt</code>, <code>sp.crt</code>, and <code>sp.key</code>.</p>"},{"location":"authentication/saml/#modifying-the-config-file-in-seatable","title":"Modifying the config file in SeaTable","text":"<p>To enable SAML, add the following parameters to <code>dtable_web_settings.py</code>, customize the values to your environment, and restart the SeaTable service:</p> Parameter Description Values ENABLE_SAML On/off switch for authentication via SAML <code>True</code> or <code>False</code> SAML_PROVIDER_IDENTIFIER Name for SAML provider used internally by SeaTable Alphanumeric string, e.g. \"Azure\", \"Auth0\" or \"Authentik\" SAML_REMOTE_METADATA_URL URL of metadata.xml used by SAML IdP URL, e.g. 'https://login.microsoftonline.com/xxx/federationmetadata/2007-06/federationmetadata.xml?appid=xxx' SAML_ATTRIBUTE_MAP Key-value pairs mapping SAML attributes to local attributes Keys are the SAML attributes from the IdP; some IdPs use attribute like 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress' SAML_CERTS_DIR Path to certificates within the Seatable Docker container Path, e.g. /opt/seatable/seahub-data/certs <p>This is a sample configuration. Adapt the values to your needs.</p> <pre><code>ENABLE_SAML = True\nSAML_PROVIDER_IDENTIFIER = 'MySAMLProvider'\nSAML_REMOTE_METADATA_URL = 'https://login.microsoftonline.com/xxx/federationmetadata/2007-06/federationmetadata.xml?appid=xxx'\nSAML_ATTRIBUTE_MAP = {\n    'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/uid': 'uid',\n    'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress': 'contact_email',\n    'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name': 'name',\n}\nSAML_CERTS_DIR = '/opt/seatable/seahub-data/certs'\n</code></pre> <p>Details</p> <pre><code>The `SAML_ATTRIBUTE_MAP` defines the values provided by the IdP that SeaTable uses to create a user or update the user's profile.\nKey is the uid which is the unique identifier from the identity providers (not the username within SeaTable). The value of the uid should never change over the life cycle of the user. If you choose the email address as uid and the address changes, SeaTable will create a new user the next time the user logs in.\n</code></pre>"},{"location":"authentication/saml/#testing","title":"Testing","text":"<p>A restart of the SeaTable service to activate the configuration settings.</p> <pre><code># docker exec -it seatable bash\n# seatable.sh restart\n</code></pre> <p>Navigate to the login page of your SeaTable Server and click on \"Single Sign-On\" and try to log in. If the configuration is correct, you'll be redirected the IdP's login. Enter the credentials of a user that was assigned to the application created above.</p> <p>Check <code>dtable_web.log</code> for troubleshooting info if authentication fails.</p>"},{"location":"authentication/saml/#configuration-azure","title":"Configuration Azure","text":"<p>Browse to 'Azure Active Directory' and select 'Enterprise Applications'. In the 'Enterprise applications | All Applications' pane, click on 'New application' to open the 'Browse Azure AD Gallery'. Hit 'Create your own application', enter the name of the application in the input field (e.g. SeaTable), and click 'Create'. (For more information on how to add an enterprise application or how to create and assign a user account to an enterprise application, see Microsoft's Azure product documentation.) Azure will then create the application and open its overview page (see screenshot below).</p> <p></p> <p>Select the just created enterprise application. Click on '2. Set up single sign-on' in the overview page and then select SAML as single sign-on method. All SAML-related parameters for the new application are set in the configurator that now opens.</p> <p>Step 1 - Basic SAML Configuration: Click on 'Edit' in the top right corner and add SeaTable's metadata URL, ACS URL, and service URL as shown in the screenshot below.</p> <p></p> <p>Step 2 - Attributes and Claims: Click on 'Edit' in the top corner and define the claims as shown in the screenshot below.</p> <p></p> <p>Step 3 - SAML Certificates: Note the App Federation Metadata URL and download the certificate. The certificate in Base 64 is the correct certificate format.</p> <p></p> <p>Proceed with the upload of the certificate file to SeaTable. The SAML configuration in <code>dtable_web_settings.py</code> should look like this:</p> <pre><code>ENABLE_SAML = True\nSAML_PROVIDER_IDENTIFIER = 'Azure'\nSAML_REMOTE_METADATA_URL = 'https://login.microsoftonline.com/826f1810-ccc9-.../federationmetadata/2007-06/federationmetadata.xml?appid=...'\nSAML_ATTRIBUTE_MAP = {\n    'uid': 'uid',                       #required\n    'mail': 'contact_email',            #required\n    'name': 'name',                     #required\n    'employeeid': 'employee_id',        #optional\n    'jobtitle': 'user_role',            #optional\n}\nSAML_CERTS_DIR = '/shared/certs/'\n</code></pre> <p>Replace the value of the <code>SAML_REMOTE_METADATA_URL</code> with the URL obtained in step 3 above.</p>"},{"location":"authentication/saml/#configuration-okta","title":"Configuration Okta","text":"<p>Browse to 'Your apps' and switch to the admin mode.</p> <p></p> <p>Click on 'Applications' in the navigation on the left and one more time on 'Applications' in the drop-down menu.</p> <p>Select 'Create App Integration' and choose 'SAML 2.0' as sign-in method. All SAML-related parameters for the new application are defined in the configurator that now opens.</p> <p></p> <p>Step 1 - General Settings: Enter the name of the app in the input field and upload an app logo.</p> <p></p> <p>Step 2 - Configure SAML: Add the single sign-on URL, the audience URI as well as the attributes as shown in the screenshot below. Finish the IdP-side configuration by clicking the button of the same name.</p> <p></p> <p>Step 3 - Feedback: You can skip this step.</p> <p>An overview of the configuration including all information for the server-side configuration is displayed once you made it past the 'Feedback'. Note the Metadata URL and download the signing certificate.</p> <p></p> <p>Switch to the tab 'Assignments', click the 'Assign' button, and add user to the app via 'Assign to People'</p> <p></p> <p>Proceed with the upload of the certificate file to SeaTable. The SAML configuration in <code>dtable_web_settings.py</code> should look like this:</p> <pre><code>ENABLE_SAML = True\nSAML_PROVIDER_IDENTIFIER = 'Okta'\nSAML_REMOTE_METADATA_URL = 'https://...'\nSAML_ATTRIBUTE_MAP = {\n    'uid': 'uid',\n    'contact_email': 'contact_email',\n    'name': 'name',\n}\nSAML_CERTS_DIR = '/shared/certs'\n</code></pre> <p>Replace the value of the <code>SAML_REMOTE_METADATA_URL</code> variable with the URL obtained above.</p> <p>Restart the SeaTable service for the changes to take effect.</p>"},{"location":"authentication/saml/#configuration-auth0","title":"Configuration Auth0","text":"<p>Click on 'Applications' in the navigation on the left. Then choose 'Applications' in the drop-down menu to see a list of the apps that have already been configured in your account.</p> <p>Step 1 - Create Application: Enter the name of the app in the input field, select 'Regular Web Applications', and click on 'Create'.</p> <p></p> <p>Step 2 - Addons: Enable 'SAML2 WEB APP'. You will now see the 'SAML Protocol Parameters'. Copy the link of the 'Identity Provider Certificate' and the 'Identity Provider Metadata' in a temporary document.</p> <p></p> <p>Next, switch to the 'Settings' tab. Enter the URL of the SeaTable's assertion consumer service in the 'Application Callback URL' field.</p> <p></p> <p>Once you did that, scroll down a bit to finish the process by clicking 'enable'.</p> <p>Proceed with the upload of the certificate file to SeaTable that you obtained in step 2. The SAML configuration in <code>dtable_web_settings.py</code> should look like this:</p> <pre><code>ENABLE_SAML = True\nSAML_PROVIDER_IDENTIFIER = 'Auth0'\nSAML_REMOTE_METADATA_URL = 'https://...'\nSAML_ATTRIBUTE_MAP = {\n   'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier': 'uid',\n   'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress': 'contact_email',\n   'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name': 'name',\n}\nSAML_CERTS_DIR = '/shared/certs'\n</code></pre> <p>Replace the value of the SAML_REMOTE_METADATA_URL variable with the URL obtained in step 2.</p> <p>Restart the SeaTable service for the changes to take effect.</p>"},{"location":"authentication/saml_team/","title":"SAML Authentication for teams","text":"<p>in <code>dtable_web_settings.py</code> add these settings:</p> <pre><code># to activate teams in general\nCLOUD_MODE = True\nMULTI_TENANCY = True\n\n# to activate multi-saml in general\nENABLE_MULTI_SAML = True\nSAML_CERTS_DIR = '/opt/seatable/seatable-data'\n</code></pre> <p>SAML for Teams is also a role permission that has to be assigned to a role.</p> <pre><code>ENABLED_ROLE_PERMISSIONS = {\n    'org_default': {\n        'can_use_saml': True\n    },\n    'org_enterprise': {\n        'can_use_saml': True\n    }\n}\n</code></pre> <p>Server certificates have to be created in the host system and made available to SeaTable Server.</p> <pre><code># executed in the host\nmkdir /opt/seatable-server/certs\ncd /opt/seatable-server/\nopenssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout sp.key -out sp.crt\n</code></pre>"},{"location":"authentication/saml_team/#saml_certs_dir-optseatableseatable-data","title":"SAML_CERTS_DIR = '/opt/seatable/seatable-data'","text":""},{"location":"authentication/saml_team/#saml_attribute_map","title":"SAML_ATTRIBUTE_MAP = {","text":""},{"location":"authentication/saml_team/#uid-uid","title":"'uid': 'uid',","text":""},{"location":"authentication/saml_team/#contact_email-contact_email","title":"'contact_email': 'contact_email',","text":""},{"location":"authentication/saml_team/#name-name","title":"'name': 'name',","text":""},{"location":"authentication/saml_team/#_1","title":"}","text":""},{"location":"authentication/two_factor_auth/","title":"Two-Factor Authentication","text":"<p>Two-factor authentication (2FA) provides an extra layer of security against unauthorized access by requiring an additional piece of information besides username and password.</p> <p>SeaTable supports time-based, one-time passwords (TOTP) as a second factor with the default authentication.</p> <p>A TOTP app such as Google Authenticator or 2FAS is required to use 2FA with SeaTable.</p>"},{"location":"authentication/two_factor_auth/#global-configuration","title":"Global Configuration","text":"<p>To enable 2FA, add the following configuratiaon in the configuration file <code>dtable_web_settings.py</code>:</p> <pre><code>ENABLE_TWO_FACTOR_AUTH = True # Default value is False.\n</code></pre> <p>Optionally, 2FA can be enforced for for all users. If you wish to do that, add the following configuration to <code>dtable_web_settings</code>:</p> <pre><code>ENABLE_FORCE_2FA_TO_ALL_USERS = True # Defaule value is False.\n</code></pre> <p>Note: When disabling 2FA enforcement by changing <code>True</code> to <code>False</code>, 2FA is disabled for all users.</p>"},{"location":"authentication/two_factor_auth/#user-specific-configuration","title":"User-specific Configuration","text":"<p>System and team administrators can enforce 2FA for individual users in system and team administration of SeaTable's web interface, respectively.</p>"},{"location":"changelog/changelog-for-seatable-professional-server/","title":"SeaTable Enterprise Edition Changelog","text":"<p>Please check: https://seatable.io/docs/changelog/</p>"},{"location":"changelog/server-changelog/","title":"SeaTable Changelog","text":"<p>There are multiple changelogs regarding SeaTable:</p> <ul> <li>Functions: The complete changelog of SeaTable Server is available at https://seatable.io/docs/changelog/.</li> <li>new API Calls: https://api.seatable.io/reference/changelog</li> <li>Extra Upgrade Notices: changes relevant for administators</li> </ul>"},{"location":"config/","title":"Configuration","text":"<p>SeaTable offers a wide range of options for customizing your SeaTable Server. In this section, we will explain how you can configure the different features, change the look and feel of your system or add additional authentication methods.</p> <p>Go through the config options and do this, that sounds good for you.</p>"},{"location":"config/autostart/","title":"Autostart of SeaTable Service","text":"<p>Not required anymore with v4.3</p> <p>With the version 4.3 and newer, the SeaTable service will start automatically as soon as you start the docker container.</p> <p>When setting up SeaTable following the instructions in this manual, SeaTable's Docker containers do not automatically start after a system reboot. Adding SeaTable to autostart minimizes system downtime and prevents service disruption.</p>"},{"location":"config/autostart/#requirements","title":"Requirements","text":"<p>The autostart routine presented here utilizes systemd. systemd, the default init system in many Linux distributions, including CentOS, Debian, and Ubuntu, provides a convenient autostart function for the services it controls.</p>"},{"location":"config/autostart/#setup","title":"Setup","text":"<p>Autostart SeaTable builds on three components: First, a start script that is capable of starting, stopping, and restarting SeaTable using the docker-compose.yml; second, a systemd unit file using the start script; third, systemd's native autostart capability.</p>"},{"location":"config/autostart/#preparing-the-start-script","title":"Preparing the start script","text":"<p>Create the script file in <code>/opt/seatable</code> and open it in a text editor:</p> <pre><code>$ cd /opt/seatable/\n$ nano seatable-autostart.sh\n</code></pre> <p>Paste the following code block into the file:</p> <pre><code>#!/bin/bash\n\ncase $1 in\n    start)\n    cd /opt/seatable/\n    docker compose up -d\n    sleep 10\n    docker exec -d seatable /shared/seatable/scripts/seatable.sh start\n    ;;\n    stop)\n    cd /opt/seatable/\n    docker compose down\n    ;;\n    restart)\n    cd /opt/seatable/\n    docker compose down\n    docker compose up -d\n    sleep 10\n    docker exec -d seatable /shared/seatable/scripts/seatable.sh start\n    ;;\nesac\n</code></pre> <p>Note: If SeaTable's docker-compose.yml is not in the default directory <code>/opt/seatable</code>, change the three cd commands in the script accordingly.</p> <p>Make the script executable:</p> <pre><code>$ chmod u+x seatable-autostart.sh\n</code></pre>"},{"location":"config/autostart/#configuring-the-systemd-unit-file","title":"Configuring the systemd unit file","text":"<p>Create a new unit file in /etc/systemd/system and open it in a text editor:</p> <pre><code>$ cd /etc/systemd/system/\n$ nano seatable.service\n</code></pre> <p>Copy the following code into the file:</p> <pre><code>[Unit]\nDescription=SeaTable\nAfter=network.target\n\n[Service]\nExecStart=/opt/seatable/seatable-autostart.sh start\nExecStop=/opt/seatable/seatable-autostart.sh stop\nUser=root\nType=forking\nTimeoutSec=0\nRemainAfterExit=yes\nGuessMainPID=no\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Note: If the <code>seatable-autostart.sh</code> is saved in a directory other than <code>/opt/seatable</code>, change the unit file accordingly to reflect it.</p> <p>The unit file in combination with the above script enables the start and stop of SeaTable using the systemctl command:</p> <ul> <li><code>sudo systemctl stop seatable</code> stops all SeaTable containers</li> <li><code>sudo systemctl start seatable</code> start all SeaTable containers</li> <li><code>sudo systemctl restart seatable</code> restart all SeaTable containers</li> </ul> <p>Note: When using systemctl to start SeaTable Server, its Docker containers must be stopped beforehand.</p>"},{"location":"config/autostart/#enabling-autostart","title":"Enabling autostart","text":"<p>Autostart can be enabled with the following command:</p> <pre><code>$ sudo systemctl enable seatable\n</code></pre> <p>Similarly, autostart can be disabled with the following command:</p> <pre><code>$ sudo systemctl disable seatable\n</code></pre> <p>You can check SeaTable's autostart status with the following command:</p> <pre><code>$ sudo systemctl is-enabled seatable\n</code></pre>"},{"location":"config/base_rows_limit/","title":"Base supported rows limit","text":"<p>By default, a base contains up to 100,000 rows (excluding archived rows). Above 100,000 rows, the base will become read-only. If more than 150,000 rows, the base will fail to load.</p> <p>Base rows are limited for the following technical reasons:</p> <ul> <li>The base is read from the persistent storage (dtable-storage-server) into the memory of dtable-server, and the maximum support size is 600M. This is a limitation of Node.js technology, because a string in Node.js cannot exceed 600M. For safety reason, dtable-server will not attempt to load this base when it exceeds 300M. (Attachments in the base are not counted.)</li> <li>When the base is too large, it takes too much time for the server to serialize it and send it to the network when the client loads the base. At this time, the server cannot respond to other requests.</li> </ul> <p>Starting from version 3.4, for private deployment users, if your application scenario needs to support more than 100,000 rows in a base, but the storage space occupied by the base itself is not large (for example, it contains a large number of blank cells), you can modify the server's configuration, to support more than 100,000 rows.</p>"},{"location":"config/base_rows_limit/#dtable-server","title":"dtable-server","text":"<p><code>dtable_server_config.json</code></p> <pre><code>{\n   \"base_writable_limit\": 100000,\n   \"base_max_rows_limit\": 150000\n}\n</code></pre> <p>Among them, base_writable_limit is used to limit the rows written into the base. base_max_rows_limit is used to control when the rows in the base is greater than the number, the server refuses to load the base into memory. base_max_rows_limit needs to be greater than base_writable_limit.</p>"},{"location":"config/base_rows_limit/#dtable-web","title":"dtable-web","text":"<p><code>dtable_web_settings.py</code></p> <pre><code>BASE_WRITABLE_LIMIT = 100000\n</code></pre> <p>This is used to let the Web UI to become read-only when rows exceed the limit.</p>"},{"location":"config/ccnet-conf/","title":"ccnet.conf","text":"<p>This config file is needed for history reason. The only used section is <code>[Database]</code> section.</p>"},{"location":"config/ccnet-conf/#example","title":"Example","text":"<pre><code>[Database]\nENGINE = mysql\nHOST = xxxx\nPORT = 3306\nUSER = seafile\nPASSWD = xxxxxx\nDB = ccnet_db\nCONNECTION_CHARSET = utf8\n</code></pre>"},{"location":"config/custom_css/","title":"Custom CSS","text":"<p>You can use a custom CSS to customize the look of your SeaTable installation. You can do this either on the web interface (\"Settings\" in the system administration, where you can enable the custom CSS and paste your custom CSS directly into the dialogue), or use the following method.</p>"},{"location":"config/custom_css/#customize-seatable-css","title":"Customize SeaTable CSS","text":"<p>Create a <code>custom</code> folder under <code>/&lt;your SeaTable Docker volume&gt;/seatable/seahub-data</code>:</p> <pre><code>cd /&lt;your SeaTable Docker volume&gt;/seatable/seahub-data\nmkdir custom\n</code></pre> <p>Create a symbolic link for <code>custom</code> in the SeaTable container. When upgrading, the SeaTable upgrading script will automatically create a symbolic link to maintain your custom settings:</p> <pre><code>docker exec -it seatable bash\ncd /opt/seatable/seatable-server-latest/dtable-web/media\nln -s /shared/seatable/seahub-data/custom custom\n</code></pre> <p>Under <code>/&lt;your SeaTable Docker volume&gt;/seatable/seahub-data/custom</code>, create the new CSS file and custom the style, for example, with a <code>custom.css</code> file:</p> <pre><code>cd /&lt;your SeaTable Docker volume&gt;/seatable/seahub-data/custom\nnano custom.css\n</code></pre> <p>In <code>dtable_web_settings.py</code>, change the value of <code>BRANDING_CSS</code> to the newly created CSS file's path:</p> <p><pre><code>nano dtable_web_settings.py\n</code></pre> Then change the value of BRANDING_CSS and save &amp; close the file: <pre><code>BRANDING_CSS = 'custom/custom.css'\n</code></pre></p> <p>Finally, restart the SeaTable service:</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh restart\n</code></pre>"},{"location":"config/customize_email_notifications/","title":"Customize Email Notifications","text":"<p>Note: Subject line may vary between different releases, this is based on Release 2.0.1. Restart Seahub so that your changes take effect.</p>"},{"location":"config/customize_email_notifications/#user-reset-hisher-password","title":"User reset his/her password","text":"<p>Subject</p> <p>seahub/seahub/auth/forms.py line:103</p> <p>Body</p> <p>seahub/seahub/templates/registration/password_reset_email.html</p> <p>Note: You can copy password_reset_email.html to <code>seahub-data/custom/templates/registration/password_reset_email.html</code> and modify the new one. In this way, the customization will be maintained after upgrade. </p>"},{"location":"config/customize_email_notifications/#system-admin-add-new-member","title":"System admin add new member","text":"<p>Subject</p> <p>seahub/seahub/views/sysadmin.py line:424</p> <p>Body</p> <p>seahub/seahub/templates/sysadmin/user_add_email.html</p> <p>Note: You can copy user_add_email.html to <code>seahub-data/custom/templates/sysadmin/user_add_email.html</code> and modify the new one. In this way, the customization will be maintained after upgrade. </p>"},{"location":"config/customize_email_notifications/#system-admin-reset-user-password","title":"System admin reset user password","text":"<p>Subject</p> <p>seahub/seahub/views/sysadmin.py line:368</p> <p>Body</p> <p>seahub/seahub/templates/sysadmin/user_reset_email.html</p> <p>Note: You can copy user_reset_email.html to <code>seahub-data/custom/templates/sysadmin/user_reset_email.html</code> and modify the new one. In this way, the customization will be maintained after upgrade. </p>"},{"location":"config/customize_email_notifications/#user-send-filefolder-share-link","title":"User send file/folder share link","text":"<p>Subject</p> <p>seahub/seahub/share/views.py line:668</p> <p>Body</p> <p>seahub/seahub/templates/shared_link_email.html</p>"},{"location":"config/dtable-events-conf/","title":"dtable-event.conf settings","text":""},{"location":"config/dtable-events-conf/#database-configuration","title":"Database Configuration","text":"<p>The settings for the database connection are located in the <code>[DATABASE]</code> section of the file <code>dtable-events.conf</code></p> <pre><code>[DATABASE]\ntype = mysql\nhost = db\nport = 3306\nusername = root\npassword = seatable_db\ndb_name = seafile_db\n</code></pre> <p>Note: MariaDB and MySQL are compatible. In this configuration example, we use MySQL.</p>"},{"location":"config/dtable-events-conf/#redis-configuration","title":"Redis Configuration","text":"<p>The settings for the Redis connection are located in the <code>[REDIS]</code> section of the file <code>dtable-events.conf</code></p> <pre><code>[REDIS]\nhost = redis\nport = 6379\n</code></pre>"},{"location":"config/dtable-events-conf/#email-notifications-configuration","title":"Email Notifications Configuration","text":"<p>The settings for email notifications are located in the <code>[EMAIL SENDER]</code> section of the file <code>dtable-events.conf</code></p> <pre><code>[EMAIL SENDER]\nenabled = true\n</code></pre>"},{"location":"config/dtable-events-conf/#notification-rules-scanner-configuration","title":"Notification Rules Scanner Configuration","text":"<p>Notification rules are a feature that allows users to set criteria for a base and receive notifications when these criteria are met.</p> <p>The settings for the notification rules scanner are located in the <code>[NOTIFY-SCANNER]</code> section of the file <code>dtable-events.conf</code></p> <pre><code>[NOTIFY-SCANNER]\nenabled = true\n</code></pre>"},{"location":"config/dtable-events-conf/#automation-rules-configuration","title":"Automation Rules Configuration","text":"<p>In SeaTable, users have the ability to define triggers and actions within an automation rule. These rules are then automatically executed on a base.</p> <p>The settings for the automation rules are located in the <code>[AUTOMATION]</code> section of the <code>dtable-events.conf</code> file.</p> <p>To maintain server stability, SeaTable includes a feature that restricts the frequency of automation rule executions. This <code>per_minute_trigger_limit</code> is set to 50 by default.</p> <pre><code>[AUTOMATION]\nper_minute_trigger_limit = 50\n</code></pre>"},{"location":"config/dtable_db_conf/","title":"dtable-db config","text":"<p>dtable-db is the component that provides SQL querying capability in SeaTable server. Users can query their bases with SQL. It also handles archiving for large bases (since Enterprise Edition 2.3.0), to make querying large bases more efficient.</p>"},{"location":"config/dtable_db_conf/#configurations","title":"Configurations","text":"<p>The configurations are in dtable_db.conf. Below are available options.</p> <p>In section <code>[general]</code>:</p> <ul> <li><code>host</code>: The address dtable-db listens on. Defaults to 0.0.0.0.</li> <li><code>port</code>: The port dtable-db listens on. Defaults to 7777.</li> <li><code>log_dir</code>: Location for the logs. Defaults to the directory specified in <code>-c</code> command line option. (Added in 2.3.0)</li> <li><code>log_level</code>: Only log messages with level priority higher than this will be logged. Supported levels are \"debug\", \"info\", \"warn\", \"error\", with ascending priority. The default is \"info\".</li> <li><code>slow_query_threshold</code>: If the processing time exceeds this threshold, a slow log will be recorded. Unit is in milliseconds. Defaults to 1000. (Added in 2.3.0)</li> <li><code>row_update_limit</code>: Controls the rate of row update/delete/insert per second for each base. Row update/delete/insert via SQL and APIs are all affected. The unit is in number of rows. Default is 5000. (Added in 3.0.0)</li> <li><code>global_row_update_limit</code>: Controls the rate of row update/delete/insert per second for the entire system. Row update/delete/insert via SQL and APIs are all affected. This option controls the global rate when there are concurrent updates to multiple bases. The unit is in number of rows. Default is 30000. (Added in 3.0.0)</li> <li><code>base_api_limit_per_day</code>: Limits the number of API calls per base per day. Default is -1, meaning no limits.</li> <li><code>query_per_minute_limit</code>: Limits the number of API calls per minute. Default is 50000. If this value is less than 0, meaning no limits.</li> </ul> <p>In section <code>[storage]</code>:</p> <ul> <li><code>data_dir</code>: Location of the data directory. You must specify this option.</li> <li><code>cleanup_at</code>: The execution time of clean up deleted data. Format is <code>12:30</code>. The default value is <code>00:00</code>.</li> </ul> <p>Section <code>[dtable cache]</code> contains options for caching bases from dtable-server:</p> <ul> <li><code>private_key</code>: The same as <code>DTABLE_PRIVATE_KEY</code> in <code>dtable_web_settings.py</code>. You must specify this option if your version is before \"Enterprise edition 3.5.5\". If your version is newer than that, you don't need to specify it here. It'll be read from dtable_server_config.json.</li> <li><code>dtable_server_url</code>: local address for dtable-server. You must specify this option.</li> <li><code>expire_time</code>: For how long a cached base will be valid. After that it'll be fetched from dtable-server again. Unit is in seconds. Defaults to 300 (5 minutes).</li> <li><code>total_cache_size</code>: How much memory shall be used for caching bases. After this threshold is reached, cached bases will be cleaned with LRU algorithm. Cleaning stops when memory consumption reduces to 70% of this threshold. Unit is in MB. Defaults to 500MB.</li> <li><code>clean_cache_interval</code>: Interval between cache cleaning. Unit is in seconds. Defaults to 300.</li> </ul> <p>Section <code>[database]</code> contains options for accessing the MySQL database used by dtable-server. Note: Since 2.7 version this section is no longer used. dtable-db will use the database settings in conf/dtable-server.json.</p> <ul> <li><code>host</code>: Address of database. You must provide this option.</li> <li><code>port</code>: Port of database. Defaults to 3306.</li> <li><code>user</code>: Username for login to the database. You must provide this option.</li> <li><code>password</code>: Password for the database user. You must provide this option.</li> <li><code>db_name</code>: Database name used by dtable-server. You must provide this option.</li> </ul> <p>In section <code>[SQL]</code>:</p> <ul> <li><code>max_result_rows</code>: Maximal number of rows that will be returned in one query, if <code>LIMIT</code> syntax is not used. Defaults to 100. (Deprecated: should use <code>default_result_rows</code> since 3.0 version)</li> <li><code>default_result_rows</code>: Maximal number of rows that will be returned in one query, if <code>LIMIT</code> syntax is not used. Defaults to 100.</li> <li><code>result_rows_hard_limit</code>: Maximal number of rows that will be returned in one query. If the number of rows specified in <code>LIMIT</code> syntax is larger than this option, the system still returns at most the number of rows that specified in this option. The default is 10000.</li> <li><code>exec_cost_hard_limit</code>: Maximal execution cost of a query. If the estimated cost of a query exceeds this limit, the query is rejected. Default is 0, which means no limit.</li> <li><code>group_by_stmt_limit</code>: Maximal number of concurrent <code>group by</code> requests. If the number of <code>group by</code> requests exceeds this limit, new <code>group by</code> queries will wait in a queue. Default is 2.</li> </ul> <p>Section <code>[backup]</code> contains options to configure backup functions (available since Enterprise Edition 3.0.0):</p> <ul> <li><code>dtable_storage_server_url</code>: The URL of dtable storage server. Required to enable automatic backup. For configuration of dtable storage server, please refer to this documentation.</li> <li><code>backup_at</code>: The execution time of backup. Format is <code>12:30</code>. The default value is <code>02:00</code>. It is mutual exclusion with <code>backup_interval</code>. If neither <code>backup_at</code> nor <code>backup_interval</code> are specified, then <code>backup_at</code> will be used by default.</li> <li><code>backup_interval</code>: The interval between each backup. Unit is in seconds. The default value is 86400 (24 hours).</li> <li><code>keep_backup_num</code>: The number of backups that will be kept, oldest backups will be removed. The default value is 3.</li> </ul> <p>Section <code>[profile]</code> contains options to configure profiling functions.</p> <ul> <li><code>enable_profiling</code>: Enable profiling API. Default is false.</li> <li><code>password</code>: Password for profiling API. Required if <code>enable_profiling</code> is true.</li> <li><code>enable_auto_heap_profiling</code>: Enable auto heap profiling. Default is false. (Added in 4.2.3)</li> <li><code>auto_heap_profiling_pressure</code>: The pressure threshold for auto heap profiling. Default is 50, which means when the memory usage exceeds 50% of the total memory, auto heap profiling will be triggered. (Added in 4.2.3)</li> </ul> <p>Below is an example configuration:</p> <pre><code>[general]\nhost = 127.0.0.1\nport = 7777\nlog_dir = /shared/seatable/logs\n\n[storage]\ndata_dir = /opt/seatable/db-data\ncleanup_at = 00:00\n\n# You have to change dtable_server_url based on your conf/dtable-server.json\n[dtable cache]\nprivate_key = \"my private key\"\ndtable_server_url = \"http://127.0.0.1:5000\"\ntotal_cache_size = 100\n\n# You have to change below options based on your conf/dtable-server.json\n# Since 2.7 version this section is no longer used. dtable-db will use the database settings in conf/dtable-server.json.\n[database]\nhost = 127.0.0.1\nuser = root\npassword = mypass\ndb_name = dtable\n\n[backup]\ndtable_storage_server_url = http://127.0.0.1:6666\nbackup_interval = 86400\nkeep_backup_num = 3\n\n[profile]\nenable_profiling = true\npassword = mypass\nenable_auto_heap_profiling = true\nauto_heap_profiling_pressure = 50\n</code></pre>"},{"location":"config/dtable_server_config/","title":"DTable Server Config","text":"<pre><code>{\n    \"host\": \"db\",\n    \"user\": \"root\",\n    \"password\": \"MYSQL_PASSWORD\",\n    \"database\": \"dtable_db\",\n    \"port\": 3306,\n    \"private_key\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    \"dtable_web_service_url\": \"https://example.seatable.com/\",\n    \"redis_host\": \"redis\",\n    \"redis_port\": 6379,\n    \"redis_password\": \"\",\n    \"enable_notification_publish\": true/false,\n    \"rows_api_minute_max\": 100,\n    \"rows_api_hour_max\": 6000,\n    \"worker_threads_num\": 2,\n    \"save_interval\": 5 * 60 * 1000,\n    \"api_req_max\": 600,\n    \"api_base_day_max\": 5000\uff0c\n    \"rows_api_max_limit\": 1000,\n}\n</code></pre>"},{"location":"config/dtable_server_config/#redis_password","title":"redis_password","text":"<p>It is an empty string</p>"},{"location":"config/dtable_server_config/#private_key","title":"private_key","text":"<p>It must be the same as the <code>DTABLE_PRIVATE_KEY</code> in <code>dtable_web_settings.py</code> </p>"},{"location":"config/dtable_server_config/#dtable_web_service_url","title":"dtable_web_service_url","text":"<p>It is used for dtable-server to access dtable-web. It is optional since 1.1.0. If it is not specified, 127.0.0.1:8000 will be used.</p>"},{"location":"config/dtable_server_config/#enable_notification_publish","title":"enable_notification_publish","text":"<p>It is used for publishing the notification to the \"notification-added\" channel of redis, default by false.  This is designed for the integration to the third-party application which will be able to receive the real-time notification.</p>"},{"location":"config/dtable_server_config/#rows_api_minute_max-rows_api_hour_max","title":"rows_api_minute_max / rows_api_hour_max","text":"<p>The maximum number of listing rows API calls within 1 minute / hour. Listing rows in a large base involving converting internal representation to end-user friendly representation, which will cost a few seconds for 10K+ rows. So the API should be limited more than other APIs. </p>"},{"location":"config/dtable_server_config/#api_req_max-api_base_day_max","title":"api_req_max / api_base_day_max","text":"<ul> <li>api_req_max: The maximum number of API calls to a base within 1 minute. The default value is 600.</li> <li>api_base_day_max: The maximum number of API calls to a base within 1 day. The default value is 5000.</li> </ul>"},{"location":"config/dtable_server_config/#worker_threads_num","title":"worker_threads_num","text":"<p>Number of worker threads serving list rows API</p>"},{"location":"config/dtable_server_config/#save_interval","title":"save_interval","text":"<p>Interval for saving changed bases to persistent storage (dtable-storage-server). The default is 5 minutes.</p>"},{"location":"config/dtable_server_config/#rows_api_max_limit","title":"rows_api_max_limit","text":"<p>Maxmum number of rows returned by calling list rows API in dtable-server, default by 1000</p>"},{"location":"config/dtable_server_config/#notice","title":"Notice","text":"<p>You should restart the SeaTable after the modification of these settings by run the code below:</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh restart\n</code></pre>"},{"location":"config/dtable_storage_server_conf/","title":"DTable Storage Server config","text":"<p>DTable storage server provides persistent storage for bases and backup service for dtable-db. It supports file system, S3 storage backends. This component is added in version 3.0.</p>"},{"location":"config/dtable_storage_server_conf/#configuration-example","title":"Configuration example","text":"<pre><code>[general]\nhost = 127.0.0.1\nport = 6666\nlog_dir = .\ntemp_file_dir = ./tmp\n\n[storage backend]\ntype = filesystem\npath = /path/to/storage\n\n[snapshot]\ninterval = 86400\nkeep_days = 180\n</code></pre>"},{"location":"config/dtable_storage_server_conf/#configuration","title":"Configuration","text":""},{"location":"config/dtable_storage_server_conf/#general","title":"general","text":"<p>In <code>[general]</code> section:</p> <ul> <li><code>host</code>: The address that dtable-storage-server listens on. Default is <code>127.0.0.1</code>.</li> <li><code>port</code>: The port that dtable-storage-server listens on. Default is <code>6666</code>.</li> <li><code>log_dir</code>: The directory that dtable-storage-server writes logs to. Default is the dir of configuration file.</li> <li><code>temp_file_dir</code>: The directory that dtable-storage-server create buffers in. Required</li> </ul>"},{"location":"config/dtable_storage_server_conf/#storage-backend","title":"Storage backend","text":"<p>In <code>[storage backend]</code> section:</p> <ul> <li><code>type</code>: The type of storage backend. Options are <code>filesystem</code>, and <code>s3</code>. Default is <code>filesystem</code>.</li> </ul> <p>For filesystem storage backend:</p> <ul> <li><code>path</code>: The filepath of storage backend.</li> </ul> <p>For S3 storage backend:</p> <ul> <li><code>bucket</code>: The bucket name of S3 backend.</li> <li><code>key_id</code>: The access key id of S3 backend.</li> <li><code>key</code>: The access key of S3 backend.</li> <li><code>use_v4_signature</code>: Whether to use v4 signature. For a S3-compatible storage, it should be <code>false</code>.</li> <li><code>aws_region</code>: The region of S3 backend. (only when v4 signature is used)</li> <li><code>host</code>: The host address of S3 backend. Required for S3-compatible storage. Optional for AWS S3, but can be set to the endpoint you use.</li> <li><code>path_style_request</code>: Whether to use path style requests. For a S3-compatible storage, it should be <code>true</code>.</li> <li><code>use_https</code>: Whether to use https.</li> </ul>"},{"location":"config/dtable_storage_server_conf/#snapshot","title":"Snapshot","text":"<p>Configurations for snapshots of bases</p> <ul> <li>interval: the interval for generating snapshots for a base. The unit is seconds. Default is 24 hours.</li> <li>keep_days: the number of days to keep snapshots. Default is 0, which means snapshots will be kept forever.</li> </ul>"},{"location":"config/dtable_web_settings/","title":"dtable web settings","text":"<p>You need to restart SeaTable so that your changes take effect. Just execute the following command at your command line.</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh restart\n</code></pre> <p>You can also modify some of the config items as system administrator via web interface. These config items are saved in the database table (dtable_db/constance_config). The configuration in the database has a higher priority then the items in config file. If you want to disable settings via web interface, you can add <code>ENABLE_SETTINGS_VIA_WEB = False</code> to <code>dtable_web_settings.py</code>.</p>"},{"location":"config/dtable_web_settings/#basic-settings","title":"Basic settings","text":"<pre><code># for dtable-server\n## The private key is used to authenticate between DTable Web and DTable Server\n## DTABLE_SERVER_URL is for telling DTable Web the DTable Server's URL\n## DTABLE_SOCKET_URL is for telling DTable Web the web socket URL of DTable Server\nDTABLE_PRIVATE_KEY = 'xxxxx'\nDTABLE_SERVER_URL = 'https://seatable.yourdomain.com/dtable-server/'\nDTABLE_SOCKET_URL = 'https://seatable.yourdomain.com/'\n\n# The URL of dtable-web that for users to visit your SeaTable server\nDTABLE_WEB_SERVICE_URL = 'https://seatable.yourdomain.com/'\n\n# The help link URL\nHELP_LINK = 'https://seatable.io/help/'\n\n# The file server URL\nFILE_SERVER_ROOT = 'https://seatable.yourdomain.com/seafhttp/'\n\n# Redirect URL when logout\uff0cif not set, it will redirect to the SeaTable default page of logout\nLOGOUT_REDIRECT_URL = 'https://example.com/&lt;your-own-logout-page&gt;'\n</code></pre> <p>If you changed your domain, the URLs in above settings must be changed accordingly.</p>"},{"location":"config/dtable_web_settings/#sending-email-notifications","title":"Sending Email Notifications","text":"<p>Refer to email sending documentation.</p>"},{"location":"config/dtable_web_settings/#user-management-options","title":"User management options","text":"<p>The following options affect user registration, password and session.</p> <pre><code># Enable or disable registration on web. Default is `False`.\nENABLE_SIGNUP = False\n\n# Activate or deactivate user when registration complete. Default is `True`.\n# If set to `False`, new users need to be activated by admin in admin panel.\nACTIVATE_AFTER_REGISTRATION = True\n\n# Whether or not send activation Email to user when registration complete. Default is `False`.\n# This option will be ignored if `ACTIVATE_AFTER_REGISTRATION` set to `True`.\nREGISTRATION_SEND_MAIL = False\n\n# Whether allow user to delete its account. Default is `True`.\nENABLE_DELETE_ACCOUNT = True\n\n# Enforce all users to use 2-factor-authentication. Default is 'False'.\n# Changing 'True' to 'False' will deactivate 2FA for all users (they could still activate it\n# in their personal settings).\nENABLE_FORCE_2FA_TO_ALL_USERS = True\n\n# Whether to send email when a system admin adding a new member. Default is `True`.\nSEND_EMAIL_ON_ADDING_SYSTEM_MEMBER = True\n\n# Whether to send email when a system admin resetting a user's password. Default is `True`.\nSEND_EMAIL_ON_RESETTING_USER_PASSWD = True\n\n# Whether to send email when an admin activates a new account. Default is `True`.\nSEND_EMAIL_ON_ACTIVATING_USER = True\n\n# Whether to send email when add new user. Default is `True`.\nSEND_EMAIL_ON_ORG_ADD_NEW_USER = True\n\n# Whether to send email when org admin activating a member. Default is `False`.\nSEND_EMAIL_ON_ACTIVATING_ORG_USER = False\n\n# Send system admin notify email when user registration is complete. Default is `False`.\nNOTIFY_ADMIN_AFTER_REGISTRATION = True\n\n# Remember days for login. Default is 7\nLOGIN_REMEMBER_DAYS = 7\n\n# Attempt limit before showing a captcha when login.\nLOGIN_ATTEMPT_LIMIT = 3\n\n# deactivate user account when login attempts exceed limit\nFREEZE_USER_ON_LOGIN_FAILED = False\n\n# minimum length for user's password\nUSER_PASSWORD_MIN_LENGTH = 6\n\n# LEVEL based on four types of input:\n# num, upper letter, lower letter, other symbols\n# '3' means password must have at least 3 types of the above.\nUSER_PASSWORD_STRENGTH_LEVEL = 3\n\n# default False, only check USER_PASSWORD_MIN_LENGTH\n# when True, check password strength level, STRONG(or above) is allowed\nUSER_STRONG_PASSWORD_REQUIRED = False\n\n# Force user to change password when admin add/reset a user.\nFORCE_PASSWORD_CHANGE = True\n\n# Whether to allow SSO users to set a local password; default True, admin or user can set a local password by 'Reset password'\nENABLE_SSO_USER_CHANGE_PASSWORD = True\n\n# Whether to allow LDAP users to set a local password; default False, when True, admin or user can set a local password by 'Reset password'\nENABLE_LDAP_USER_CHANGE_PASSWORD = False\n\n# Age of cookie, in seconds (default: 2 weeks).\nSESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2\n\n# Whether a user's session cookie expires when the Web browser is closed.\nSESSION_EXPIRE_AT_BROWSER_CLOSE = False\n\n# Whether to save the session data on every request. Default is `False`\nSESSION_SAVE_EVERY_REQUEST = False\n\n# Whether to allow a user to create a base in personal workspace. Default by `False`\nDISABLE_ADDING_PERSONAL_BASES = False\n</code></pre>"},{"location":"config/dtable_web_settings/#other-options","title":"Other options","text":"<pre><code># Choices can be found here:\n# https://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.\n# Otherwise there may be problems with the export or data processing\n# of the date-column.\n# Here some examples:\nTIME_ZONE = 'UTC'\nTIME_ZONE = 'Europe/Berlin'\nTIME_ZONE = 'America/New_York'\n\n# Disable settings via Web interface in system admin-&gt;settings\n# Default is True\nENABLE_SETTINGS_VIA_WEB = False\n\n# Language code for this installation. All choices can be found here:\n# http://www.i18nguy.com/unicode/language-identifiers.html\n# Default language for sending emails.\nLANGUAGE_CODE = 'en'\n\n# Custom language code choice.\nLANGUAGES = (\n    ('en', 'English'),\n    ('zh-cn', '\u7b80\u4f53\u4e2d\u6587'),\n    ('zh-tw', '\u7e41\u9ad4\u4e2d\u6587'),\n)\n\n# Set this to your website/company's name. This is contained in email notifications and welcome message when user login for the first time.\nSITE_NAME = 'SeaTable'\n\n# Browser tab's title\nSITE_TITLE = 'Private SeaTable'\n\n\n# Configure user help pages\nHELP_LINK = 'https://seatable.io/help/'\n\n# Add privacy policy link and terms link\nPRIVACY_POLICY_LINK = ''\nTERMS_OF_SERVICE_LINK = ''\n\n# Predefined custom colors that can be used in color rules, options of single select and so on\nCUSTOM_COLORS = [\n    {'color':'#F5C043','text_color':'#212529'},\n    {'color':'#3064BC','text_color':'#FFFFFF'},\n]\n\n# Default Seafile Server URL used in third party integration\nDEFAULT_SEAFILE_SERVER = 'https://seafile.example.com/'\n</code></pre>"},{"location":"config/dtable_web_settings/#group-member-limit","title":"Group member limit","text":"<p>The default is 500.</p> <pre><code>GROUP_MEMBER_LIMIT = 500\n</code></pre>"},{"location":"config/dtable_web_settings/#big-data-import-export","title":"Big data import / export","text":"<p>When importing / updating a base from excel or exporting an big data view to Excel, you can set the maximum number of rows in the configuration file:</p> <pre><code>ARCHIVE_VIEW_EXPORT_ROW_LIMIT = 250000\nBIG_DATA_ROW_IMPORT_LIMIT = 500000\nBIG_DATA_ROW_UPDATE_LIMIT = 500000\n</code></pre>"},{"location":"config/dtable_web_settings/#size-of-base-export","title":"Size of base export","text":"<p>Maxmum size of a base can be exported.</p> <pre><code>DTABLE_EXPORT_MAX_SIZE = 100 # mb\n</code></pre>"},{"location":"config/dtable_web_settings/#limit-of-collaborators-loaded-in-a-base","title":"Limit of collaborators loaded in a base","text":"<p>After opening a base, the first 300 collaborators and the first 100 external application accounts are loaded by default. These data are used to select collaborators in the collaborator column. If you need to load more collaborators, you can modify the following parameters.</p> <pre><code>DTABLE_RELATED_USERS_PER_PAGE = 300\nDTABLE_APP_USERS_PER_PAGE = 100\n</code></pre>"},{"location":"config/dtable_web_settings/#embed-bases-into-other-webpages","title":"Embed Bases into other webpages","text":"<p>Embed Bases into other webpages (iframe mode), the following options need to be added to support user login</p> <pre><code>SESSION_COOKIE_SAMESITE = 'None'\nSESSION_COOKIE_SECURE = True\nCSRF_COOKIE_SAMESITE = 'None'\nCSRF_COOKIE_SECURE = True\n</code></pre>"},{"location":"config/dtable_web_settings/#restful-api","title":"RESTful API","text":"<p>API throttling related settings. Enlarger the rates if you got 429 response code during API calls. API_THROTTLE_RATES is used to replace the old REST_FRAMEWORK option. API_THROTTLE_RATES is empty by default. You can add your custom THROTTLE_RATE to the option</p> <pre><code>API_THROTTLE_RATES = {\n   'ping': '3000/minute',\n   'anon': '60/minute',\n   'user': '3000/minute',\n   'sync_common_dataset': '60/minute',\n   'password_reset': '10/minute',\n   'org-admin': '1000/day',\n   'app': '1000/minute',\n   'import': '20/minute',   # Limit the rate of API calls for importing via excel/csv\n   'export': '20/minute',   # Limit the rate of export base, table and view\n}\n\n# Throttling whitelist used to disable throttle for certain IPs.\n# e.g. REST_FRAMEWORK_THROTTLING_WHITELIST = ['127.0.0.1', '192.168.1.1']\n# Please make sure `REMOTE_ADDR` header is configured in Nginx conf\nREST_FRAMEWORK_THROTTLING_WHITELIST = []\n</code></pre>"},{"location":"config/dtable_web_settings/#recycle-bin-automatic-emptying-time-interval","title":"Recycle bin automatic emptying time interval","text":"<p>The default is 30.</p> <pre><code>TRASH_CLEAN_AFTER_DAYS = 30\n</code></pre>"},{"location":"config/environment_variables/","title":"List of available environment variables","text":"<p>SeaTable supports environment variables for initial deployment and configuration of some settings. This is the complete list of supported settings. With every version, new variables will be added.</p>"},{"location":"config/environment_variables/#table-of-settings","title":"Table of settings","text":""},{"location":"config/environment_variables/#basic-setup","title":"Basic setup","text":"Environment Variable Description Version COMPOSE_FILE List of yaml files. Specifing with services should run on the server. 3.4 COMPOSE_PATH_SEPARATOR Separator of yaml files.By default, value is ',' 3.4 TIME_ZONE 3.4 SEATABLE_SERVER_HOSTNAME 3.4 SEATABLE_SERVER_PROTOCOL 3.4 SEATABLE_ADMIN_EMAIL 3.4 SEATABLE_MYSQL_ROOT_PASSWORD 3.4"},{"location":"config/environment_variables/#python-pipeline","title":"Python Pipeline","text":"Environment Variable Description Version PYTHON_SCHEDULER_AUTH_TOKEN Shared token for secure communication between Python Scheduler and SeaTable Server 3.4 PYTHON_SCHEDULER_LOG_LEVEL Allowed values: INFO, WARNING, DEBUG, ERROR 3.4 DELETE_LOG_DAYS DELETE_STATISTICS_DAYS"},{"location":"config/environment_variables/#configuration","title":"Configuration","text":""},{"location":"config/environment_variables/#basic-setup_1","title":"Basic setup","text":"<p>3.4</p> <p>These are the basic settings to configure a SeaTable Server.</p> <pre><code>COMPOSE_FILE='caddy.yml,seatable-server.yml'\nCOMPOSE_PATH_SEPARATOR=','\nTIME_ZONE='Europe/Berlin'\nSEATABLE_SERVER_HOSTNAME=\nSEATABLE_SERVER_PROTOCOL='https'\nSEATABLE_ADMIN_EMAIL=\nSEATABLE_ADMIN_PASSWORD=\nSEATABLE_MYSQL_ROOT_PASSWORD=\n</code></pre> <p>More explanations to ...</p>"},{"location":"config/environment_variables/#python-pipeline_1","title":"Python Pipeline","text":"<p>3.4</p> <pre><code>PYTHON_SCHEDULER_AUTH_TOKEN\n</code></pre>"},{"location":"config/environment_variables/#custom-images","title":"Custom Images","text":"<p>3.4 </p> <p>You can easily overrule which images should be used. Just add other docker images that are accessable from Docker Hub.</p> <pre><code>SEATABLE_IMAGE=\nSEATABLE_DB_IMAGE=\nSEATABLE_MEMCACHED_IMAGE=\nSEATABLE_REDIS_IMAGE=\nIMAGE_CADDY=\nPYTHON_SCHEDULER_IMAGE=\nPYTHON_STARTER_IMAGE=\nPYTHON_RUNNER_IMAGE=\nCOLLABORA_IMAGE=\nONLYOFFICE_IMAGE=\nUPTIMEKUMA_IMAGE=\nZABBIX_SERVER_IMAGE=\nZABBIX_WEB_IMAGE=\nZABBIX_AGENT_IMAGE=\n</code></pre>"},{"location":"config/environment_variables/#example-env-file","title":"Example .env file","text":"<pre><code># components to be used\nCOMPOSE_FILE='caddy.yml,seatable-server.yml' # (1)!\nCOMPOSE_PATH_SEPARATOR=','\n\n# system settings\nTIME_ZONE='Europe/Berlin' # (2)!\n\n# seatable server base url\nSEATABLE_SERVER_HOSTNAME='seatable.example.com' # (3)!\nSEATABLE_SERVER_PROTOCOL='https' # (4)!\n\n# initial web admin\nSEATABLE_ADMIN_EMAIL='me@example.com' # (5)!\nSEATABLE_ADMIN_PASSWORD='topsecret' # (6)!\n\n# database\nSEATABLE_MYSQL_ROOT_PASSWORD='topsecret' # (7)!\n\n# python pipeline\n</code></pre> <ol> <li>COMPOSE_FILE is a comma separated list without spaces. This list defines which components should run on this server.</li> <li>Get a list of timezones from Wikipedia.</li> <li>Select your domain or subdomain that points to your Server (without https://). You have to set an A-Record or CNAME pointing to your IP.</li> <li>Available options are <code>http</code> and <code>https</code>. Default value is <code>https</code>.</li> <li>Email address of an initial admin user. Is only used once.</li> <li>...</li> <li>...</li> </ol>"},{"location":"config/frontend_html_template_system/","title":"SeaTable Frontend Modification","text":"<p>With the help of dtable_web_settings.py SeaTable offers a wealth of configuration options to enable or disable individual functions in the frontend or to customize the frontend to your own needs.</p> <p>At the same time, you can only intervene in the design of the frontend to a limited extent with the help of the configuration files. For this, SeaTable offers a sophisticated template system to selectively replace individual page areas with their own versions.</p> <p>This article introduces this form of customizing.</p>"},{"location":"config/frontend_html_template_system/#what-can-be-customized","title":"What can be customized?","text":"<p>SeaTable uses predefined HTML templates for almost all web pages and emails, which can be customized. Changes to the base editor are thus not possible, but adjustments to the login page or changes to individual email texts are possible without problems.</p> <p>The basic idea is simple. You take the files provided by seatable and copy them to a special place outside the container. These copied files can then be customized. If SeaTable (after a restart) finds these files, they will be used instead of the original files. The duplicated and customized files are stored outside the SeaTable docker container, so that the customizations survive an update vno seatable.</p> <p>All files below <code>/opt/seatable/seatable-server-latest/dtable-web/seahub/templates/</code> (inside the SeaTable container) can be customized. Here are a few examples that lend themselves to this:</p> <ul> <li>404.html: Error page, if the URL is not available.</li> <li>500.html: Error page, in case of a critical error</li> <li>registration/login.html: Login page</li> <li>registration/logout.html: Logout page</li> <li>registration/registration_form.html: Self-registration page</li> <li>registration/activation_email.html: E-Mail after self-registration (if activation is required)</li> <li>shared_link_email.html: E-Mail if somebody shares a link with another user</li> </ul> <p>There are many more files, and all of them can be customized.</p>"},{"location":"config/frontend_html_template_system/#how-to-customize-these-files","title":"How to customize these files?","text":"<p>The basic approach is simple. Create a custom folder in your host system (usually <code>/opt/seatable/seatable-data/seatable/seahub-data/custom</code>) and copy the files you want to change to this folder. After a restart SeaTable will check for existing files in your custom directory and replace the original files with the new ones.</p> <p>IMPORTANT NOTES:</p> <ol> <li>Files must not be renamed. If the file is called <code>404.html</code>, then the file has to keep this name. Otherwise the replacement with your custom files will not work.</li> <li>Keep the files in the same directory structure. If you want to replace <code>registration/login.html</code>, then you have to create a folder <code>registration</code> in your custom folder and copy the file <code>login.html</code> to this new directory.</li> </ol> <p>Imagine this customizing like an overlay. SeaTable takes the original files from inside the container. If SeaTable finds the files with the same name in the same directory structure, it replaces the original files.</p>"},{"location":"config/frontend_html_template_system/#example-new-login-page","title":"Example: new login page","text":"<p>Imagine you want to replace the login page of SeaTable with something fancier. Here is what you have to do. The following example assumes that your SeaTable docker container is called <code>seatable</code> and that your mounted docker volume is located at <code>/opt/seatable/seatable-data</code>. Please check your docker-compose.yml and change the following examples if necessary.</p> <p></p>"},{"location":"config/frontend_html_template_system/#1-create-custom-folder","title":"1. Create custom folder","text":"<p>This step must be done only once. It generates the setup that you can start overwrite existing html-files from SeaTable with your own ones. You need the folder to save the copies outside of your docker container and you need a symlink that SeaTable can find your custom files.</p> <pre><code>cd /opt/seatable/seatable-data/seatable/seahub-data\nmkdir -p custom/templates/registration\ndocker exec -it seatable ln -s /shared/seatable/seahub-data/custom /opt/seatable/seatable-server-latest/dtable-web/media/custom\n</code></pre>"},{"location":"config/frontend_html_template_system/#2-copy-the-original-loginhtml-to-your-custom-folder","title":"2. Copy the original login.html to your custom folder","text":"<pre><code>$ docker cp seatable:/opt/seatable/seatable-server-latest/dtable-web/seahub/templates/registration/login.html /opt/seatable/seatable-data/seatable/seahub-data/custom/templates/registration/login.html\n</code></pre>"},{"location":"config/frontend_html_template_system/#3-adapt-the-loginhtml-according-to-your-needs","title":"3. Adapt the login.html according to your needs","text":"<p>Now you can start editing your login.html. Otherwise you can take one of these examples (tested with SeaTable 4.0.x):</p> <p>Example 1: Simple login form</p> <p></p> <p>Copy the following content to your login.html. As you can see, the login page was reduced to the maximum. There is no box around the input fields, there is no language selector, no single sign on, no signup or forget password. Error messages are still shown and security features like CSCF and Captcha is still part of the login page.</p> <pre><code>{% extends \"base_clean.html\" %}\n{% load i18n %}\n{% block private_style %}\n.show-password-toggle {\n    position: absolute;\n    top: 8px;\n    right: 10px;\n    cursor: pointer;\n    color: #999;\n}\n.show-password-toggle:hover {\n    color: #666;\n}\n.login-panel {\n  background: none;\n  border-radius: none;\n  box-shadow: none;\n}\n.vh {\n  visibility: inherit !important;\n}\n{% endblock %}\n{% block main_content %}\n&lt;div class=\"login-panel-outer-container mt-6 vh\"&gt;\n&lt;div class=\"login-panel\"&gt;\n    &lt;form action=\"\" method=\"post\" id=\"login-form\"&gt;{% csrf_token %}\n        &lt;input type=\"text\" name=\"login\" placeholder=\"Email / Username\" %}\" aria-label=\"{% trans \"Phone, email or username\" %}\" title=\"{% trans \"Phone, email or username\" %}\" value=\"\" class=\"input name-input\" /&gt;&lt;br /&gt;\n        &lt;div class=\"position-relative\"&gt;\n            &lt;input type=\"password\" name=\"password\" placeholder=\"{% trans \"Password\" %}\" aria-label=\"{% trans \"Password\" %}\" title=\"{% trans \"Password\" %}\" value=\"\" class=\"input passwd-input\" id=\"id_password1\" autocomplete=\"off\" /&gt;\n            &lt;span class=\"show-password-toggle dtable-font dtable-icon-eye-slash\"&gt;&lt;/span&gt;\n        &lt;/div&gt;\n        {% if form.captcha %}\n        &lt;div class=\"ovhd\"&gt;\n            &lt;span id=\"refresh-captcha\" title=\"{% trans \"Refresh\" %}\" class=\"icon-refresh op-icon fright\"&gt;&lt;/span&gt;\n            {{ form.captcha }}\n        &lt;/div&gt;\n        {% endif %}\n        &lt;input type=\"hidden\" name=\"next\" value=\"{% if next %}{{ next|escape }}{% else %}{{ SITE_ROOT }}{% endif %}\" /&gt;\n        {% if form.errors %}\n        {% if form.captcha.errors %}\n        {{ form.captcha.errors}}\n        {% elif form.errors.freeze_account %}\n        &lt;p class=\"error\"&gt;{{ form.errors.freeze_account }}&lt;/p&gt;\n        {% elif form.errors.inactive %}\n        &lt;p class=\"error\"&gt;{{ form.errors.inactive }}&lt;/p&gt;\n        {% elif form.errors.not_found %}\n        &lt;p class=\"error\"&gt;{{ form.errors.not_found }}&lt;/p&gt;\n        {% elif form.password.errors %}\n        &lt;p class=\"error\"&gt;{{ form.password.errors }}&lt;/p&gt;\n        {% else %}\n        &lt;p class=\"error\"&gt;{% trans \"Incorrect account or password\" %}&lt;/p&gt;\n        {% endif %}\n        {% else %}\n        &lt;p class=\"error hide\"&gt;&lt;/p&gt;\n        {% endif %}\n        &lt;input type=\"hidden\" name=\"member_me\" value=\"on\" /&gt;\n        &lt;button type=\"submit\" class=\"submit btn btn-primary btn-block\"&gt;{% trans \"Log In\" %}&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n{% endblock %}\n{% block extra_script %}\n&lt;script type=\"text/javascript\"&gt;\n$('[name=\"login\"]').trigger('focus');\nfunction setCaptchaInputWidth() {\n    $('#id_captcha_1').outerWidth($('.input').outerWidth() - $('.captcha').width() - $('#refresh-captcha').outerWidth(true) - 10);\n}\n$(window).on('load', setCaptchaInputWidth);\n$('.captcha').on('load', setCaptchaInputWidth);\n$('#refresh-captcha').on('click', function() {\n    $.ajax({\n        url: '{% url 'captcha-refresh' %}',\n        dataType:'json',\n        cache:false,\n        success: function(data) {\n            $('.captcha').attr('src', data['image_url']);\n            $('#id_captcha_0').val(data['key']);\n        },\n        error: function() {\n            $('.error').removeClass('hide').html(\"{% trans \"Failed to refresh the CAPTCHA, please try again later.\" %}\");\n        }\n    });\n    return false;\n});\n$(\"body\").on('click', '.show-password-toggle', function(){\n    var $pass1 = document.getElementById(\"id_password1\");\n    if ($pass1.type === \"password\") {\n        $pass1.type = \"text\";\n    } else {\n        $pass1.type = \"password\";\n    }\n    $(this).toggleClass(\"dtable-icon-eye-slash dtable-icon-eye\")\n});\n$('#login-form').on('submit', function(){\n    if (!$.trim($('input[name=\"login\"]').val())) {\n        $('.error').removeClass('hide').html(\"{% trans \"Phone, email or username cannot be blank\" %}\");\n        return false;\n    }\n    if (!$.trim($('input[name=\"password\"]').val())) {\n        $('.error').removeClass('hide').html(\"{% trans \"Password cannot be blank\" %}\");\n        return false;\n    }\n});\n$(function() {\n    $('input:not([type=\"hidden\"])').each(function(index) {\n        $(this).attr('tabindex', index + 1);\n    });\n});\n&lt;/script&gt;\n{% endblock %}\n</code></pre>"},{"location":"config/frontend_html_template_system/#4-restart-seatable-service","title":"4. Restart seatable service","text":"<p>Only one command is missing to restart SeaTable and to activate your new login page.</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh restart\n</code></pre>"},{"location":"config/frontend_html_template_system/#translation","title":"Translation","text":"<p>In the HTML files you will see strings like <code>{% trans \"Forgot password?\" %}</code>. This is a placeholder, that will be replaced by other language strings depending on which language the user has selected. Translations and changes to these language strings is not part of this article. There will be another article in the near future.</p>"},{"location":"config/integrate-with-seafile/","title":"Integrate with Seafile","text":"<p>Note</p> <pre><code>Beginning with SeaTable Server 4.0, the integration with Seafile works out of the box. No more modification of the nginx configuration is required.\n</code></pre> <p>When integrating SeaTable and Seafile, users can add files from Seafile libraries in file columns and users can transfer files from SeaTable to Seafile.</p>"},{"location":"config/integrate-with-seafile/#requirements","title":"Requirements","text":"<p>The cross-domain permissions must be set. This can be done by adding the \"Access-Control-Allow-Origin\" header.</p> <p>Add the following code block to the configuration file <code>seafile.conf</code> in <code>/etc/nginx/sites-available/</code>:</p> <pre><code>    location / {\n        add_header Access-Control-Allow-Origin *;\n        if ($request_method = 'OPTIONS') {\n            add_header Access-Control-Allow-Origin *;\n            add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;\n            add_header Access-Control-Allow-Headers \"deviceType,token, authorization, content-type\";\n            return 204;\n        }\n\ufeff\n        proxy_pass         http://127.0.0.1:8000;\n        ...............\n</code></pre>"},{"location":"config/plugins/","title":"Plugins","text":"<p>With the exception of the calendar plugin (which is bundled with SeaTable Server), SeaTable plugins must be separately installed. But the installation is just a peace of cake. Only the Map Plugin requires additional configuration.</p>"},{"location":"config/plugins/#installation-of-the-plugins","title":"Installation of the plugins","text":""},{"location":"config/plugins/#option-1-installation-via-webinterface","title":"Option 1: Installation via Webinterface","text":"<p>In <code>System Admin -&gt; Plugins -&gt; Import plugins from market</code>, you can import the latest plugins from the official SeaTable plugin directory directly. This requires that your SeaTable System has access to the internet and can download zip files from https://market.seatable.io.</p> <p>\"Sceenshot\"</p> <p>Now all users can use the plugins in every base. Voila !!! That was not so difficult, right?</p>"},{"location":"config/plugins/#option-2-installation-via-zip-upload","title":"Option 2: Installation via ZIP-Upload","text":"<p>If you Server has no internet connection, then you can install the plugins by upload a ZIP file. You can get a list of available plugins from https://market.seatable.io/api/plugins and also download the latest version of the plugins as ZIP files:</p> <ul> <li>https://market.seatable.io/api/plugins/timeline</li> <li>https://market.seatable.io/api/plugins/gallery</li> <li>https://market.seatable.io/api/plugins/page-design</li> <li>https://market.seatable.io/api/plugins/kanban</li> <li>...</li> </ul> <p>Once uploaded to the SeaTable Server via system administration in the web interface, users can add them to their bases via the plugin manager.</p> <p></p>"},{"location":"config/plugins/#option-3-installation-via-api","title":"Option 3: Installation via API","text":"<p>...</p>"},{"location":"config/plugins/#configuration-of-the-plugins","title":"Configuration of the plugins","text":""},{"location":"config/plugins/#map-plugin","title":"Map plugin","text":"<p>The map plugin currently supports only the Google Maps Platform. For the map plugin to access Google Maps data, a Google API Key is required.</p> <p>Add the following line to <code>dtable_web_settings.py</code> :</p> <pre><code>DTABLE_GOOGLE_MAP_KEY = \u2018xxxx\u2019\n</code></pre>"},{"location":"config/plugins/#other-plugins","title":"Other plugins","text":"<p>All other plugins does not require any further configuration. They work out of the box.</p>"},{"location":"config/seafile-conf/","title":"seafile.conf settings","text":""},{"location":"config/seafile-conf/#seafile-fileserver-configuration","title":"Seafile fileserver configuration","text":"<p>The configuration of seafile fileserver is in the <code>[fileserver]</code> section of the file <code>seafile.conf</code></p> <pre><code>[fileserver]\n# tcp port for fileserver\nport = 8082\n# bind address for fileserver\n# default to 0.0.0.0, if deployed without proxy: no access restriction\n# set to 127.0.0.1, if used with local proxy: only access by local\nhost = 127.0.0.1\n# set the number of worker threads to server http requests. \n# Default value is 10, which is a good value for most use cases.\nworker_threads = 15\n</code></pre>"},{"location":"config/seafile-conf/#database-configuration","title":"Database configuration","text":"<p>The whole database configuration is stored in the <code>[database]</code> section of the configuration file.</p> <pre><code>[database]\ntype = mysql\nhost = db\nport = 3306\nuser = root\npassword = seatable_db\ndb_name = seafile_db\nconnection_charset = utf8\nmax_connections=100\n</code></pre> <p>When you configure seafile server to use MariaDB, the default connection pool size is 100, which should be enough for most use cases.</p>"},{"location":"config/seatable-controller-conf/","title":"seatable-controller.conf","text":"<p>seatable-controller launches and monitors different components of SeaTable server.</p> <p>seatable-controller.conf is not created by default. If you need to modify default behaviour of seatable-controller, you can add the config file manually with contents like below:</p> <pre><code>DTABLE_SERVER_MEMORY_SIZE=8192\nDTABLE_SERVER_PING_TIMEOUT=20\n</code></pre> <ul> <li> <p>DTABLE_SERVER_MEMORY_SIZE: the memory size of dtable-server node</p> </li> <li> <p>DTABLE_SERVER_PING_TIMEOUT: maximum seconds after which the system will reboot if there is no response from dtable-server, you can set a relative higher number if you handle a big table.</p> </li> </ul>"},{"location":"config/sending_email/","title":"Sending Email Notifications on SeaTable","text":""},{"location":"config/sending_email/#types-of-email-sending-in-seatable","title":"Types of Email Sending in SeaTable","text":"<p>There are currently five types of emails sent in SeaTable :</p> <ul> <li>User resets their password</li> <li>User has been added as a collaborator in a table, or mentioned in a comment (depends on the user's email notification settings and that the notification is not seen within 1 hour)</li> <li>User has been shared with a base or added to a group</li> <li>System admin adds new members</li> <li>System admin resets user password</li> </ul>"},{"location":"config/sending_email/#options-of-email-sending","title":"Options of Email Sending","text":"<p>Add the following lines to <code>dtable_web_settings.py</code> to enable email sending.</p> <pre><code>EMAIL_USE_TLS = False\nEMAIL_HOST = 'smtp.example.com'        # smpt server\nEMAIL_HOST_USER = 'username@example.com'    # username and domain\nEMAIL_HOST_PASSWORD = 'password'    # password\nEMAIL_PORT = 25\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\nSERVER_EMAIL = EMAIL_HOST_USER\n</code></pre> <p>Note 1. If your email service does not work, you can check the log file <code>logs/dtable_web.log</code> to see what may have caused the problem.  2. If you want to use the email service without authentication, leave <code>EMAIL_HOST_USER</code> and <code>EMAIL_HOST_PASSWORD</code> blank (<code>''</code>). The emails will then be sent without a <code>From:</code> address. 3. About using SSL connection (using port 465): Port 587 is being used to establish a TLS connection and port 465 is being used to establish an SSL connection.  Starting from Django 1.8, it supports both.</p> <p>If you are using Gmail as email server, use following lines:</p> <p><pre><code>EMAIL_USE_TLS = True\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_HOST_USER = 'username@gmail.com'\nEMAIL_HOST_PASSWORD = 'password'\nEMAIL_PORT = 587\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\nSERVER_EMAIL = EMAIL_HOST_USER\n</code></pre> Note if you use Gmail:  1. If you have enabled 2-step-verification in your Gmail settings, you'll need an App Password instead of your login password. 2. If you haven't enabled 2-step-verification in your Gmail settings, you must then enable Less Secure Apps.</p>"},{"location":"config/templates_and_manual/","title":"Configuration of Manual, Templates, and Plugins","text":""},{"location":"config/templates_and_manual/#configuration-of-the-manual","title":"Configuration of the Manual","text":"<pre><code>HELP_LINK = 'https://docs.seatable.io/'\n</code></pre>"},{"location":"config/templates_and_manual/#configuration-of-templates","title":"Configuration of Templates","text":"<p>Using templates requires a version above 1.6.0 of SeaTable. Here are several steps:</p> <ol> <li>Enable creating base from templates in config file <code>dtable_web_settings.py</code>.</li> <li>Prepare a base for storing the table of template list in your own SeaTable account. In this base, create a table named <code>templates</code>.</li> <li>Prepare several template bases and generate an external-link, which should be filled in the designated cell of column named <code>link</code> of the table prepared in the second step.</li> </ol> <p>We suggest that the base of template list and templates be put together in one group.</p> <p>An example of the <code>templates</code> table is shown as below. You can not change the column title, otherwise the auto-generated template preview is not working anymore.</p> <p></p> <ul> <li>name [text]: internal name for distinguishing between different templates.</li> <li>category [single-select]:</li> <li>display_name [text]: template name shown on the website.</li> <li>description [long-text]: introduction and suggestions of the template.</li> <li>card_image [image]: image shown on the template panel on the website.</li> <li>card_image_expanded [image]: image shown on the template detail dialog after clicking the template panel.</li> <li>link [url]: the sharing link of the specific template.</li> </ul>"},{"location":"config/templates_and_manual/#activate-templates-in-seatable","title":"Activate templates in SeaTable","text":"<p>Add the following lines to <code>dtable_web_settings.py</code> :</p> <pre><code>TEMPLATE_BASE_API_TOKEN = '9851cecfd013a833eec47b629c72b3b593f91c7d'\nTEMPLATE_TABLE_NAME = 'templates'\nENABLE_CREATE_BASE_FROM_TEMPLATE = True\nSHOW_TEMPLATES_LINK = True\n</code></pre> <p>Note that the \"TEMPLATE_BASE_API_TOKEN\" can be generated from \"Advanced --&gt; API Token\" option from the dropdown-menu of the template base.</p>"},{"location":"config/templates_and_manual/#making-templates","title":"Making templates","text":"<p>You can either choose downloading our public templates formatted as \u201c.dtable\u201c and import it to your own SeaTable server, or make a template according to your own interests by yourself.</p>"},{"location":"config/universal_apps/","title":"Universal apps","text":"<p>3.3 Enterprise Edition </p> <p>Since Version 4.0, universal apps are enabled by default. Before that universal app could be enabled with the following parameter in <code>dtable_web_settings.py</code>.</p> <pre><code>ENABLE_UNIVERSAL_APP = True\n</code></pre>"},{"location":"config/enterprise/deploy_onlyoffice_docker/","title":"Deploy ONLYOFFICE Documentserver","text":"<p>OnlyOffice offers real-time collaboration with office documents in your browser. As soon as you open a file from SeaTable, OnlyOffice opens in a new browser tab and allows real time collaboration. As soon as the last user exits the document by closing his browser window, the document is saved back to the SeaTable base. Access takes place via the public URL via HTTPS. So that OnlyOffice cannot be used by other systems, a shared secret in the form of a JWT key is used.</p>"},{"location":"config/enterprise/deploy_onlyoffice_docker/#requirements","title":"Requirements","text":"<p>OnlyOffice requires SeaTable Enterprise Edition</p> <p>OnlyOffice Documentserver (ONLYOFFICE) can be installed on the same host as SeaTable Enterprise Edition. If OnlyOffice is used regularly and by many users, the host should be fitted with more cores and RAM.</p> <p>This tutorial assumes that SeaTable Enterprise Edition is installed and is running.</p>"},{"location":"config/enterprise/deploy_onlyoffice_docker/#setup","title":"Setup","text":"<p>This manual describes the deployment of OnlyOffice with Docker. Thanks to Docker Compose, the deployment is straightforward and done with little effort.</p>"},{"location":"config/enterprise/deploy_onlyoffice_docker/#stop-seatable-server","title":"Stop SeaTable Server","text":"<p>When running, stop SeaTable and all associated Docker containers:</p> <pre><code>cd /opt/seatable\ndocker compose down\n</code></pre>"},{"location":"config/enterprise/deploy_onlyoffice_docker/#enhance-docker-composeyml","title":"Enhance docker-compose.yml","text":"<p>Add the following part to your <code>docker-compose.yml</code> as a new service. Make sure that the indentations are correct. With the next start of SeaTable, OnlyOffice will be downloaded automatically. Alter the value for JWT_SECRET and memorize it for later.</p> <pre><code>  onlyoffice:\n    image: onlyoffice/documentserver:latest\n    container_name: onlyoffice\n    volumes:\n      - /opt/onlyoffice/logs:/var/log/onlyoffice\n      - /opt/onlyoffice/data:/var/www/onlyoffice/Data\n      - /opt/onlyoffice/lib:/var/lib/onlyoffice\n    environment:\n      - JWT_ENABLED=true\n      - JWT_SECRET=topsecret\n    networks:\n      - seatable-net\n</code></pre>"},{"location":"config/enterprise/deploy_onlyoffice_docker/#modifying-dtable_web_setingspy","title":"Modifying dtable_web_setings.py","text":"<p>Open <code>/opt/seatable/seatable-data/seatable/conf/dtable_web_settings.py</code> with your favorite editor and add the following code block at the end of the file.</p> <pre><code># onlyoffice\nENABLE_ONLYOFFICE = True\nONLYOFFICE_APIJS_URL = \"https://SEATABLE_SERVER_HOSTNAME/onlyofficeds/web-apps/apps/api/documents/api.js\"\nONLYOFFICE_FILE_EXTENSION = ('doc', 'docx', 'ppt', 'pptx', 'xls', 'xlsx', 'odt', 'fodt', 'odp', 'fodp', 'ods', 'fods', 'csv', 'ppsx', 'pps')\nONLYOFFICE_JWT_SECRET = 'topsecret'\n</code></pre> <p>Change <code>SEATABLE_SERVER_HOSTNAME</code> to reflect the hostname of your SeaTable server. Additionally, adjust the value for <code>ONLYOFFICE_JWT_SECRET</code> to correspond to the JWT_SECRET in the <code>docker-compose.yml</code> file.</p>"},{"location":"config/enterprise/deploy_onlyoffice_docker/#modify-your-nginc-configuration","title":"Modify your nginc configuration","text":"<p>Open the nginx configuration file <code>/opt/seatable/seatable-data/seatable/conf/nginx.conf</code> and paste the following lines at the top of the configuration file:</p> <pre><code># Required for only office document server\nmap $http_x_forwarded_proto $the_scheme {\n  default $http_x_forwarded_proto;\n  \"\" $scheme;\n}\nmap $http_x_forwarded_host $the_host {\n  default $http_x_forwarded_host;\n  \"\" $host;\n}\nmap $http_upgrade $proxy_connection {\n  default upgrade;\n  \"\" close;\n}\n</code></pre> <p>Add the following new location for OnlyOffice to the server block.</p> <pre><code>location /onlyofficeds/ {\n  proxy_pass http://onlyoffice/;   # this must be the name of your onlyoffice container from docker-compose.yml\n  proxy_http_version 1.1;\n  client_max_body_size 100M;\n  proxy_read_timeout 3600s;\n  proxy_connect_timeout 3600s;\n  proxy_set_header Upgrade $http_upgrade;\n  proxy_set_header Connection $proxy_connection;\n  proxy_set_header X-Forwarded-Host $the_host/onlyofficeds;\n  proxy_set_header X-Forwarded-Proto $the_scheme;\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n</code></pre>"},{"location":"config/enterprise/deploy_onlyoffice_docker/#download-onlyoffice-and-restart","title":"Download onlyoffice and restart","text":"<p>OnlyOffice is now configured and office documents can be directly edited from within SeaTable after a restart of the SeaTable service.</p> <pre><code>docker compose up -d\ndocker exec -d seatable /shared/seatable/scripts/seatable.sh start\n</code></pre> <p>OnlyOffice takes some time to start up. If you get an error message when clicking an office file in SeaTable, be patient. With <code>docker compose logs -f onlyoffice</code>, you can monitor the startup progress.</p> <p>Try to open https://SEATABLE_SERVER_HOSTNAME/onlyofficeds/welcome. You should see a welcome page like this.</p> <p></p> <p>Try to open an docx-file from a SeaTable base.</p> <p>Onlyoffice is ready, if a new browser window opens with your office document. Any user with access to this base can now open this document with OnlyOffice.</p>"},{"location":"config/enterprise/deploy_onlyoffice_docker/#troubleshooting","title":"Troubleshooting","text":"<p>1. SeaTable doesn't start anymore/SeaTable is no longer accessible, what can I do?</p> <p>It is likely that there is a misconfiguration in either nginx.conf or dtable_web_settings.py.</p> <p>After docker-composing up, run <code>docker exec -it seatable nginx -t</code> to check the nginx configuration. If the nginx configuration is invalid, the output will tell you.</p> <p>If nginx shows no error, enter the seatable container and try to start SeaTable manually:</p> <pre><code>docker exec -it seatable bash\n/shared/seatable/scripts/seatable.sh start\n</code></pre> <p>2. There is not welcome page from OnlyOffice</p> <p>If <code>https://SEATABLE_SERVER_HOSTNAME/onlyofficeds/welcome</code> shows a SeaTable error page, you should check the nginx configuration file. Make sure that the two components are added and that there are no nginx errors and restart nginx.</p> <pre><code>cd /opt/seatable/seatable-data/seatable/conf\nnano nginx.conf\n</code></pre> <p>This part should be right on top of the configuration file:</p> <pre><code># Required for only office document server\nmap $http_x_forwarded_proto $the_scheme {\n  default $http_x_forwarded_proto;\n  \"\" $scheme;\n}\nmap $http_x_forwarded_host $the_host {\n  default $http_x_forwarded_host;\n  \"\" $host;\n}\nmap $http_upgrade $proxy_connection {\n  default upgrade;\n  \"\" close;\n}\n</code></pre> <p>There should be a location /onlyofficeds anywhere in your server block.</p> <pre><code>location /onlyofficeds/ {\n  proxy_pass http://onlyoffice/;\n  proxy_http_version 1.1;\n  client_max_body_size 100M;\n  proxy_read_timeout 3600s;\n  proxy_connect_timeout 3600s;\n  proxy_set_header Upgrade $http_upgrade;\n  proxy_set_header Connection $proxy_connection;\n  proxy_set_header X-Forwarded-Host $the_host/onlyofficeds;\n  proxy_set_header X-Forwarded-Proto $the_scheme;\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n</code></pre> <p>Restart nginx and seatable from container and try again.</p> <p>3. OnlyOffice Welcome page is shown but document does not open</p> <p>Check your configuration of <code>dtable_web_settings.py</code>. Make sure that you added your public SeaTable Server address. Make sure that <code>jwt-token</code> is the same in <code>dtable_web_settings.py</code> and <code>docker-compose.yml</code>.</p>"},{"location":"config/enterprise/deploy_onlyoffice_docker/#advanced-custom-settings","title":"Advanced: Custom settings","text":"<p>This is only for onlyoffice experts. You can create and mount a custom configuration file called <code>local-production-linux.json</code> to force some settings.</p> <p>Create a configuration file in the newly created directory:</p> <pre><code>cd /opt/onlyoffice\nnano local-production-linux.json\n</code></pre> <p>Copy the following code block in this file:</p> <pre><code>{\n  \"services\": {\n    \"CoAuthoring\": {\n      \"autoAssembly\": {\n        \"enable\": true,\n        \"interval\": \"5m\"\n      }\n    }\n  },\n  \"FileConverter\": {\n    \"converter\": {\n      \"downloadAttemptMaxCount\": 3\n    }\n  }\n}\n</code></pre> <p>Mount this config file into your onlyoffice block in your <code>docker-compose.yml</code>.</p> <pre><code>  volumes:\n      - /opt/onlyoffice/logs:/var/log/onlyoffice\n      - /opt/onlyoffice/data:/var/www/onlyoffice/Data\n      - /opt/onlyoffice/lib:/var/lib/onlyoffice\n      - /opt/oods/DocumentServer/local-production-linux.json:/etc/onlyoffice/documentserver/local-production-linux.json\n</code></pre> <p>Restart OnlyOffice to load the new configuration.</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"config/enterprise/roles_permissions/","title":"User Roles","text":"<p>1.0 Enterprise Edition</p> <p>In SeaTable Enterprise Edition (SeaTable EE), a user's permissions are determined by the role assigned to the user.</p> <p>SeaTable has two standard roles. Additionally, extra roles can be created for more fine-grained permission management. All changes relating to the SeaTable's roles are done in the configuration file <code>dtable_web_settings.py</code>.</p> <p>NOTE: Admin privileges are not part of the user role.</p>"},{"location":"config/enterprise/roles_permissions/#available-permissions","title":"Available Permissions","text":"<p>The following permissions are supported/deleted in the latest SeaTable version:</p> Permission Added in version Deleted in version Description Additional information can_add_dtable 1.0 Permission to create bases. can_add_group 1.0 Permission to create groups. The user creating a group becomes automatically the group's owner. The permission can_add_dtable is necessary to create bases inside a group. can_use_global_address_book 1.0 Enables autocomplete of names and emails of other users in the system. If cloud_mode = True in <code>dtable_web_settings.py</code>, autocomplete is disabled for personal accounts and autocomplete is enabled inside teams. can_generate_external_link 1.0 Permission to create external links. can_generate_share_link 1.0 2.6 Permission to create invite links. Deprecated because of redundancy with can_generate_external_link. role_asset_quota 1.0 Storage quota for files and images inside a user's bases. '1G' means a storage quota of one gigabyte; an empty value '' means no storage quota. Files in shared bases owned by other users do not count against the user's storage quota. row_limit 1.0 Row limit for all bases of the user. 10000 means a limit of 10,000 rows; -1 means no row limit. Rows in shared bases owned by other users do not count against the row limit. Archived rows does not count against the limit either. can_create_common_dataset 1.0 Permission to create common datasets (CDS). If set to False, the user cannot create CDS, but the user can access existing CDS. can_use_advanced_permissions 1.1 Permission to use advanced permissions. Advanced permissions include table permissions, column permissions, view share, custom sharing permissions, row locking. can_use_advanced_customization 2.0 Permission to use advanced security customizations. Advanced customization includes base security settings. can_run_python_script 1.4 Permission to run Python scripts. The execution of Python scripts requires the installation of FAAS Scheduler and Python Runner. snapshot_days 2.1 Retention period for snapshots in days. 180 (without quotes) means a storage period of 180 days; no value means an unlimited retention period. Snapshots older than the retention period are automatically removed. can_use_external_app 2.2 Permission to use external apps. If set to False, the menu is not shown. can_use_automation_rules 2.2 Permission to create and run automation rules. scripts_running_limit 2.3 Number of Python scripts a user can run within a month. 100 (without quotes) means 100 script runs per month; -1 (without quotes) means unlimited script runs. The script run counter is reset at the beginning of every month. Only visible if can_run_python_script = True and Python Runner is available. can_schedule_run_script 2.3 Permission to schedule the execution of Python scripts. The permission can_run_python_script is also necessary to automatically run Python scripts. can_archive_rows 2.3 Permission to archive rows. If set to False, the user cannot archive rows and cannot create archive views. big_data_row_limit 3.1 Row limit in big data storage for all bases of a team. Similar as 'row_limit' mentioned above This item is used for the role of teams rather than users. If not set, default is no limit"},{"location":"config/enterprise/roles_permissions/#standard-roles","title":"Standard Roles","text":"<p>The two standard roles <code>default</code>and <code>guest</code>are defined as follows:</p> <pre><code>ENABLED_ROLE_PERMISSIONS = {\n    'default': {\n        'can_add_dtable': True,\n        'can_add_group': True,\n        'can_use_global_address_book': True,\n        'can_invite_guest': False,\n        'role_quota': '',\n        'role_asset_quota': '',\n        'row_limit': -1,\n        'can_create_common_dataset': True,\n        'can_generate_external_link': True,\n        'can_run_python_script': True,\n        'can_schedule_run_script': True,\n        'scripts_running_limit': -1,\n        'can_use_advanced_permissions': True,\n        'can_use_advanced_customization': True,\n        'can_use_external_app': True,\n        'can_use_automation_rules': True,\n        'snapshot_days': 180,\n        'share_limit': 100,\n        'can_archive_rows': True,\n        'big_data_row_limit': -1\n    },\n    'guest': {\n        'can_add_dtable': False,\n        'can_add_group': False,\n        'can_use_global_address_book': False,\n        'can_invite_guest': False,\n        'role_quota': '',\n        'role_asset_quota': '',\n        'row_limit': -1,\n        'can_create_common_dataset': False,\n        'can_generate_external_link': False,\n        'can_run_python_script': False,\n        'can_schedule_run_script': False,\n        'scripts_running_limit': -1,\n        'can_use_advanced_permissions': False,\n        'can_use_advanced_customization': False,\n        'can_use_external_app': False,\n        'can_use_automation_rules': False,\n        'snapshot_days': 30,\n        'share_limit': 100,\n        'can_archive_rows': False\n    },\n}\n</code></pre> <p>If you want to edit the standard roles, copy the above codeblock to <code>dtable_web_settings.py</code>and modify as per your needs. Restart SeaTable for the changes to take effect.</p>"},{"location":"config/enterprise/roles_permissions/#custom-roles","title":"Custom Roles","text":"<p>You can add extra roles by extending the codeblock in <code>dtable_web_settings.py</code>.</p> <p>To add a role <code>employee</code>, for example, add the following lines (beginning at <code>'employee'</code> and ending at <code>},</code> ) to the existing role definition.</p> <pre><code>ENABLED_ROLE_PERMISSIONS = {\n    'employee': {\n        'can_add_dtable': True,\n        'can_add_group': False,\n        'can_create_common_dataset': False\n    },\n}\n</code></pre> <p>Restart SeaTable for the new role to become available in SeaTable.</p>"},{"location":"config/enterprise/s3/","title":"S3 Object Storage","text":"<p>3.0 Enterprise Edition</p> <p>SeaTable allows the use of S3 from AWS or any other S3 compatible object storage e.g. from Exoscale, Minio, OpenStack Swift and Ceph's RGW. In S3 SeaTable stores:</p> <ul> <li>Base snapshots</li> <li>Content of picture and file columns</li> </ul> <p>Bucket naming conventions</p> <p>No matter if you using AWS or any other S3 compatible object storage, we recommend that you follow S3 naming rules. When you create buckets on S3, please read the S3 rules for naming first. Note, especially do not use capital letters in the name of the bucket (do not use camel-style naming, such as MyCommitObjects).</p> Good naming of a bucketBad naming of a bucket <ul> <li>seatable-blocks</li> <li>seatable-commits</li> <li>customer-name-storage</li> </ul> <ul> <li>SeaTableBlocks</li> <li>SUperIMPORTANTS3</li> <li>seatable blocks</li> </ul> <p>Restart required</p> <p>Don't forget to restart SeaTable service after these configuration changes. Easiest is with <pre><code>docker exec -it ... seatable.sh restart\n</code></pre></p>"},{"location":"config/enterprise/s3/#use-s3-for-base-snapshots","title":"Use S3 for base snapshots","text":"<p>The storage of base snapshots are configured in <code>dtable-storage-server.conf</code>. By default the section <code>[storage backend]</code> contains <code>type = local</code>. With this setting, all base snapshots are stored in the folder <code>/opt/seatable/seatable-data/seatable/storage-data</code>.</p> <p>Switch the type to <code>type = s3</code> to use S3 Object storage. Depending on whether you are using AWS or an S3 compatible service, different configuration options must be used.</p> AWSExoscaleS3 compatible storage <p>AWS requires only a few settings. <code>key_id</code> and <code>key</code> are used to provide S3 authentication. You can find the <code>key_id</code> and <code>key</code> in the Security Credentials section of your AWS account page.</p> <pre><code>[storage backend]\ntype = s3\nbucket = ...\nkey_id =\nkey =\n</code></pre> <p>Create the bucket and an IAM Key for accessing the S3 storage from exoscale.</p> <pre><code>[storage backend]\ntype = s3\nbucket = your-bucket-name\nhost = sos-de-fra-1.exo.io\nuse_https = true\nkey_id = ...\nkey = ...\npath_style_request = true\nuse_v4_signature = false\n</code></pre> <p>Use the following settings to connect to your S3 compatible storage.</p> <pre><code>[storage backend]\ntype = s3\nbucket = ...\nhost = ...\nuse_https = true\nkey_id =\nkey =\npath_style_request = true\nuse_v4_signature = false\n</code></pre> <p><code>host</code> is the address and port of the S3 compatible service. You can not add \"http\" or \"https\" before the option. By default, it will use http connection. If you want to use https connection, set the option:<code>hostuse_https = true</code>.</p> <p><code>path_style_request</code> option tells Seatable to use the form <code>https://192.168.1.123:8080/bucketname/object</code> to access the object. In AWS S3 service, the default URL format is virtual host format, such as <code>https://bucketname.s3.amazonaws.com/object</code>. But general object storage products do not support this format.</p>"},{"location":"config/enterprise/s3/#use-s3-for-files-and-pictures","title":"Use S3 for files and pictures","text":"<p>S3 Object storage for file and picture columns is configured in <code>/opt/seatable/seatable-data/seatable/conf/seafile.conf</code>. You have to add three new sections:</p> <ul> <li>[commit_object_backend]</li> <li>[fs_object_backend]</li> <li>[block_backend]</li> </ul> AWSexoscaleS3 compatible storage <pre><code>[commit_object_backend]\nname = s3\nbucket = my-commit-objects\nkey_id = your-key-id\nkey = your-secret-key\n\n[fs_object_backend]\nname = s3\nbucket = my-fs-objects\nkey_id = your-key-id\nkey = your-secret-key\n\n[block_backend]\nname = s3\nbucket = my-block-objects\nkey_id = your-key-id\nkey = your-secret-key\n</code></pre> <pre><code>[commit_object_backend]\nname = s3\nbucket = your-bucket-name\nhost = sos-de-fra-1.exo.io\nkey_id = ...\nkey = ...\nuse_https = true\npath_style_request = true\n\n[fs_object_backend]\nname = s3\nbucket = your-bucket-name\nhost = sos-de-fra-1.exo.io\nkey_id = ...\nkey = ...\nuse_https = true\npath_style_request = true\n\n[block_backend]\nname = s3\nbucket = your-bucket-name\nhost = sos-de-fra-1.exo.io\nkey_id = ...\nkey = ...\nuse_https = true\npath_style_request = true\n</code></pre> <pre><code>[commit_object_backend]\nname = s3\nbucket = my-commit-objects\nkey_id = your-key-id\nkey = your-secret-key\n\n[fs_object_backend]\nname = s3\nbucket = my-fs-objects\nkey_id = your-key-id\nkey = your-secret-key\n\n[block_backend]\nname = s3\nbucket = my-block-objects\nkey_id = your-key-id\nkey = your-secret-key\n</code></pre>"},{"location":"config/enterprise/s3/#advanced-configurations","title":"Advanced configurations","text":""},{"location":"config/enterprise/s3/#use-the-new-aws-s3-service-area","title":"Use the new AWS S3 service area","text":"<p>Since January 2014, the new AWS service area only provides version 4 certification and signing protocol support for S3. This includes such as China region, EU central regions.</p> <p>To use S3 in the new service area, add the following additional options in the three buckets \"commit_object_backend\", \"fs_object_backend\", \"block_backend\":</p> <pre><code>use_v4_signature = true\naws_region = eu-central-1    # eu-central-1 for Frankfurt region\n</code></pre> <p>If you are using S3 in China or Germany, you also need to add the host configuration of the corresponding region under each bucket configuration section, for example, Beijing, China:</p> <pre><code>host = s3.cn-north-1.amazonaws.com.cn\n</code></pre>"},{"location":"config/enterprise/s3_migration/","title":"Migration from local storage to S3","text":"<p>4.3 Enterprise Edition</p> <p>SeaTable provides migration scripts to migrate the local data to S3. In fact two things have to be migrated:</p> <ul> <li>Storage data (Snapshots and persisted json files)</li> <li>Seafile data (Files/Images Columns)</li> </ul> <p>Avatars, thumbnails and temporary files could not be saved to S3, yet.</p> <p>The migration scripts are delivered with the SeaTable Docker Container and are stored in /templates/.</p>"},{"location":"config/enterprise/s3_migration/#how-to-migrate","title":"How to migrate","text":"<ol> <li>You need four buckets: Let's call them fs, blocks, commits, storage.</li> <li>Generate credentials to access these buckets and read and write data to it.</li> <li>enter your SeaTable Container (4.3 or higher) and execute these commands</li> </ol> <pre><code>docker exec -it seatable-server bash\ncd /templates\n./migrate-seafile-data.sh\n./migrate-storage-data.sh\n</code></pre> <p>This will copy your current config to a backup folder.</p> <p>Now add your S3 configuration to your config files \"seafile.conf\" and \"dtable-storage-server.conf\". Use the instructions from here: https://admin.seatable.io/config/enterprise/S3/. Be careful, due to historical reasons the settings are different for seafile.conf and dtable-storage-server.conf.</p> <p>enter the container again and execute the migration commands again. After the migration you can restart SeaTable service.</p> <pre><code>docker exec -it seatable-server bash\ncd /templates\n./migrate-seafile-data.sh\n./migrate-storage-data.sh\nseatable.sh restart\n</code></pre>"},{"location":"config/user_hierarchy/departments/","title":"Departments","text":"<p>Departments is an extension of the groups in SeaTable. It activates a new column type. This feature was developed especially for the chinease market and is deactivated by default at cloud.seatable.io.</p> <p>Departments can be configured with ...</p>"},{"location":"config/user_hierarchy/groups/","title":"Groups","text":"<p>No need to configure groups. Groups are enabled by default. With a user role, the abbility to create a group can be removed.</p>"},{"location":"config/user_hierarchy/overview/","title":"User Hierarchy","text":"<p>SeaTable offers:</p> <ul> <li>Users</li> <li>Groups</li> <li>Teams/Organizations</li> <li>Departments</li> </ul>"},{"location":"config/user_hierarchy/teams_organizations/","title":"Teams / Organizations (like in cloud.seatable.io)","text":"<p>Teams / Organizations is a feature mainly for bigger installations where groups of people should be completely separated. In fact, cloud.seatable.io uses this feature to separate the teams from each other. The users of a team can see each other, but other users are invisible for them.</p> <p>Besides Teams, SeaTable offers also deparments and groups. This article is focusing on teams only.</p> <p>Are Teams and Organizations the same?</p> <p>Teams and organizations can be considered as the same. Organization is the name of the function and therefore used in the configuration files but in cloud.seatable.io we used this function to separate accounts from each other and there we call it teams. In short:</p> <ul> <li>organization is the technical term.</li> <li>teams is the marketing term.</li> </ul>"},{"location":"config/user_hierarchy/teams_organizations/#how-to-configure-teams","title":"How to configure teams","text":"<p>You have to add these two settings in <code>dtable_web_settings.py</code>.</p> <pre><code>CLOUD_MODE = True\nMULTI_TENANCY = True\n</code></pre> <p>Please be aware that this activates a whole bunch of settings and restrictions. These are ...</p>"},{"location":"docker/Cluster/","title":"Core Concepts","text":"<p>...</p>"},{"location":"docker/Cluster/dtable-db%20Standalone/","title":"dtable-db Standalone","text":"<p>On the basis of the previous manual, you can also deploy dtable-db separately.</p> <p>In the following manual, we will show the steps to setup a three nodes deployment</p> <ul> <li>A dtable-web node running dtable-web, seaf-server, dtable-events and dtable-storage-server</li> <li>A dtable-server node running dtable-server, dtable-storage-server</li> <li>A dtable-db node running dtable-db, dtable-storage-server</li> </ul>"},{"location":"docker/Cluster/dtable-db%20Standalone/#modify-dtable-web-server-configuration-file","title":"Modify dtable-web server configuration file","text":"<p>Modify the configuration file :  <code>/Your SeaTable data volume/seatable/conf/seatable-controller.conf</code></p> <pre><code>ENABLE_DTABLE_DB=false\n</code></pre> <p>Modify dtable-web configuration file  <code>/Your SeaTable data volume/seatable/conf/dtable_web_settings.py</code></p> <pre><code>DTABLE_DB_URL = 'https://dtable-db.example.com'  # dtable-db server's url\nINNER_DTABLE_DB_URL = 'http://192.168.0.3'  # LAN dtable-db server's url\n</code></pre>"},{"location":"docker/Cluster/dtable-db%20Standalone/#restart-dtable-web-server","title":"Restart dtable-web server","text":"<pre><code>docker compose up -d\n\ndocker exec -it seatable bash\n\nseatable.sh\n</code></pre> <p>When you see following in the output log, it means success:</p> <pre><code>Skip dtable-server\nSkip dtable-db\n\nSeaTable started\n</code></pre>"},{"location":"docker/Cluster/dtable-db%20Standalone/#modify-dtable-server-server-configuration-file","title":"Modify dtable-server server configuration file","text":"<p>Modify dtable-server configuration file  <code>/Your SeaTable data volume/seatable/conf/dtable_server_config.json</code></p> <pre><code>\"dtable_db_service_url\":  \"https://dtable-db.example.com\"  // dtable-db server's url\n</code></pre>"},{"location":"docker/Cluster/dtable-db%20Standalone/#restart-dtable-server-server","title":"Restart dtable-server server","text":"<pre><code>docker compose up -d\n\ndocker exec -it seatable bash\n\nseatable.sh\n</code></pre> <p>When you see following in the output log, it means success:</p> <pre><code>Skip seafile-server\nSkip dtable-events\nSkip dtable-web\nSkip dtable-db\n\nSeaTable started\n</code></pre>"},{"location":"docker/Cluster/dtable-db%20Standalone/#setup-dtable-db","title":"Setup dtable-db","text":""},{"location":"docker/Cluster/dtable-db%20Standalone/#copy-and-modify-docker-composeyml","title":"Copy and modify docker-compose.yml","text":"<p>The default directory for SeaTable is <code>/opt/seatable</code>. Create the directory:</p> <pre><code>mkdir /opt/seatable\n</code></pre> <p>Copy the docker-compose.yml file on the dtable-web server and modify docker-compose.yml.</p> <p>vim /opt/seatable/docker-compose.yml</p> <pre><code>services:\n  seatable:\n    image: seatable/seatable-enterprise:latest\n    container_name: seatable\n    ports:\n      - \"80:80\"\n      - \"443:443\"  # If https is enabled, cancel the comment.\n    volumes:\n      - /opt/seatable/shared:/shared  # Requested, specifies the path to Seafile data persistent store.\n    environment:\n      - SEATABLE_SERVER_HOSTNAME=dtable-db.example.com # Specifies your host name if https is enabled\n      - SEATABLE_SERVER_LETSENCRYPT=True\n      - TIME_ZONE=Asia/Shanghai # Optional, default is UTC. Should be uncomment and set to your local time zone.\n    networks:\n      - dtable-net\n\nnetworks:\n  dtable-net:\n</code></pre>"},{"location":"docker/Cluster/dtable-db%20Standalone/#copy-and-modify-configuration-file","title":"Copy and modify configuration file","text":"<p>Prepare configuration file directory</p> <pre><code>mkdir -p /opt/seatable/shared/seatable/conf\n</code></pre> <p>Copy the configuration file on the dtable-web server to the conf directory.</p> <p>Modify the Nginx configuration file : <code>/Your SeaTable data volume/seatable/conf/nginx.conf</code></p> <pre><code>server {\n    if ($host = dtable-db.example.com) {\n        return 301 https://$host$request_uri;\n    }\n    listen 80;\n    server_name dtable-db.example.com;\n    return 404;\n}\n\nserver {\n    server_name dtable-db.example.com;\n    listen 443 ssl;\n    ssl_certificate /shared/ssl/&lt;your-ssl.cer&gt;;\n    ssl_certificate_key /shared/ssl/&lt;your-ssl.key&gt;;\n\n    proxy_set_header X-Forwarded-For $remote_addr;\n\n    location / {\n        if ($request_method = 'OPTIONS') {\n            add_header Access-Control-Allow-Origin *;\n            add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;\n            add_header Access-Control-Allow-Headers \"deviceType,token, authorization, content-type\";\n            return 204;\n        }\n\n        proxy_pass         http://127.0.0.1:7777/;\n    ...\n    }\n}\n\nserver {\n    server_name 192.168.0.3;\n    listen 80;\n\n    proxy_set_header X-Forwarded-For $remote_addr;\n\n    location / {\n        if ($request_method = 'OPTIONS') {\n            add_header Access-Control-Allow-Origin *;\n            add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;\n            add_header Access-Control-Allow-Headers \"deviceType,token, authorization, content-type\";\n            return 204;\n        }\n\n        proxy_pass         http://127.0.0.1:7777/;\n    ...\n    }\n}\n</code></pre> <p>Create configuration file :  <code>/Your SeaTable data volume/seatable/conf/seatable-controller.conf</code></p> <pre><code>ENABLE_SEAFILE_SERVER=false\nENABLE_DTABLE_WEB=false\nENABLE_DTABLE_SERVER=false\nENABLE_DTABLE_DB=true\nENABLE_DTABLE_STORAGE_SERVER=true\nENABLE_DTABLE_EVENTS=false\nDTABLE_EVENTS_TASK_MODE=all\n</code></pre>"},{"location":"docker/Cluster/dtable-db%20Standalone/#start-dtable-db","title":"Start dtable-db","text":"<pre><code>docker compose up -d\n\ndocker exec -it seatable bash\n\nseatable.sh\n</code></pre> <p>When you see following in the output log, it means success:</p> <pre><code>Skip seafile-server\nSkip dtable-events\nSkip dtable-web\nSkip dtable-server\n\nSeaTable started\n</code></pre>"},{"location":"docker/Cluster/dtable-events%20Background%20node/","title":"dtable-events Background node","text":"<p>There are two types of tasks performed by dtable-events, local tasks and background tasks.</p> <p>On the basis of the previous manual, you can also move dtable-events background tasks to a dedicated node.</p> <p>In the following manual, we will show the steps to setup the dtable-events background node. The dtable-events background node need to run dtable-events background tasks, seaf-server and dtable-storage-server.</p>"},{"location":"docker/Cluster/dtable-events%20Background%20node/#setup-dtable-events-background-node","title":"Setup dtable-events background node","text":""},{"location":"docker/Cluster/dtable-events%20Background%20node/#copy-and-modify-docker-composeyml","title":"Copy and modify docker-compose.yml","text":"<p>The default directory for SeaTable is <code>/opt/seatable</code>. Create the directory:</p> <pre><code>mkdir /opt/seatable\n</code></pre> <p>Copy the docker-compose.yml file on the dtable-web server and modify docker-compose.yml.</p> <p>vim /opt/seatable/docker-compose.yml</p> <pre><code>services:\n  seatable:\n    image: seatable/seatable-enterprise:latest\n    container_name: seatable\n    ports:\n      - \"80:80\"\n      - \"443:443\"  # If https is enabled, cancel the comment.\n    volumes:\n      - /opt/seatable/shared:/shared  # Requested, specifies the path to Seafile data persistent store.\n    environment:\n      - SEATABLE_SERVER_HOSTNAME=dtable-events.example.com # Specifies your host name if https is enabled\n      - SEATABLE_SERVER_LETSENCRYPT=True\n      - TIME_ZONE=Asia/Shanghai # Optional, default is UTC. Should be uncomment and set to your local time zone.\n    networks:\n      - dtable-net\n\nnetworks:\n  dtable-net:\n</code></pre>"},{"location":"docker/Cluster/dtable-events%20Background%20node/#copy-and-modify-configuration-file","title":"Copy and modify configuration file","text":"<p>Prepare configuration file directory</p> <pre><code>mkdir -p /opt/seatable/shared/seatable/conf\n</code></pre> <p>Copy the configuration file on the dtable-web server to the conf directory.</p> <p>There is no need to Modify the Nginx configuration file.</p> <p>Modify the dtable-events configuration file :  <code>/Your SeaTable data volume/seatable/conf/dtable-events.conf</code></p> <pre><code>[DATABASE]\ntype = mysql\nhost = mysql host\nport = 3306\nusername = mysql user\npassword = password\ndb_name = dtable_db\n\n[REDIS]\nhost = dtable-web server\u2018s IP\nport = 6379\n</code></pre> <p>Create configuration file :  <code>/Your SeaTable data volume/seatable/conf/seatable-controller.conf</code></p> <pre><code>ENABLE_SEAFILE_SERVER=true\nENABLE_DTABLE_WEB=false\nENABLE_DTABLE_SERVER=false\nENABLE_DTABLE_DB=false\nENABLE_DTABLE_STORAGE_SERVER=true\nENABLE_DTABLE_EVENTS=true\nDTABLE_EVENTS_TASK_MODE=background\n</code></pre>"},{"location":"docker/Cluster/dtable-events%20Background%20node/#start-dtable-events-background-node","title":"Start dtable-events background node","text":"<pre><code>docker compose up -d\n\ndocker exec -it seatable bash\n\nseatable.sh\n</code></pre> <p>When you see following in the output log, it means success:</p> <pre><code>dtable-events in background mode\nSkip dtable-web\nSkip dtable-server\nSkip dtable-db\n\nSeaTable started\n</code></pre>"},{"location":"docker/Cluster/dtable-events%20Background%20node/#modify-configuration-in-dtable-web-nodes","title":"Modify configuration in dtable-web nodes","text":"<p>In the dtable-web nodes, <code>DTABLE_EVENTS_TASK_MODE</code> need to be changed to <code>foreground</code> mode.</p> <p>Modify the configuration file <code>/Your SeaTable data volume/seatable/conf/seatable-controller.conf</code> as following:</p> <pre><code>ENABLE_SEAFILE_SERVER=true\nENABLE_DTABLE_WEB=true\nENABLE_DTABLE_SERVER=false\nENABLE_DTABLE_DB=false\nENABLE_DTABLE_STORAGE_SERVER=true\nENABLE_DTABLE_EVENTS=true\nDTABLE_EVENTS_TASK_MODE=foreground\n</code></pre>"},{"location":"docker/Cluster/dtable-events%20Background%20node/#restart-dtable-web-nodes","title":"Restart dtable-web nodes","text":"<pre><code>docker exec -it seatable bash\n\nseatable.sh\n</code></pre> <p>When you see following in the output log, it means success:</p> <pre><code>dtable-events in foreground mode\nSkip dtable-server\nSkip dtable-db\n\nSeaTable started\n</code></pre>"},{"location":"docker/Cluster/dtable-server%20Cluster/","title":"dtable-server cluster (optional)","text":"<p>The dtable-server is stateful. A base should only be loaded into one server and write to that server. Every base has an UUID. The bases are distributed to different dtable-server according to the first 2 character in its UUID. So there are 256 buckets. The dtable-server servers should know the distribution map consistently. We use Etcd server to achieve the goal.</p> <p>When a dtable-server join to the cluster, it register its information to Etcd cluster. When a dtable-server is dead, the registered information will expire in 90 seconds. A separate cluster monitor program will periodically check available servers and assign buckets to different dtable-servers (it will keep existing assignment as much as possible to keep the assignment stable), and write the new assignment information to Etcd. When the assignment is changed, the dtable-servers will receive real-time notification from Etcd.</p> <p>When a base is visted by a user, the dtable-web will check the information in Etcd and return the corresponding dtable-server to the browser. The browser then loads the base from the dtable-server and establishes a Socket connection for real-time communication.</p> <p>For internal communication, dtable-web, dtable-event, dtable-db use dtable-server-proxy node, instead of talking to a specific dtable-server directly.</p> <p>Here we use two dtable-server nodes, one dtable-server-proxy node and three Etcd servers as an example to show how to setup the cluster.</p> <p>components</p> <ul> <li>dtable-server-01</li> <li>dtable-server-02</li> <li>dtable-server-proxy</li> <li>etcd-01</li> <li>etcd-02</li> <li>etcd-03</li> </ul> <p>Note: You need to deploy at least two dtable-server nodes according to the <code>Setup dtable-server</code> chapter in the previous manual.</p>"},{"location":"docker/Cluster/dtable-server%20Cluster/#etcd","title":"ETCD","text":"<p>Install</p> <pre><code># install\nsudo apt install -y etcd etcd-client\n\n# start\nservice etcd start\n</code></pre> <p>ETCD cluster</p> <p>Guide to setting up a cluster in etcd</p>"},{"location":"docker/Cluster/dtable-server%20Cluster/#deploy-dtable-server-proxy-by-docker","title":"Deploy dtable-server-proxy by docker","text":"<p>Download the docker-compose.yml sample file into dtable-server-proxy's directory and modify the Compose file to fit your environment and settings.</p> <pre><code>mkdir -p /opt/dtable-server-proxy/\n</code></pre> <p>Optional customizable options in the Compose file are:</p> <ul> <li>Volume path for the container dtable-server-proxy</li> <li>Image tag of the dtable-server-proxy version to install (image)</li> <li>Time zone (TIME_ZONE)</li> </ul> <p>Note: dtable-server-proxy only needs LAN communication, public domain is not required.</p> <p>Create dtable-server-proxy configuration file</p> <p>Prepare configuration file directory</p> <pre><code>mkdir -p /opt/dtable-server-proxy/shared/seatable-proxy/conf/\n</code></pre> <p>Create the dtable-server-proxy configuration file :  <code>/opt/dtable-server-proxy/shared/seatable-proxy/conf/dtable_server_config.json</code></p> <pre><code>{\n  \"cluster_config\": {\n    \"etcd_host_list\": [\"etcd-01.example.com:2379\", \"etcd-02.example.com:2379\", \"etcd-03.example.com:2379\"]  // domain of etcd servers\n  }\n}\n</code></pre> <p>Start dtable-server-proxy</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"docker/Cluster/dtable-server%20Cluster/#modify-dtable-server-01-configuration-file","title":"Modify dtable-server-01 configuration file","text":"<p>dtable_server_config.json</p> <pre><code>{\n  \"cluster_config\": {\n    \"etcd_host_list\": [\"etcd-01.example.com:2379\", \"etcd-02.example.com:2379\", \"etcd-03.example.com:2379\"],  // domain of etcd servers\n    \"node_id\": \"dtable-server-01\",\n    \"node_url\": \"https://dtable-server-01.example.com/\",  // domain of dtable-server-01\n    \"local_node_url\": \"http://172.17.30.94/\"  // intranet IP of dtable-server-01\n  }\n}\n</code></pre> <p>Then restart dtable-server-01</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh restart\n</code></pre> <p>Note, the <code>node_url</code> is used by the end user to connect to the server. The <code>local_node_url</code> is used by the dtable-server-proxy to connect to the server.</p>"},{"location":"docker/Cluster/dtable-server%20Cluster/#modify-dtable-server-02-configuration-file","title":"Modify dtable-server-02 configuration file","text":"<p>dtable_server_config.json</p> <pre><code>{\n  \"cluster_config\": {\n    \"etcd_host_list\": [\"etcd-01.example.com:2379\", \"etcd-02.example.com:2379\", \"etcd-03.example.com:2379\"],  // domain of etcd servers\n    \"node_id\": \"dtable-server-02\",\n    \"node_url\": \"https://dtable-server-02.example.com/\",  // domain of dtable-server-02\n    \"local_node_url\": \"http://172.17.30.95/\"  // intranet IP of dtable-server-02\n  }\n}\n</code></pre> <p>Then restart dtable-server-02, the command is the same as before.</p>"},{"location":"docker/Cluster/dtable-server%20Cluster/#modify-dtable-web-configuration-files","title":"Modify dtable-web configuration files","text":"<p>dtable_web_settings.py</p> <pre><code># etcd\nENABLE_DTABLE_SERVER_CLUSTER = True\nETCD_SERVER_HOST_LIST = ['etcd-01.example.com', 'etcd-02.example.com', 'etcd-03.example.com']  # domain of etcd servers\nDTABLE_PROXY_SERVER_URL = 'http://dtable-server-proxy.example.com:5550/'  # domain of dtable-server-proxy\n</code></pre> <p>dtable-db.conf</p> <pre><code>[dtable cache]\ndtable_server_url = \"http://dtable-server-proxy.example.com:5550/\"  # domain of dtable-server-proxy\n</code></pre> <p>Then restart dtable-web, the command is the same as before.</p> <p>Now you can use the dtable-server cluster.</p>"},{"location":"docker/Cluster/dtable-server%20Cluster/#load-balance","title":"Load balance","text":"<p>In some cases, you can manually load balancing</p> <pre><code>curl -X POST http://dtable-server-proxy.example.com:5555/rebalance/  # domain of dtable-server-proxy\n</code></pre>"},{"location":"docker/Cluster/seatable_cluster/","title":"SeaTable cluster","text":"<p>SeaTable Enterprise Edition support cluster for high availability and better performance.</p> <p>A general architecture is like following:</p> <p></p> <p>All nodes use the same docker image, with a different docker compose file and seatable-controller.conf to control the behavior.</p> <p>There are five external service needed for the cluster:</p> <ol> <li>MariaDB/MySQL service</li> <li>Redis, used as a way to pass event from one component to others</li> <li>Memcached</li> <li>Object storage</li> <li>Etcd, a reliable key-value storage to store information about which base assigned to which dtable-server</li> </ol> <p>The cluster consistents of the following components:</p> <ol> <li>Several dtable-web nodes behind a load balance</li> <li>Several dtable-server nodes, each with its domain, need to be accessed via the clients (browsers) via websockets directly</li> <li>A dtable-db node, as dtable-db has a high performance, there is no need to have several dtable-db nodes yet.</li> <li>A background dtable-events node for background tasks, like sending emails.</li> </ol> <p>There is also a dtable-server proxy node which provide API access to dtable-servers for other components. So that other components don't need to know there are several dtable-servers, and don't need to know which base is assigned to which dtable-server.</p> <p>Note, to improve performance of your SeaTable service, you don't need to setup a full cluster. Sometimes, use a standalone dtable-server can help improve performance. In the following manual, we will show the steps to setup a two nodes deployment:</p> <ul> <li>A dtable-web node running dtable-web, seaf-server, dtable-events, dtable-db and dtable-storage-server</li> <li>A dtable-server node running dtable-server, dtable-storage-server</li> </ul> <p>Note, dtable-storage-server provide access to the underlying object storage system, so it need to be run at each nodes.</p>"},{"location":"docker/Cluster/seatable_cluster/#setup-dtable-web-nodes","title":"Setup dtable-web nodes","text":"<p>First, setup a one node deployment according to Enterprise-Edition</p> <p>Then, use storage backend according to S3 Object Storage</p>"},{"location":"docker/Cluster/seatable_cluster/#modify-configuration-file","title":"Modify configuration file","text":"<p>Modify <code>docker-compose.yml</code> to let Redis can be accessed from another node</p> <pre><code>  redis:\n    image: redis:5.0.7\n    container_name: seatable-redis\n    ports:\n      \"192.xx.xx.xx:6379:6379\"   # dtable-web server's IP\n</code></pre> <p>Modify dtable-web configuration file <code>/Your SeaTable data volume/seatable/conf/dtable_web_settings.py</code></p> <pre><code>USE_INNER_DTABLE_SERVER = False\nDTABLE_SERVER_URL = 'https://dtable-server.example.com/'  # dtable-server's url\nDTABLE_SOCKET_URL = 'https://dtable-server.example.com/'  # dtable-server's url\n</code></pre> <p>Modify dtable-db configuration file <code>/Your SeaTable data volume/seatable/conf/dtable-db.comf</code></p> <pre><code>[dtable cache]\nprivate_key = \"xxx\"\ndtable_server_url = \"https://dtable-server.example.com/\"\ntotal_cache_size = 100\n</code></pre> <p>Create configuration file : <code>/Your SeaTable data volume/seatable/conf/seatable-controller.conf</code></p> <pre><code>ENABLE_SEAFILE_SERVER=true\nENABLE_DTABLE_WEB=true\nENABLE_DTABLE_SERVER=false\nENABLE_DTABLE_DB=true\nENABLE_DTABLE_STORAGE_SERVER=true\nENABLE_DTABLE_EVENTS=true\nDTABLE_EVENTS_TASK_MODE=all\n</code></pre> <p>DTABLE_EVENTS_TASK_MODE can be all, foreground, background. Here we use all. If you want to deploy a separate background node for running dtable-events, use foreground here.</p>"},{"location":"docker/Cluster/seatable_cluster/#restart-dtable-web-server","title":"Restart dtable-web server","text":"<pre><code>docker compose up -d\n\ndocker exec -it seatable bash\n\nseatable.sh\n</code></pre> <p>When you see following in the output log, it means success:</p> <pre><code>Skip dtable-server\n\nSeaTable started\n</code></pre>"},{"location":"docker/Cluster/seatable_cluster/#setup-dtable-server","title":"Setup dtable-server","text":""},{"location":"docker/Cluster/seatable_cluster/#copy-and-modify-docker-composeyml","title":"Copy and modify docker-compose.yml","text":"<p>The default directory for SeaTable is <code>/opt/seatable</code>. Create the directory:</p> <pre><code>mkdir /opt/seatable\n</code></pre> <p>Copy the docker-compose.yml file on the dtable-web server and modify docker-compose.yml.</p> <p>vim /opt/seatable/docker-compose.yml</p> <pre><code>services:\n  seatable:\n    image: seatable/seatable-enterprise:latest\n    container_name: seatable\n    ports:\n      - \"80:80\"\n      - \"443:443\"  # If https is enabled, cancel the comment.\n    volumes:\n      - /opt/seatable/shared:/shared  # Requested, specifies the path to Seafile data persistent store.\n    environment:\n      - SEATABLE_SERVER_HOSTNAME=dtable-server.example.com # Specifies your host name if https is enabled\n      - SEATABLE_SERVER_LETSENCRYPT=True\n      - TIME_ZONE=Asia/Shanghai # Optional, default is UTC. Should be uncomment and set to your local time zone.\n    networks:\n      - dtable-net\n\nnetworks:\n  dtable-net:\n</code></pre>"},{"location":"docker/Cluster/seatable_cluster/#copy-and-modify-configuration-file","title":"Copy and modify configuration file","text":"<p>Prepare configuration file directory</p> <pre><code>mkdir -p /opt/seatable/shared/seatable/conf\n</code></pre> <p>Copy the configuration file on the dtable-web server to the conf directory.</p> <p>Modify the dtable-server configuration file : <code>/Your SeaTable data volume/seatable/conf/dtable_server_config.json</code></p> <pre><code>{\n    \"host\": \"mysql host\",\n    \"user\": \"mysql uer\",\n    \"password\": \"password\",\n    \"database\": \"dtable_db\",\n    \"port\": 3306,\n    \"private_key\": \"xxx\",\n    \"dtable_web_service_url\": \"xxx\",  # dtable-web server's URL\n    \"redis_host\": \"192.xx.xx.xx\",   # dtable-web server's IP\n    \"redis_port\": 6379,\n    \"redis_password\": \"\"\n}\n</code></pre> <p>Modify the Nginx configuration file : <code>/Your SeaTable data volume/seatable/conf/nginx.conf</code></p> <pre><code>log_format your_log_format '[$time_iso8601] $http_x_forwarded_for $remote_addr \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\" $upstream_response_time';\n\nupstream dtable_servers {\n    server 127.0.0.1:5000;\n    keepalive 15;\n}\n\nserver {\n    if ($host = dtable-server.example.com) {\n        return 301 https://$host$request_uri;\n    }\n    listen 80;\n    server_name dtable-server.example.com;\n    return 404;\n}\n\n# This part of the configuration is for communication among nodes within the cluster.\nserver {\n    server_name 172.xx.xx.xx;\n    listen 80;\n\n    proxy_set_header X-Forwarded-For $remote_addr;\n\n    location / {\n        if ($request_method = 'OPTIONS') {\n            add_header Access-Control-Allow-Origin *;\n            add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;\n            add_header Access-Control-Allow-Headers \"deviceType,token, authorization, content-type\";\n            return 204;\n        }\n\n        proxy_pass         http://dtable_servers;\n        ...\n        access_log      /path/to/dtable-server-inner.access.log your_log_format;\n        error_log       /path/to/dtable-server-inner.error.log your_log_format;\n    }\n}\n\nserver {\n    server_name dtable-server.example.com;\n    listen 443 ssl;\n    ssl_certificate /shared/ssl/&lt;your-ssl.cer&gt;;\n    ssl_certificate_key /shared/ssl/&lt;your-ssl.key&gt;;\n\n    proxy_set_header X-Forwarded-For $remote_addr;\n\n    location /socket.io {\n        proxy_pass http://dtable_servers;\n        ...\n        access_log      /path/to/socket-io.access.log your_log_format;\n        error_log       /path/to/socket-io.error.log your_log_format;\n    }\n\n    location / {\n        if ($request_method = 'OPTIONS') {\n            add_header Access-Control-Allow-Origin *;\n            add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;\n            add_header Access-Control-Allow-Headers \"deviceType,token, authorization, content-type\";\n            return 204;\n        }\n\n        proxy_pass         http://dtable_servers;\n        ...\n        access_log      /path/to/dtable-server.access.log your_log_format;\n        error_log       /path/to/dtable-server.error.log your_log_format;\n    }\n}\n</code></pre> <p>Create configuration file : <code>/Your SeaTable data volume/seatable/conf/seatable-controller.conf</code></p> <pre><code>ENABLE_SEAFILE_SERVER=false\nENABLE_DTABLE_WEB=false\nENABLE_DTABLE_SERVER=true\nENABLE_DTABLE_DB=false\nENABLE_DTABLE_STORAGE_SERVER=true\nENABLE_DTABLE_EVENTS=false\nDTABLE_EVENTS_TASK_MODE=all\n</code></pre>"},{"location":"docker/Cluster/seatable_cluster/#start-dtable-server","title":"Start dtable-server","text":"<pre><code>docker compose up -d\n\ndocker exec -it seatable bash\n\nseatable.sh\n</code></pre> <p>When you see following in the output log, it means success:</p> <pre><code>Skip seafile-server\nSkip dtable-events\nSkip dtable-web\nSkip dtable-db\n\nSeaTable started\n</code></pre>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/","title":"Deploy SeaTable Developer Edition with Docker","text":""},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#setup","title":"Setup","text":"<p>The following assumptions and conventions are used in the rest of this document:</p> <ul> <li><code>/opt/seatable</code> is the directory of SeaTable. If you decide to put SeaTable in a different directory - which you can - adjust all paths accordingly.</li> <li>SeaTable uses two Docker volumes for persisting data generated in its database and SeaTable Docker container. The volumes' host paths are /opt/seatable/mysql-data and /opt/seatable/seatable-data, respectively. It is not recommended to change these paths. If you do, account for it when following these instructions.</li> <li>All configuration and log files for SeaTable and the webserver Nginx are stored in the volume of the SeaTable container.</li> <li>Due to SeaTable's cloud first approach, these instructions only elaborate explicitly on the deployment of SeaTable's latest version. (An earlier version of SeaTable EE can be installed using these instructions. Just download its image from Docker Hub and adjust the docker-compose file accordingly. Earlier versions may not be compatible with the SeaTable plugins available on SeaTable's Market though.)</li> </ul>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#installing-docker","title":"Installing Docker","text":"<p>This step is only required if you don't have installed docker yet. Execute the following script to install <code>docker</code> and <code>docker compose</code> plugin. Otherwise refer to the official installation documentation of docker for your operating system.</p> <pre><code>curl -fsSL get.docker.com | bash\n</code></pre>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#downloading-the-seatable-image","title":"Downloading the SeaTable Image","text":"<p>Pull the SeaTable image from Docker Hub:</p> <pre><code>docker pull seatable/seatable-developer:latest\n</code></pre> <p>NOTE: Older SeaTable versions are also available on Docker Hub. To pull an older version, replace 'latest' by the desired version like <code>seatable/seatable-developer:4.1.0</code>.</p>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#downloading-and-modifying-docker-composeyml","title":"Downloading and Modifying docker-compose.yml","text":"<p>Download the docker-compose.yml sample file into SeaTable's directory and modify the file to fit your environment and settings.</p> <pre><code>mkdir /opt/seatable\ncd /opt/seatable\nwget -O \"docker-compose.yml\" \"https://manual.seatable.io/docker/Developer-Edition/docker-compose.yml\"\nnano docker-compose.yml\n</code></pre> <p>The following fields merit particular attention:</p> <ul> <li>Password of MariaDB root (MYSQL_ROOT_PASSWORD and DB_ROOT_PASSWD)</li> <li>Use of Let's Encrypt for HTTPS (SEATABLE_SERVER_LETSENCRYPT)</li> <li>Host name (SEATABLE_SERVER_HOSTNAME)</li> </ul> <p>Additional customizable options in the Compose file are:</p> <ul> <li>Volume path for the container db</li> <li>Volume path for the container seatable</li> <li>Image tag of the SeaTable version to install (image)</li> <li>Time zone (TIME_ZONE)</li> </ul>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#initializing-database","title":"Initializing Database","text":"<p>Initialize database by running docker-compose:</p> <pre><code>cd /opt/seatable\ndocker compose up\n</code></pre> <p>NOTE: You should run the above command in the directory with the <code>docker-compose.yml</code>.</p> <p>Wait for a while. When you see <code>This is an idle script (infinite loop) to keep container running.</code> in the output log, the database has been initialized successfully. Press keyboard <code>CTRL + C</code> (Windows) or <code>Control + C</code> (Mac)\u00a0to return to the prompt.</p>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#starting-the-docker-containers","title":"Starting the Docker Containers","text":"<p>Run docker compose again, this time in detached mode:</p> <pre><code>docker compose up -d\n</code></pre> <p>NOTE: You should run the above command in the directory with the <code>docker-compose.yml</code>.</p>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#starting-seatable-server","title":"Starting SeaTable Server","text":"<p>Now you can start SeaTable and create the first admin user:</p> <pre><code># Start SeaTable service.\ndocker exec -d seatable /shared/seatable/scripts/seatable.sh start\n\n# Create admin account.\ndocker exec -it seatable /shared/seatable/scripts/seatable.sh superuser\n</code></pre> <p>NOTE: The first command uses the option <code>-d</code> which starts the service in the background. The second command use the option <code>-it</code> which runs the command in interactive mode.</p> <p>You can now access SeaTable at the host name specified in the Compose file.</p>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#reviewing-the-deployment","title":"Reviewing the Deployment","text":"<p>The command <code>docker container list</code> should list the four containers specified in the <code>docker-compose.yml</code>:</p> <p></p> <p>The directory layout of the SeaTable container's volume should look as follows:</p> <pre><code>$tree /opt/seatable/seatable-data -L 2\n/opt/seatable/seatable-data\n\u251c\u2500\u2500 nginx-logs\n\u2502   \u251c\u2500\u2500 access.log\n\u2502   \u251c\u2500\u2500 dtable-db.access.log\n\u2502   \u251c\u2500\u2500 dtable-db.error.log\n\u2502   \u251c\u2500\u2500 dtable-server.access.log\n\u2502   \u251c\u2500\u2500 dtable-server.error.log\n\u2502   \u251c\u2500\u2500 dtable-web.access.log\n\u2502   \u251c\u2500\u2500 dtable-web.error.log\n\u2502   \u251c\u2500\u2500 error.log\n\u2502   \u251c\u2500\u2500 seafhttp.access.log\n\u2502   \u251c\u2500\u2500 seafhttp.error.log\n\u2502   \u251c\u2500\u2500 socket-io.access.log\n\u2502   \u2514\u2500\u2500 socket-io.error.log\n\u251c\u2500\u2500 seatable\n\u2502   \u251c\u2500\u2500 ccnet\n\u2502   \u251c\u2500\u2500 conf\n\u2502   \u251c\u2500\u2500 db-data\n\u2502   \u251c\u2500\u2500 logs\n\u2502   \u251c\u2500\u2500 pids\n\u2502   \u251c\u2500\u2500 scripts\n\u2502   \u251c\u2500\u2500 seafile-data\n\u2502   \u251c\u2500\u2500 seahub-data\n\u2502   \u2514\u2500\u2500 seatable-license.txt\n\u2514\u2500\u2500 ssl\n    \u251c\u2500\u2500 account.conf\n    \u251c\u2500\u2500 ca\n    \u251c\u2500\u2500 http.header\n    \u251c\u2500\u2500 renew_cert\n    \u251c\u2500\u2500 SEATABLE_SERVER_HOSTNAME\n    \u251c\u2500\u2500 SEATABLE_SERVER_HOSTNAME.crt\n    \u251c\u2500\u2500 SEATABLE_SERVER_HOSTNAME.key\n    \u2514\u2500\u2500 README\n</code></pre> <p>NOTE: The directory <code>ssl</code> is empty if Let's Encrypt is not used for HTTPS. SEATABLE_SERVER_HOSTNAME substitutes for the host name used in the <code>docker-compose.yml</code> file.</p> <p>All config files are stored in <code>/opt/seatable/seatable-data/seatable/conf</code>.</p> <p>Any modification of a configuration file requires a restart of SeaTable to take effect:</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh restart\n</code></pre> <p>All of SeaTable's log files are stored in <code>/opt/seatable/seatable-data/seatable/logs</code>:</p> <ul> <li>dtable-db.log: log of dtable-db component</li> <li>dtable-db-access.log: query log of dtable-db component</li> <li>dtable-db-error.log: error log of dtable-db component</li> <li>dtable-db-slow.log: slow query log of dtable-db component</li> <li>dtable-events.log: log of the dtable-events component</li> <li>dtable_events_io.log: special log for DTABLE import/export as well as Excel and CSV file import/export</li> <li>dtable_events_message.log: special log for sending emails in the dtable-events background</li> <li>dtable-server.log: log of dtable-server component</li> <li>dtable_web.log: log of the dtable-web component</li> <li>init.log: Log of Docker initialization script</li> <li>monitor.log: Monitor logs, monitor.sh can auto restart the unexpectedly closed server</li> <li>seafile.log: log of Seafile server</li> </ul> <p>Additionally, the slow_logs contain slow request logs which help debug performance issues.</p>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#ssltls","title":"SSL/TLS","text":"<ul> <li>Let's encrypt SSL certificate</li> </ul> <p>If you set <code>SEATABLE_SERVER_LETSENCRYP</code> to <code>true</code> in \"docker-compose.yml\", the container requests a letsencrypt-signed SSL certificate for you automatically.</p> <p>e.g.</p> <pre><code>seatable:\n  ...\n  ports:\n    - \"80:80\"\n    - \"443:443\"\n    ...\n  environment:\n    ...\n    - SEATABLE_SERVER_LETSENCRYPT=True # Default is False. Whether to use let's encrypt certificate.\n    - SEATABLE_SERVER_HOSTNAME=example.seatable.com # Specifies your host name if https is enabled\n</code></pre> <p>NOTE\uff1aSince the Nginx configuration file is only generated automatically when you run the container for the first time, you'd better set <code>SEATABLE_SERVER_LETSENCRYPT = True</code> before executing the <code>docker compose up -d</code> command for the first time.</p> <p>If you want to use your own SSL certificate, you can refer to the following steps.</p> <ul> <li> <p>Add your own SSL certificate</p> </li> <li> <p>Upload the SSL certificate file to the SeaTable data directory : <code>/Your SeaTable data volume/ssl/</code></p> </li> <li>Change the \"http\" of each SERVER_URL in ccnet.conf, dtable_web_settings.py and dtable_server_config.json to \"https\".</li> <li>Restart the SeaTable service : <code>docker exec -it seatable /shared/seatable/scripts/seatable.sh restart</code></li> <li>Restart the Memcached service\uff1a<code>docker restart seatable-memcached</code></li> <li> <p>Modify the nginx configuration file : <code>/Your SeaTable data volume/seatable/conf/nginx.conf</code></p> <p>e.g.</p> <pre><code>server {\n    if ($host = example.seatable.com) {\n        return 301 https://$host$request_uri;\n    }\n    listen 80;\n    server_name example.seatable.com;\n    return 404;\n}\n\nserver {\n    server_name example.seatable.com;\n\n    listen 443 ssl;\n    ssl_certificate /shared/ssl/&lt;your-ssl.cer&gt;;\n    ssl_certificate_key /shared/ssl/&lt;your-ssl.key&gt;;\n\n    proxy_set_header X-Forwarded-For $remote_addr;\n    ......\n</code></pre> </li> <li> <p>Reload the nginx configuration file : <code>docker exec -it seatable /usr/sbin/nginx -s reload</code></p> </li> </ul>"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#faq","title":"FAQ","text":"<p>I encounter \"Network error\" when opening a base. What have I done wrong?</p> <p>Normally, the issue is caused by incorrect URLs in config file <code>dtable_web_settings.py</code>. The URL are required for the various components of SeaTable to communicate with one another.</p> <p>The URLs are read from the Compose file and written to the config file only upon SeaTable's initialization. Any later modification of the URLs in the docker-compose.yml has no effect on the URLs in the config file. Later changes must be done manually in <code>dtable_web_settings.py</code>, followed by a restart of SeaTable.</p> <p>The relevenat URLs are:</p> <pre><code># The URL that users used to access a base\nDTABLE_SERVER_URL = 'https://SEATABLE_SERVER_HOSTNAME/dtable-server/'\nDTABLE_SOCKET_URL = 'https://SEATABLE_SERVER_HOSTNAME/'\n\n# The URL that users used to access the service\nDTABLE_WEB_SERVICE_URL = 'https://SEATABLE_SERVER_HOSTNAME/'\n\n# The URL for the file server\nFILE_SERVER_ROOT = 'https://SEATABLE_SERVER_HOSTNAME/seafhttp/'\n</code></pre> <p>SEATABLE_SERVER_HOSTNAME must be the correct hostname (e.g., example.seatable.com).</p> <p>If, for whatever reason, the installation failed, how to start from clean state again?</p> <p>Just remove the directory <code>/opt/seatable</code> and start again.</p> <p>I forgot the SeaTable admin email address/password, how do I create a new admin account?</p> <p>You can create a new admin account by running</p> <pre><code># Create admin account\ndocker exec -it seatable /shared/seatable/scripts/seatable.sh superuser\n</code></pre> <p>The SeaTable service must be up when running the superuser command.</p> <p>The Let's Encrypt SSL certificate is about to expire, how do I renew it?</p> <p>The SSL certificate should be renewed automatically 30 days prior to its expiration. If the automatic renewal fails, this command renews the certificate manually:</p> <pre><code>/templates/renew_cert.sh\n</code></pre> <p>SEATABLE_SERVER_LETSENCRYPT=false change to true.</p> <p>If you want to change to https after using http, first backup and move the nginx.conf.</p> <pre><code>mv /opt/seatable/shared/seatable/conf/nginx.conf /opt/seatable/shared/seatable/conf/nginx.conf.bak\n</code></pre> <p>Then run the following command to apply a certificate.</p> <pre><code>docker exec seatable /templates/seatable.sh init\n</code></pre> <p>You need to manually change http to https in other configuration files and restart SeaTable.</p> <pre><code>docker compose down\ndocker compose up -d\ndocker exec -d seatable /shared/seatable/scripts/seatable.sh start\n</code></pre> <p>If you have modified the old nginx.conf, now you can modify the new nginx.conf as you want. Then execute the following command to make the nginx configuration take effect.</p> <pre><code>docker exec seatable nginx -s reload\n</code></pre>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/","title":"Setup SeaTable Server Enterprise Edition","text":""},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#setup","title":"Setup","text":"<p>The following assumptions and conventions are used in the rest of this document:</p> <ul> <li><code>/opt/seatable</code> is the directory of SeaTable Server. If you decide to put SeaTable Server in a different directory - which you can - adjust all paths accordingly.</li> <li>SeaTable Server uses two Docker volumes for persisting data generated in its database and the SeaTable Docker container. The volumes' host paths are /opt/seatable/mysql-data and /opt/seatable/seatable-data, respectively. It is not recommended to change these paths. If you do, account for the change when following these instructions.</li> <li>All configuration and log files for SeaTable Server and the webserver Nginx are stored in the volume of the SeaTable container.</li> <li>Due to SeaTable Server's cloud first approach, these instructions only elaborate on the deployment of SeaTable Server's latest version. (Earlier versions of SeaTable EE can be installed using these instructions. Just download the image of the version in question from Docker Hub and adjust the docker-compose file accordingly. Earlier versions may not be compatible with the SeaTable plugins available on SeaTable's Market though.)</li> </ul>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#installing-docker","title":"Installing Docker","text":"<p>This step is only required if you don't have installed docker yet. Execute the following script to install <code>docker</code> and <code>docker compose</code> plugin. Otherwise refer to the official installation documentation of docker for your operating system.</p> <pre><code>curl -fsSL get.docker.com | bash\n</code></pre>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#downloading-the-seatable-image","title":"Downloading the SeaTable Image","text":"<p>Pull the SeaTable image from Docker Hub:</p> <pre><code>$ docker pull seatable/seatable-enterprise:latest\n</code></pre> <p>Note: Older SeaTable versions are also available on Docker Hub. To pull an older version, replace 'latest' by the desired version like <code>seatable/seatable-enterprise:4.1.9</code></p>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#activating-the-seatable-license","title":"Activating the SeaTable License","text":"<p>To install SeaTable Enterprise Edition, you require a valid SeaTable Server license. The SeaTable Server license is a text file with the name <code>seatable-license.txt</code> stored in the folder <code>/opt/seatable/seatable-data/seatable/</code>. The license file contains the number of users, an expire data and a has value.</p> <p>Up to three users is always free</p> <p>You can request a free license file for up to three users and two years of validity. If you like SeaTable and want to buy a bigger license, please contact us.</p> <p>In general you have create the directory <code>/opt/seatable/seatable-data/seatable</code> and save the license file it.</p> <pre><code>$ mkdir -p /opt/seatable/seatable-data/seatable/\n$ cd /opt/seatable/seatable-data/seatable/\n$ nano seatable-license.txt\n</code></pre> <p>Now there are two ways to get a free license file:</p> License via command lineLicense via website <p>Use the following commands to request a new license. Please replace <code>email@example.com</code> with a valid email address of yours.</p> <pre><code>curl https://get.seatable.io/license/email@example.com\n</code></pre> <p>Download the license to the current directory, like it is described in the email you just received.</p> <p>Visit the website https://seatable.io/on-premises and use the form to request a free license. Paste the content of the license file in the newly created .txt file, save it, and close it.</p>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#downloading-and-modifying-docker-composeyml","title":"Downloading and Modifying docker-compose.yml","text":"<p>Download the docker-compose.yml sample file into SeaTable Server's directory and modify the file to fit your environment and settings.</p> <pre><code>$ cd /opt/seatable/\n$ wget -O \"docker-compose.yml\" \"https://manual.seatable.io/docker/Enterprise-Edition/docker-compose.yml\"\n$ nano docker-compose.yml\n</code></pre> <p>The following fields merit particular attention:</p> <ul> <li>Password of MariaDB root (MYSQL_ROOT_PASSWORD and DB_ROOT_PASSWD)</li> <li>Use of Let's Encrypt for SSL (SEATABLE_SERVER_LETSENCRYPT)</li> <li>Host name (SEATABLE_SERVER_HOSTNAME)</li> </ul> <p>Additional customizable options in the Compose file are:</p> <ul> <li>Volume path for the container db</li> <li>Volume path for the container seatable</li> <li>Image tag of the SeaTable version to install (image)</li> <li>Time zone (TIME_ZONE)</li> </ul>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#initializing-the-database","title":"Initializing the Database","text":"<p>Initialize the database by running docker-compose:</p> <pre><code>$ cd /opt/seatable\n$ docker compose up\n</code></pre> <p>Wait for a while. When you see <code>This is an idle script (infinite loop) to keep container running.</code> in the output log, the database has been initialized successfully. Press keyboard <code>CTRL + C</code> (Windows) or <code>Control + C</code> (Mac)\u00a0to return to the prompt.</p>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#starting-the-docker-containers","title":"Starting the Docker Containers","text":"<p>Run docker compose again, this time in detached mode:</p> <pre><code>$ docker compose up -d\n</code></pre>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#starting-seatable","title":"Starting SeaTable","text":"<p>Now you start SeaTable service:</p> <pre><code>$ docker exec -d seatable /shared/seatable/scripts/seatable.sh start\n</code></pre> <p>Then create the first admin user:</p> <pre><code>$ docker exec -it seatable /shared/seatable/scripts/seatable.sh superuser\n</code></pre> <p>Docker parameters</p> <p>The first command uses the option <code>-d</code> which starts the service in the background. The second command uses the option <code>-it</code> which runs the command in interactive mode.</p> <p>Enter the e-mail address and the initial password of the admin user. <code>Superuser created successfully</code> confirms that the admin user has been created.</p> <p>You can now access SeaTable at the host name specified in the Compose file.</p>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#configuring-autostart","title":"Configuring Autostart","text":"<p>By default, SeaTable Server will not start automatically, when the Docker host is restarted.</p> <p>See the autostart article in this manual to learn how to configure SeaTable Server's autostart.</p>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#reviewing-the-deployment","title":"Reviewing the Deployment","text":"<p>The command <code>docker container list</code> should list the four containers specified in the <code>docker-compose.yml</code>:</p> <p></p> <p>The directory layout of the SeaTable container's volume should look as follows:</p> <pre><code>$ tree /opt/seatable/seatable-data -L 2\n/opt/seatable/seatable-data\n\u251c\u2500\u2500 nginx-logs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 access.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dtable-db.access.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dtable-db.error.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dtable-server.access.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dtable-server.error.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dtable-web.access.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dtable-web.error.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 error.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 seafhttp.access.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 seafhttp.error.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 socket-io.access.log\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 socket-io.error.log\n\u251c\u2500\u2500 seatable\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ccnet\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 db-data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 logs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pids\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 scripts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 seafile-data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 seahub-data\n|   \u251c\u2500\u2500 seatable-license.txt\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 storage-data\n\u2514\u2500\u2500 ssl\n    \u251c\u2500\u2500 account.conf\n    \u251c\u2500\u2500 ca\n    \u251c\u2500\u2500 http.header\n    \u251c\u2500\u2500 renew_cert\n    \u251c\u2500\u2500 SEATABLE_SERVER_HOSTNAME\n    \u251c\u2500\u2500 SEATABLE_SERVER_HOSTNAME.crt\n    \u2514\u2500\u2500 SEATABLE_SERVER_HOSTNAME.key\n</code></pre> <p>Note: The directory <code>ssl</code> is empty if Let's Encrypt is not used for HTTPS. SEATABLE_SERVER_HOSTNAME stands for the host name used in the <code>docker-compose.yml</code> file.</p> <p>All config files are stored in <code>/opt/seatable/seatable-data/seatable/conf</code>.</p> <p>Any modification of a configuration file requires a restart of SeaTable service to take effect:</p> <pre><code>$ docker exec -d seatable /shared/seatable/scripts/seatable.sh restart\n</code></pre> <p>All of SeaTable Server's log files are stored in <code>/opt/seatable/seatable-data/seatable/logs</code>:</p> <ul> <li>dtable-db.log: log of dtable-db component</li> <li>dtable-db-access.log: query log of dtable-db component</li> <li>dtable-db-error.log: error log of dtable-db component</li> <li>dtable-db-slow.log: slow query log of dtable-db component</li> <li>dtable-events.log: log of the dtable-events component</li> <li>dtable_events_io.log: special log for DTABLE import/export as well as Excel and CSV file import/export</li> <li>dtable_events_message.log: special log for sending emails in the dtable-events background</li> <li>dtable-server.log: log of dtable-server component</li> <li>dtable_web.log: log of the dtable-web component</li> <li>init.log: Log of Docker initialization script</li> <li>monitor.log: Monitor logs, monitor.sh can auto restart the unexpectedly closed server</li> <li>seafile.log: log of Seafile server</li> </ul> <p>Additionally, the slow_logs contain slow request logs which help debug performance issues.</p>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#ssltls","title":"SSL/TLS","text":"<ul> <li>Let's encrypt SSL certificate</li> </ul> <p>If you set <code>SEATABLE_SERVER_LETSENCRYPT</code> to <code>true</code> in \"docker-compose.yml\", the container requests a Let's Encrypt-signed SSL certificate for you automatically.</p> <p>e.g.</p> <pre><code>seatable:\n  ...\n  ports:\n    - \"80:80\"\n    - \"443:443\"\n    ...\n  environment:\n    ...\n    - SEATABLE_SERVER_LETSENCRYPT=True # Default is False. Whether to use let's encrypt certificate.\n    - SEATABLE_SERVER_HOSTNAME=example.seatable.com # Specifies your host name if https is enabled\n</code></pre> <p>Note\uff1aSince the Nginx configuration file is only generated automatically when you run the container for the first time, you'd better set <code>SEATABLE_SERVER_LETSENCRYPT = True</code> before executing the <code>docker compose up -d</code> command for the first time.</p> <p>If you want to use your own SSL certificate, you can refer to the following steps.</p> <ul> <li> <p>Add your own SSL certificate</p> </li> <li> <p>Upload the SSL certificate file to the SeaTable data directory : <code>/Your SeaTable data volume/ssl/</code></p> </li> <li>Change the \"http\" of each SERVER_URL in ccnet.conf, dtable_web_settings.py and dtable_server_config.json to \"https\".</li> <li>Restart the SeaTable service : <code>docker exec -it seatable /shared/seatable/scripts/seatable.sh restart</code></li> <li>Restart the Memcached service\uff1a<code>docker restart seatable-memcached</code></li> <li> <p>Modify the Nginx configuration file : <code>/Your SeaTable data volume/seatable/conf/nginx.conf</code></p> <p>e.g.</p> <pre><code>server {\n    if ($host = example.seatable.com) {\n        return 301 https://$host$request_uri;\n    }\n    listen 80;\n    server_name example.seatable.com;\n    return 404;\n}\n\nserver {\n    server_name example.seatable.com;\n\n    listen 443 ssl;\n    ssl_certificate /shared/ssl/&lt;your-ssl.cer&gt;;\n    ssl_certificate_key /shared/ssl/&lt;your-ssl.key&gt;;\n\n    proxy_set_header X-Forwarded-For $remote_addr;\n    ......\n</code></pre> </li> <li> <p>Reload the Nginx configuration file : <code>docker exec -it seatable /usr/sbin/nginx -s reload</code></p> </li> </ul>"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#faq","title":"FAQ","text":"<p>If, for whatever reason, the installation fails, how do I to start from a clean slate again?</p> <p>Remove the directory <code>/opt/seatable</code> and start again.</p> <p>I forgot the SeaTable admin email address/password, how do I create a new admin account?</p> <p>You can create a new admin account by running the superuser command:</p> <pre><code>$ docker exec -it seatable /shared/seatable/scripts/seatable.sh superuser\n</code></pre> <p>The SeaTable service must be up when running the superuser command.</p> <p>The Let's Encrypt SSL certificate is about to expire, how do I renew it?</p> <p>The SSL certificate should renew itself automatically 30 days prior to its expiration. If the automatic renewal fails, run this command in the SeaTable Docker container to manually renew the certificate:</p> <pre><code>$ /templates/renew_cert.sh\n</code></pre> <p>SEATABLE_SERVER_LETSENCRYPT=false change to true.</p> <p>If you want to change to https after using http, first backup and move the nginx.conf:</p> <pre><code>$ mv /opt/seatable/shared/seatable/conf/nginx.conf /opt/seatable/shared/seatable/conf/nginx.conf.bak\n</code></pre> <p>Then run the following command to apply a certificate:</p> <pre><code>$ docker exec seatable /templates/seatable.sh init\n</code></pre> <p>You need to manually change http to https in other configuration files and restart SeaTable.</p> <pre><code>$ docker compose down\n$ docker compose up -d\n$ docker exec -d seatable /shared/seatable/scripts/seatable.sh start\n</code></pre> <p>If you have modified the old nginx.conf, now you can modify the new nginx.conf as you want. Then execute the following command to make the nginx configuration take effect:</p> <pre><code>$ docker exec seatable nginx -s reload\n</code></pre>"},{"location":"docker/Enterprise-Edition/migrate_seatable_editions/","title":"Migrate between SeaTable Editions","text":"<p>The migration between SeaTable Enteprise Edition and SeaTable Developer Edition is easy and possible at any time. Please make sure that you only migrate between the same major and minor versions:</p> <ul> <li>3.3.7 Enterprise Edition  3.3.0 Developer Edition is </li> <li>3.2.0 Developer Edition  3.2.6 Enterprise Edition is </li> <li>3.3.7 Enterprise Edition  3.4.0 Developer Edition is </li> <li>3.2.0 Developer Edition  3.3.7 Enterprise Edition is </li> </ul> <p>You can find the available images and their versions at  docker hub:</p> <ul> <li>Available Enterprise Editions</li> <li>Available Developer Editions</li> </ul> <p>Backup is recommended</p> <p>To protect your data, it is strongly recommended to back up the database prior to the migration. See the section on backup and recovery for details.</p>"},{"location":"docker/Enterprise-Edition/migrate_seatable_editions/#migration","title":"Migration","text":"<p>Basically for the migration only two things are important:</p> <ul> <li>provide a seatable server license (if necessary)</li> <li>switch the used docker image</li> </ul> <p>After a restart of the docker containers, SeaTable takes care of the rest. So let see what you have to do.</p> Migrate from Enterprise Edition to Developer Edition Migrate from Developer Edition to Enterprise Edition"},{"location":"docker/Enterprise-Edition/migrate_seatable_editions/#enterprise-to-developer-edition","title":"Enterprise to Developer Edition","text":""},{"location":"docker/Enterprise-Edition/migrate_seatable_editions/#stop-seatable-server","title":"Stop SeaTable Server","text":"<p>Stop all containers that are currently running.</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose down\n</code></pre>"},{"location":"docker/Enterprise-Edition/migrate_seatable_editions/#switch-images","title":"Switch images","text":"<p>Open your <code>/opt/seatable-compose/.env</code> file and add this line to use the SeaTable developer image. Make sure to replace <code>latest</code> with the correct version as described at the beginning of this article.</p> <pre><code>SEATABLE_IMAGE='seatable/seatable-developer:latest'\n</code></pre>"},{"location":"docker/Enterprise-Edition/migrate_seatable_editions/#restart-seatable-server","title":"Restart SeaTable Server","text":"<p>Just copy and paste these commands to restart seatable.</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose up -d\n</code></pre>"},{"location":"docker/Enterprise-Edition/migrate_seatable_editions/#developer-to-enterprise-edition","title":"Developer to Enterprise Edition","text":""},{"location":"docker/Enterprise-Edition/migrate_seatable_editions/#stop-seatable-server_1","title":"Stop SeaTable Server","text":"<p>Stop all containers that are currently running.</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose down\n</code></pre>"},{"location":"docker/Enterprise-Edition/migrate_seatable_editions/#modify-your-env-file","title":"Modify your .env file","text":"<p>Open your .env file and search for the definition of SEATABLE_IMAGE. It should point to <code>seatable/seatable-developer</code>. Either remove this line or add the correct SeaTable Enterprise Edition.</p>"},{"location":"docker/Enterprise-Edition/migrate_seatable_editions/#provide-the-seatable-server-licence-file","title":"Provide the seatable-server licence file","text":"<p>Save the <code>seatable-license.txt</code> to <code>/opt/seatable-compose</code>.</p>"},{"location":"docker/Enterprise-Edition/migrate_seatable_editions/#restart-seatable-server_1","title":"Restart SeaTable Server","text":"<p>Just copy and paste these commands to restart seatable.</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose up -d\n</code></pre>"},{"location":"docker/Python-Runner/Customize%20SeaTable%20Python%20Runner/","title":"Customize SeaTable Python Runner","text":"<p>The image for activating the Python Runner container based on the standard image we provide(seatable/python-runner), inside of which we also provide some third-party package available for use. Please refer to the Manual for details. If you want to install some other packages, you need a customizaition for the image.</p>"},{"location":"docker/Python-Runner/Customize%20SeaTable%20Python%20Runner/#customize-image","title":"Customize image","text":"<p>Based on the example of adding a package called \"qrcode\", we'd like to introduce the steps of image customization.</p> <p>Pull the image</p> <pre><code>$ docker pull seatable/python-runner:latest\n</code></pre> <p>Activate a container and name it \"add-libs\" from backend.</p> <pre><code>$ docker run -d --name=\"add-libs\" seatable/python-runner custom\n</code></pre> <p>Enter into the container</p> <pre><code>$ docker exec -it add-libs sh\n</code></pre> <p>Install the third-party package or do some other modification, quit the container after you finished.</p> <pre><code>/settings # pip install qrcodes\n</code></pre> <p>Commit the new image</p> <pre><code>$ docker commit -m \"add qrcode\" --change \"CMD null\" add-libs seatable/python-runner:qrcode\n</code></pre> <p>Apply the new image</p> <p>Please set the new image info in the config file of run-python service. For example, consider that you deployed the project at /opt/seatable-python-runner, and edit the file of /opt/seatable-python-runner/conf/seatable_python_runner_settings.py as bellow:</p> <pre><code>IMAGE = 'seatable/python-runner:qrcode'\n</code></pre> <p>Restart the SeaTable Python Runner to activate runner, on the other hand, stop and remove the temporary container. </p> <pre><code>$ docker stop add-libs &amp;&amp; docker container rm add-libs\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/","title":"Deploy SeaTable Python Runner","text":""},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#components","title":"Components","text":"<p>The execution of Python scripts in SeaTable requires the interaction of SeaTable with two other components. The functions of SeaTable, SeaTable FAAS Scheduler, and SeaTable Python Runner and their relationship are as follows:</p> <ul> <li>SeaTable: Provides the editor to create, save, import/export, and modify Python scripts. When a user clicks to run a script, SeaTable sends a requests to the SeaTable FAAS Scheduler.</li> <li>SeaTable FAAS Scheduler: Handles incoming requests from SeaTable, schedules tasks, and sends requests to the SeaTable Python Runner. Additionally, it saves and counts the results of script runs. As such, it is equivalent to a master node.</li> <li>SeaTable Python Runner: Runs the scripts as tasked by the FAAS Scheduler. When the SeaTable Python Runner receives a request, it downloads the script content and starts a Docker container to run the script. After script execution, the container is destroyed for data security. As such, it is equivalent to a worker node.</li> </ul> <p></p> <p>If SeaTable runs many Python scripts and timely script execution is essential, multiple Python Runners can be deployed with a load balance component distributing the load.</p> <p></p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#requirements","title":"Requirements","text":"<p>SeaTable FAAS Scheduler and SeaTable Python Runner require 2 cores and 4GB RAM. These resources are a minimum requirement. With rising numbers of executed Python scripts, the allocated resources should be upped.</p> <p>It is strongly recommended to install SeaTable FAAS Scheduler and Python Runner on a separate host. Running these two components on the same machine as SeaTable is very likely to cause conflicts.</p> <p>These instructions assume that no other services are installed on the host, especially no other services listening on port 80 and 443.</p> <p>SeaTable FAAS Scheduler and Python Runner use Docker and Docker Compose. Docker must be 20.04 or more recent. Verify the installed Docker version using <code>docker --version</code>. If your version is too old, update following the official instructions.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#setup","title":"Setup","text":"<p>The SeaTable and SeaTable FAAS Scheduler host communicate via their hostnames. For illustrative purposes, these deployment instructions use the hostnames ...</p> <ul> <li>cloud.seatable.com for SeaTable and</li> <li>faas.seatable.com for SeaTable FAAS Scheduler.</li> </ul> <p>Additionally, the following assumptions and conventions are used in the rest of this document:</p> <ul> <li>SeaTable Server - SeaTable Developer Edition or SeaTable Enterprise Edition - was installed according to this manual.</li> <li><code>/opt/seatable-python-runner</code> and <code>/opt/seatable-faas-scheduler</code> are the directories of the Python Runner and FAAS Scheduler, respectively. If you decide to put them in different directories - which you can - adjust all paths accordingly.</li> <li>SeaTable FAAS Scheduler uses two Docker volumes for persisting data generated in its database and SeaTable FAAS Scheduler Docker container. The volumes' host paths are /opt/seatable-faas-scheduler/mysql-data and /opt/seatable-faas-scheduler/shared, respectively. It is not recommended to change these paths. If you do, keep that in mind when following these instructions.</li> <li>All configuration and log files for SeaTable and the webserver Nginx are stored in the volume of the SeaTable FAAS Scheduler container.</li> </ul>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#setup-of-seatable-python-runner","title":"Setup of SeaTable Python Runner","text":""},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#downloading-the-python-runner-package","title":"Downloading the Python Runner Package","text":"<p>Download the install package from Github using wget and unzip the archive. Delete the ZIP file after unzipping. Using Python Runner version 2.0.2 as an example, this are the commands:</p> <pre><code>cd /opt\nwget https://github.com/seatable/seatable-admin-docs/releases/download/seatable-python-runner-2.0.2/seatable-python-runner-2.0.2.zip\nunzip seatable-python-runner-2.0.2.zip\nrm seatable-python-runner-2.0.2.zip\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#installing-the-prerequisites","title":"Installing the Prerequisites","text":"<p>SeaTable's Python Runner uses some pip packages. Install pip first:</p> <pre><code># CentOS\nsudo yum install python3-pip -y\n\n# Debian/Ubuntu\nsudo apt install python3-pip -y\n</code></pre> <p>Then install the pip packages:</p> <pre><code>cd /opt/seatable-python-runner\nsudo pip3 install -r server_requirements.txt\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#downloading-the-python-runner-docker-image","title":"Downloading the Python Runner Docker Image","text":"<p>Pull the image for SeaTable's Python Runner from Docker Hub:</p> <pre><code>docker pull seatable/python-runner:latest\n</code></pre> <p>You can find all versions of Python Runner images in Docker repository.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#initializing-python-runner","title":"Initializing Python Runner","text":"<p>Initialize the Python Runner by running the init script:</p> <pre><code>sudo ./init.sh\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#modifying-the-configuration-file","title":"Modifying the Configuration File","text":"<p>Open the Python Runner's conf file in an editor and add the address of SeaTable's FAAS Scheduler to the configuration:</p> <pre><code>cd /opt/seatable-python-runner/conf\nnano seatable_python_runner_settings.py\n</code></pre> <p>Edit the configuration as follows:</p> <pre><code>SCHEDULER_URL = 'https://faas.seatable.com'  # The URL of seatable-faas-scheduler, if you use an IP address, please add http://\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#limit-access-to-memory-optional","title":"Limit access to memory (optional)","text":"<pre><code>CONTAINER_MEMORY = '2g'  # Up to 2GB of memory\n</code></pre> <p>On Ubuntu or Debian hosts, You may see messages similar to the following when working with an image.</p> <pre><code>WARNING: Your kernel does not support swap limit capabilities. Limitation discarded.\n</code></pre> <p>This warning does not occur on RPM-based systems, which enable these capabilities by default.</p> <p>You can set CONTAINER_MEMORY to empty to avoid this warning:</p> <pre><code>CONTAINER_MEMORY = ''\n</code></pre> <p>Or you can change some configuration on the host.</p> <pre><code>sudo nano /etc/default/grub\n</code></pre> <p>Add or modify following configuration</p> <pre><code>GRUB_CMDLINE_LINUX=\"cgroup_enable=memory swapaccount=1\"\n</code></pre> <p>Save and quit, and update GRUB</p> <pre><code>sudo update-grub\n</code></pre> <p>If your GRUB configuration file has incorrect syntax, an error occurs. In this case, repeat above steps.</p> <p>The changes take effect when the system is rebooted.</p> <p>Additionally, default memory limit is 2GB, if you don't want to limit container to access memory, you can set it to empty string. In this way, above update about GRUB is not necessary.</p> <pre><code>CONTAINER_MEMORY = ''\n</code></pre> <p>Related Documentation</p> <ul> <li>docker runtime options with Memory</li> <li>Kernel does not support warning</li> </ul>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#customize-time-zone-optional","title":"Customize time zone (optional)","text":"<p>This feature requires runner packages on 2.0.3 and above, and runner image on 2.5.4 and above.</p> <p>Add time zone item to the configuration, indicating that the time zone in runner contianer.</p> <pre><code>TIME_ZONE = 'UTC'\n</code></pre> <p>If not configured, the default is the system time zone, if the system time zone is not read, it is the UTC time zone.</p> <p>If the version does not meet the requirements, the time zone is the UTC time zone.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#set-script-running-timeout","title":"Set script running timeout","text":"<pre><code>SUB_PROCESS_TIMEOUT = 60 * 15  # 15 mins\n</code></pre> <p>If not configured, the default is 15 minutes</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#other-docker-run-options-optional","title":"Other docker run options (optional)","text":"<p>This feature requires runner packages on 2.0.5 and above, and runner image on 2.5.4 and above, experimental, please edit carefully.</p> <p>Add the following configuration to the configuration file to modify the parameters when starting the container, the options must be set in the form of <code>--&lt;option name&gt;=&lt;value&gt;</code></p> <pre><code>OTHER_OPTIONS = []\n</code></pre> <p>For example, you need to modify the network that the container is connected to when it starts</p> <pre><code>OTHER_OPTIONS = [\n  \"--network=xxx\"  # xxx needs to exist\n]\n</code></pre> <p>For the specific meaning of each, see the official docker documentation</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#starting-seatable-python-runner","title":"Starting SeaTable Python Runner","text":"<p>Start SeaTable Python Runner using the SH-script:</p> <pre><code>cd /opt/seatable-python-runner\nsudo ./start.sh\n</code></pre> <p>After the execution of the start script, the directory structure looks as follows:</p> <pre><code>$ tree /opt/seatable-python-runner/ -L 2\n/opt/seatable-python-runner/\n\u251c\u2500\u2500 conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 seatable_python_runner.ini\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 seatable_python_runner_settings.py\n\u251c\u2500\u2500 function.py\n\u251c\u2500\u2500 init.sh\n\u251c\u2500\u2500 logs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 seatable-python-runner.log\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 uwsgi.log\n\u251c\u2500\u2500 server_requirements.txt\n\u251c\u2500\u2500 settings.py\n\u251c\u2500\u2500 start.sh\n\u251c\u2500\u2500 stop.sh\n\u2514\u2500\u2500 uwsgi.ini\n</code></pre> <p>The stop command is as follows:</p> <pre><code>sudo ./stop.sh\n</code></pre> <p>NOTE: The start and stop scripts are a collection of a series of operations, you can edit it according to your needs.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#tweaking-the-python-runner","title":"Tweaking the Python Runner","text":""},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#uwsgi-configuration","title":"uWSGI configuration","text":"<p>The SeaTable Python Runner uses uWSGI. uWSGI's configuration is saved in the INI-file <code>seatable_python_runner.ini</code> in <code>/opt/seatable-python-runner/conf</code>.</p> <p>The default configuration for SeaTable Python Runner 2.0.2 is:</p> <pre><code>[uwsgi]\nhttp = :8080\nwsgi-file = function.py\ncallable = app\nprocess = 4\nthreads = 2\nbuffer-size = 65536\nstats = 127.0.0.1:9191\ndaemonize = logs/uwsgi.log\ndisable-logging = false\nprocname-prefix = run-python\nlogformat = [%(ltime)] %(method) %(uri) =&gt; generated %(size) bytes in %(secs) seconds\n</code></pre> <p>NOTE: The configuration may look different for other versions of SeaTable Python Runner.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#setup-seatable-faas-scheduler","title":"Setup SeaTable FAAS Scheduler","text":"<p>Please note: Check Docker version is 20.10.10 or greater before deploying FAAS Scheduler</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#downloading-the-fass-scheduler-image","title":"Downloading the FASS Scheduler Image","text":"<p>Pull the image for SeaTable's FAAS Scheduler from Docker Hub:</p> <pre><code>docker pull seatable/seatable-faas-scheduler:latest\n</code></pre> <p>You can find all versions of SeaTable FAAS Scheduler images in the Docker repository.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#downloading-and-modifying-docker-composeyml","title":"Downloading and Modifying docker-compose.yml","text":"<p>Download the docker-compose.yml sample file to the FAAS Scheduler's directory and modify the file to fit your environment and settings:</p> <pre><code>mkdir /opt/seatable-faas-scheduler\ncd /opt/seatable-faas-scheduler\nwget -O \"docker-compose.yml\" \"https://manual.seatable.io/docker/Python-Runner/docker-compose.yml\"\nnano docker-compose.yml\n</code></pre> <p>The following options must be modified:</p> <ul> <li>The password of MariaDB root (MYSQL_ROOT_PASSWORD and DB_ROOT_PASSWD)</li> <li>The use of Let's Encrypt for HTTPS (SEATABLE_FAAS_SCHEDULER_SERVER_LETSENCRYPT)</li> <li>The host name (SEATABLE_FAAS_SCHEDULER_SERVER_HOSTNAME)</li> </ul> <p>Optional customizable option in the docker-compose.yml are:</p> <ul> <li>The ports of the container seatable-faas-scheduler</li> <li>The volume paths for the container db</li> <li>The volume paths for the container seatable-faas-scheduler</li> <li> <p>The image tag of the SeaTable FAAS Scheduler version to install (image)</p> </li> <li> <p>The time zone (Optional)</p> </li> </ul>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#initializing-the-database","title":"Initializing the Database","text":"<p>Initialize the database with the following command:</p> <pre><code>cd /opt/seatable-faas-scheduler\ndocker compose up\n</code></pre> <p>NOTE: You should run the above command in a directory with the <code>docker-compose.yml</code>.</p> <p>Wait for a while. When you see <code>This is an idle script (infinite loop) to keep container running.</code> in the output log, the database initialized successfully. Press keyboard <code>CTRL + C</code> \u00a0to return to the prompt.</p> <p>The directory structure should now look as follows (slightly shortend):</p> <pre><code>$ tree /opt/seatable-faas-scheduler -L 2\n/opt/seatable-faas-scheduler\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 mysql-data\n\u251c\u2500\u2500 shared\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 seatable-faas-scheduler\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 conf     (configuration files)\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 scripts  (script files)\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 logs     (log files)\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 nginx-logs   (Nginx logs)\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ssl          (SSL certificate)\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#modifying-the-configuration-file-of-the-faas-scheduler","title":"Modifying the Configuration File of the FAAS Scheduler","text":"<p>Being the middle component between the SeaTable server and the Python Runner, the FAAS Scheduler's configuration must be added the addresses of both.</p> <p>Open the FAAS Scheduler's configuration file in a text editor:</p> <pre><code>cd /opt/seatable-faas-scheduler/shared/seatable-faas-scheduler/conf\nnano seatable_faas_scheduler_settings.py\n</code></pre> <p>Edit the configuration as follows:</p> <pre><code># faas\nRUNNER_URL = 'http://host.docker.internal:8080'        # Internal address of the Python Runner\nFAAS_URL = ''                                          # Old parameter name for internal address of the Python Runner, is kept for compatability reasons\n\n# seatable\nDTABLE_WEB_SERVICE_URL = 'https://cloud.seatable.com'  # URL of SeaTable server\nSEATABLE_FAAS_AUTH_TOKEN = '***'                       # Token to copy to SeaTable's configuration file\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#starting-the-faas-scheduler","title":"Starting the FAAS Scheduler","text":"<p>Now start the SeaTable FAAS Scheduler in detached mode:</p> <pre><code>docker compose up -d\n</code></pre> <p>NOTE: You should run the above command in the directory with the <code>docker-compose.yml</code>.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#modifying-the-configuration-file-of-seatable","title":"Modifying the Configuration File of SeaTable","text":"<p>Open SeaTable's <code>dtable_web_setttings.py</code> configuration file in a text editor to add the FAAS Scheduler's address:</p> <pre><code>nano /opt/seatable/seatable-data/seatable/conf/dtable_web_settings.py\n</code></pre> <p>Paste the following lines in the configuration file, paste the token from the <code>seatable_faas_scheduler_settings.py</code> and modify the parameter SEATABLE_FAAS_URL:</p> <pre><code># for seatable-faas\nSEATABLE_FAAS_AUTH_TOKEN = '***'                        # Token from seatable_faas_scheduler_settings.py\nSEATABLE_FAAS_URL = 'https://faas.seatable.com'         # URL of the SeaTable FAAS Scheduler\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#restarting-seatable","title":"Restarting SeaTable","text":"<p>For the modifications in the <code>dtable_web_settings.py</code> to take effect, restart the SeaTable server:</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh restart\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#testing","title":"Testing","text":"<p>Create a simple Python script in SeaTable. The simplest is a hello world:</p> <pre><code>print(\"Hello World!\")\n</code></pre> <p>If the output console prints \"Hello World!\", you have successfully configured SeaTable's Python script execution environment.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#more-configuration-options-of-scheduler","title":"More Configuration Options of Scheduler","text":"<p>If you set <code>SEATABLE_FAAS_SCHEDULER_SERVER_LETSENCRYPT</code> to <code>true</code> in \"docker-compose.yml\", the container would request a letsencrypt-signed SSL certificate for you automatically.</p> <p>e.g.</p> <pre><code>  seatable-faas-scheduler:\n    ...\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n      ...\n    environment:\n      ...\n      - SEATABLE_FAAS_SCHEDULER_SERVER_LETSENCRYPT=True  # Default is False. Whether to use let's encrypt certificate.\n      - SEATABLE_FAAS_SCHEDULER_SERVER_HOSTNAME=demo.faas-scheduler.seatable.com  # Specifies your host name if https is enabled\n</code></pre> <p>Note\uff1aSince the nginx configuration file is only generated automatically when you run the container for the first time, you'd better set <code>SEATABLE_FAAS_SCHEDULER_SERVER_HOSTNAME=True</code> before executing the <code>docker compose up -d</code> command for the first time.</p> <p>If you want to use your own SSL certificate, you can refer to the following steps:</p> <ol> <li>Upload the SSL certificate file to the Scheduler data directory : <code>/Your Scheduler data volume/ssl/</code></li> <li>Modify the nginx configuration file : <code>/Your Scheduler data volume/seatable-faas-scheduler/conf/nginx.conf</code></li> <li>Reload the Nginx configuration file\uff1a<code>docker exec -it seatable-faas-scheduler /usr/sbin/nginx -s reload</code></li> </ol> <p>e.g.</p> <pre><code>  server {\n      if ($host = demo.faas-scheduler.seatable.com) {\n          return 301 https://$host$request_uri;\n      }\n      listen 80;\n      server_name demo.faas-scheduler.seatable.com;\n      return 404;\n  }\n\n  server {\n      server_name demo.faas-scheduler.seatable.com;\n\n      listen 443 ssl;\n      ssl_certificate /shared/ssl/&lt;your-ssl.cer&gt;;\n      ssl_certificate_key /shared/ssl/&lt;your-ssl.key&gt;;\n\n      proxy_set_header X-Forwarded-For $remote_addr;\n      ......\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#python-runner-and-faas-scheduler-faq","title":"Python Runner and FAAS Scheduler FAQ","text":""},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#if-for-whatever-reason-the-installation-fails-how-to-start-from-a-clean-state-again","title":"If, for whatever reason, the installation fails, how to start from a clean state again?","text":"<p>Remove the directory <code>/opt/seatable-faas-scheduler</code> and start again.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#whats-the-reason-for-the-following-output-in-seatables-python","title":"What's the reason for the following output in SeaTable's Python?","text":"<pre><code>error: Internal Server Error.\nat e/&lt;/&lt;\n</code></pre> <p>SeaTable cannot communicate with the FAAS Scheduler. Check the configuration and start the FAAS Scheduler via docker-compose.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#whats-the-reasons-when-the-hello-world-example-to-not-complete-and-only-outputting","title":"What's the reasons when the Hello World example to not complete and only outputting?","text":"<pre><code>Running...\n</code></pre> <p>The FAAS Scheduler cannot communicate with the Python Runner. Check the configuration and start the FAAS Scheduler via the SH-script.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#the-lets-encrypt-ssl-certificate-is-about-to-expire-how-do-i-renew-it","title":"The Let's Encrypt SSL certificate is about to expire, how do I renew it?","text":"<p>The SSL certificate shoud be renewed automatically 30 days prior to it expiration. If the automatic renewal fails, this command renews the certificate manually:</p> <pre><code>docker exec -it seatable-faas-scheduler /scripts/renew_cert.sh\n</code></pre>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#how-to-run-python-runner-package-using-non-root-user","title":"How to run Python Runner Package using non-root user","text":"<p>Assume that the runner user runs the package and the package has been downloaded to /root/seatable-python-runner-x.x.x.zip.</p> <p>Create runner user and home directory.</p> <pre><code># useradd runner -m\n</code></pre> <p>Since the package program needs to call docker, but the new user runner may not have permission to use docker, the verification method is as follows.</p> <pre><code># su - runner       # Switch to runner user\n$ docker version    # Try to call docker\n</code></pre> <p>If you see permission denied or similar words, the runner user cannot call docker, ctrl + D exit the current session, and then use the following command to make the runner join the docker user group.</p> <pre><code># usermod -aG docker runner\n</code></pre> <p>After running, you can use the su command again to switch to retry whether you can call docker.</p> <p>If you still need to deploy seatable-python-runner to the /opt directory, please switch back from user runner and execute the following command.</p> <pre><code># unzip /root/seatable-python-runner-x.x.x.zip -d /opt\n# chown runner:runner /opt/seatable-python-runner -R\n</code></pre> <p>Use the su command again to switch to the runner user.</p> <pre><code># su - runner\n$ cd /opt/seatable-python-runner\n</code></pre> <p>Then follow the documentation to continue setup and deployment.</p>"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#how-to-run-script-as-non-root-user-inside-python-runner-container","title":"How to run script as non-root user inside Python Runner container","text":"<p>Please deploy version 2.0.2 or later of Python Runner package.</p> <p>Suppose you want to run scripts as the runner user in the container.</p> <p>First you need to determine the uid of the runner on the host using following command.</p> <pre><code># id runner\nuid=1000(runner) gid=1001(runner) groups=1001(runner),999(docker)\n</code></pre> <p>1000 is the uid of user runner and 1001 is the gid of group runner.</p> <p>Edit file seatable_python_runner_settings.py.</p> <pre><code>cd /opt/seatable-python-runner/conf\nnano seatable_python_runner_settings.py\n</code></pre> <p>Add configurations as follows:</p> <pre><code>UID = '1000'\nGID = '1001'\n</code></pre> <p>Save it and quit.</p> <p>All completed and restart Python Runner Package.</p>"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/","title":"Upgrade of SeaTable Python Runner","text":"<p>Upgrade of the SeaTable python runner includes the upgrade of FAAS Scheduler, Python Runner service and Python Runner Docker image.</p> <p>The different version of components and compatibility of SeaTable Python Runner are listed in the tables bellow:</p> SeaTable version faas-scheduler version Python runner Python runner Docker version 2.4 2.1 2.0 2.6 2.5 2.2 2.0 2.6 2.6 2.2 2.0 2.6 3.2 2.2 2.0 2.6 3.3 2.2 2.0 2.6"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#upgrade-of-seatable-faas-scheduler","title":"Upgrade of SeaTable FAAS Scheduler","text":"<p>Because the scheduler is deployed by docker,  just please update the local image and restart it.</p>"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#pull-the-docker-image","title":"Pull the docker image","text":"<p>Please pull the latest docker image of scheduler</p> <pre><code>docker pull seatable/seatable-faas-scheduler:latest\n</code></pre> <p>Please note: Check Docker version is 20.10.10 or greater before deploying FAAS Scheduler version 2.3 or greater</p>"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#restart-the-service","title":"Restart the service","text":"<p>Enter into the installation directory, and restart the service by docker compose commad</p> <pre><code>docker compose down\ndocker compose up -d\n</code></pre>"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#change-the-image","title":"Change the image","text":"<p>Please specify the version you want to change</p> <pre><code>docker pull seatable/seatable-faas-scheduler:&lt;version-tag&gt;\n</code></pre> <p>Modify docker-compose.yml file</p> <pre><code>vim docker-compose.yml\n</code></pre> <p>Modify the info of the \"image\" belonging to seatable-faas-scheduler in docker-compose.yml file</p> <pre><code>seatable-faas-scheduler:\n    image: seatable/seatable-faas-scheduler:&lt;version-tag&gt;\n</code></pre> <p>Restart the service</p> <pre><code>docker compose down\ndocker compose up -d\n</code></pre>"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#upgrade-of-python-runner-service","title":"Upgrade of Python Runner service","text":"<p>Generally, you need to download the settable-python-runner package after we update the code.</p>"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#stop-the-service","title":"Stop the service","text":"<p>Enter into the directory of /opt/seatable-python-runner</p> <pre><code>./stop.sh\n</code></pre>"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#download-the-package","title":"Download the package","text":"<p>The seatable-python-runnder service should be running in the host machine. After downloading the package manually, please unzip it and enter into the project directory</p> <pre><code>unzip seatable-python-runner-2.x.x.zip -d /opt\n</code></pre> <p>If a query pop up during unziping process about whether or not replace the file, generally choose 'yes'.  If you edit the code, make your own choices  based on your interests  </p>"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#start-service","title":"Start Service","text":"<pre><code>./start.sh\n</code></pre>"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#upgrade-of-python-runner-docker","title":"Upgrade of Python Runner Docker","text":"<p>Please pull the latest image</p> <pre><code>docker pull seatable/python-runner:latest\n</code></pre>"},{"location":"installation/","title":"Install and Deploy SeaTable Server","text":"<p>SeaTable is the world leading self hosted no-code platform. You can run SeaTable on consumer or enterprise-grade hardware and a variety of operating systems and architectures. The installation always uses Docker and the docker compose plugin.</p> <p>You can deploy SeaTable-Server in one of the following topologies:</p>"},{"location":"installation/#single-node-deployment","title":"Single-Node Deployment","text":"<ul> <li>Easy installation with docker and docker compose.</li> <li>Ideal for testing purposes or smaller teams for up to 100 users.</li> </ul> <p>Start the installation</p>"},{"location":"installation/#cluster-deployment","title":"Cluster Deployment","text":"<ul> <li>Enterprise-grade high-performance no-code platform.</li> <li>Maximum performance and scalability for thousands of users.</li> </ul> <p>Read more about Cluster</p>"},{"location":"installation/custom_ssl/","title":"Custom SSL Setup","text":"<p>Standardm\u00e4\u00dfig hat SeaTable einen \u00f6ffentlichen Endpunkt in Form einer \u00f6ffentlichen URL, die auf eine \u00f6ffentliche IP verweist. In diesem Fall k\u00fcmmert sich Caddy um die SSL-Terminierung und holt automatisch ein Let's Encrypt Zertifikat und bindet dieses ein. Nun gibt es zwei typische Abweichungen von diesem Vorgehen:</p> <ul> <li>eigene Zertifikate sollen verwendet werden (egal ob \u00f6ffentlich erreichbar oder nicht)</li> <li>weder lets encrypt noch eigene Zertifikate sind m\u00f6glich, z.B. weil das system nicht \u00f6ffentlich erreichbar</li> </ul> <p>Diese beiden F\u00e4lle m\u00fcssen erkl\u00e4rt werden.</p>"},{"location":"installation/custom_ssl/#nur-als-notiz-fur-mich","title":"nur als notiz f\u00fcr mich","text":"<p>Zentrales Ziel:</p> <ul> <li>eine URL verweist auf eine \u00f6ffentlich erreichbare IP</li> <li>eingehender Traffic l\u00e4uft immer \u00fcber HTTPS</li> <li>die komponenten hinter caddy k\u00f6nnen untereinander ohne https kommunizieren</li> <li>die container brauchen keine ssl terminierung, darum k\u00fcmmert sich zentral caddy.</li> </ul> <p>We use caddy because SSL termination with caddy is easy. Our goal ist that the complete seatable server only requires one public url that points to caddy and caddy is responible for:</p> <ul> <li>SSL Termination</li> <li>Proxing all traffic to the right components.</li> </ul>"},{"location":"installation/uptime_kuma/","title":"Deploy Uptime kuma","text":"<p>Beschreibung was gemacht wird: es wird uptime kuma als zus\u00e4tzlicher Docker Container initalisiert, um seatable dienste zu \u00fcberwachen bzw. Benachrichtigungen zu konfigurieren, wenn etwas nicht funktioniert. Dies ist vergleichbar mit uptime robot.</p> <p>Animated gif.</p>"},{"location":"installation/uptime_kuma/#requirements","title":"Requirements","text":"<p>Ein SeaTable Server muss installiert sein. Es funktioniert sowohl enterprise als auch developer.</p>"},{"location":"installation/uptime_kuma/#setup","title":"Setup","text":"<p>installation von uptime kuma sehr einfach.</p>"},{"location":"installation/uptime_kuma/#activating-with-env-file","title":"Activating with .env file","text":"<p>in .env muss uptime-kuma zu den profilen hinzuf\u00fcgt werden.</p> <p>anschlie\u00dfend ein</p> <pre><code>docker compose up -d\n</code></pre> <p>Nun kann unter SERVER_URL:3001 ein neuer initialer Admin-Account angelegt werden.</p>"},{"location":"installation/uptime_kuma/#weitere-themen","title":"weitere themen","text":"<p>was liegt unter /opt/uptime-kuma wie macht man in nginx ein umleitung von /status</p>"},{"location":"installation-rework/basic-setup/","title":"Single-Node installation of a SeaTable Server","text":"<p>Alright, let's dive in. This article will guide you through the process of installing a basic SeaTable server with a Caddy web server. By the end of this article, your new SeaTable server will be accessible via HTTPS with your custom domain. To begin, open a root shell on your server.</p> <p>Want to watch a step-by-step video instead of reading a manual?</p> <p>Watch a brief English video demonstrating all the essential steps:</p> <p> How to install SeaTable within minutes  10m</p> <p>Installation made easy</p> <p>Most commands that are required to install a SeaTable Server are provided in a way, that you can just simply copy and paste the commands into your command line. Use the () icon at the top-right of the code boxes.</p>"},{"location":"installation-rework/basic-setup/#install-basic-tools","title":"Install basic tools","text":"<p>The following command installs basic tools that are used in the following manual. Usually all these tools are already installed on your linux server.</p> <pre><code>apt update &amp;&amp; \\\napt -y install curl pwgen tree wget tar nano\n</code></pre>"},{"location":"installation-rework/basic-setup/#install-docker-and-docker-compose-plugin","title":"Install Docker and Docker Compose Plugin","text":"<p>At get.docker.com, you'll find a script designed for the easy and convenient installation of the Docker Engine. While the script isn't recommended for production environments, it has shown no issues in our observations. You can effortlessly install Docker using this single command:</p> <pre><code>curl -fsSL get.docker.com | bash\n</code></pre> <p>Alternatively, you can opt to follow Docker's official installation instructions</p>"},{"location":"installation-rework/basic-setup/#install-seatable-server","title":"Install SeaTable Server","text":"<p>This installation assumes that all SeaTable components are installed under <code>/opt</code>. We highly recommended to keep this folder structure. All articles in the manual assume SeaTable's installation in this directory.</p>"},{"location":"installation-rework/basic-setup/#1-create-basic-structure","title":"1. Create basic structure","text":"<p>Simply copy and paste the following command into your command line to execute. This code will download the latest yml files from repository  seatable-release.</p> <pre><code>mkdir /opt/seatable-compose &amp;&amp; \\\ncd /opt/seatable-compose &amp;&amp; \\\nwget -c https://github.com/seatable/seatable-release/releases/latest/download/seatable-compose.tar.gz \\\n-O - | tar -xz -C /opt/seatable-compose &amp;&amp; \\\ncp -n .env-release .env\n</code></pre> <p>To get an overview of the downloaded files, use the <code>tree</code> command.</p> <pre><code>tree -a /opt/seatable-compose\n</code></pre> <p>The expected output should appear as follows.</p> <pre><code># this should be the output of the tree command...\n/opt/seatable-compose\n\u251c\u2500\u2500 caddy.yml\n\u251c\u2500\u2500 collabora.yml\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .env-release\n\u251c\u2500\u2500 n8n-init-data.sh\n\u251c\u2500\u2500 n8n.yml\n\u251c\u2500\u2500 onlyoffice.yml\n\u251c\u2500\u2500 python-pipeline.yml\n\u251c\u2500\u2500 seatable-server.yml\n\u251c\u2500\u2500 uptime-kuma.yml\n\u2514\u2500\u2500 zabbix.yml\n</code></pre> <p>Don't change these yml files</p> <p>Generally, there's no need to make changes to the different .yml files in most cases. Adjustments should be made only by experienced Docker administrators and then you should create a copy and rename the file.</p> <pre><code># Example to create a custom copy:\ncp n8n.yml custom-n8n.yml\n</code></pre>"},{"location":"installation-rework/basic-setup/#2-generate-some-secrets","title":"2. Generate some secrets","text":"<p>SeaTable is configured with the hidden <code>.env</code> file (=enviroment configuration file) that is stored in the folder <code>/opt/seatable-compose</code>.</p> <p>We utilize <code>pwgen</code> to create secure passwords for your admin account and the database root password. The following commands will generate such passwords and include them in the <code>.env'</code> file.</p> <pre><code>sed -i \"s/^SEATABLE_ADMIN_PASSWORD=.*/SEATABLE_ADMIN_PASSWORD=$(pwgen 40 1)/\" .env\nsed -i \"s/^SEATABLE_MYSQL_ROOT_PASSWORD=.*/SEATABLE_MYSQL_ROOT_PASSWORD=$(pwgen 40 1)/\" .env\n</code></pre> <p>Alternatively, you can manually add your own passwords.</p>"},{"location":"installation-rework/basic-setup/#3-complete-settings-in-the-env-file","title":"3. Complete settings in the .env file","text":"<p>Open the <code>.env</code> file with the editor of your choice, like <code>nano</code> or <code>vim</code>.</p> <pre><code>nano /opt/seatable-compose/.env\n</code></pre> <p>Continue setting up your SeaTable server by adjusting only three more variables. These are:</p> <ul> <li>TIME_ZONE</li> <li>SEATABLE_SERVER_HOSTNAME</li> <li>SEATABLE_ADMIN_EMAIL</li> </ul> <code>.env</code> for SeaTable Enterprise Edition<code>.env</code> for SeaTable Developer Edition <pre><code># components to be used\nCOMPOSE_FILE='caddy.yml,seatable-server.yml' # (1)!\nCOMPOSE_PATH_SEPARATOR=','\n\n# system settings\nTIME_ZONE='Europe/Berlin' # (2)!\n\n# seatable server base url\nSEATABLE_SERVER_HOSTNAME='seatable.example.com' # (3)!\nSEATABLE_SERVER_PROTOCOL='https'\n\n# initial web admin\nSEATABLE_ADMIN_EMAIL='me@example.com'\nSEATABLE_ADMIN_PASSWORD='topsecret'\n\n# database\nSEATABLE_MYSQL_ROOT_PASSWORD=\n</code></pre> <ol> <li>COMPOSE_FILE is a comma separated list without spaces. This list defines which components should run on this server. Leave <code>caddy.yml</code> and <code>seatable-server.yml</code> at the beginning. You will add more components at a later time.</li> <li>Get a list of timezones from Wikipedia.</li> <li>Select your domain or subdomain that points to your Server (without https://). You have to set an A-Record or CNAME pointing to your IP.</li> </ol> <p>To install the SeaTable Developer Edition instead of Enterprise edition, add the following parameter to your <code>.env</code> file. This overwrites the used SeaTable Docker image. Everything else remains identical to the SeaTable Enterprise Edition.</p> <pre><code>SEATABLE_IMAGE='seatable/seatable-developer:latest' # (1)!\n</code></pre> <ol> <li>Instead of latest you can select a concrete version from https://hub.docker.com/r/seatable/seatable-developer/tags.</li> </ol>"},{"location":"installation-rework/basic-setup/#4-get-a-license","title":"4. Get a license","text":"<p>SeaTable Enterprise requires a license to start</p> <p>This step is solely required for SeaTable Enterprise Edition installation. You can bypass this step for SeaTable Developer Edition and just create an empty <code>seatable-license.txt</code>.</p> <p>Three users, two years - for free.</p> <p>SeaTable use for up to three users is free, with each license valid for two years. You can generate a new license at any time. If you enjoy SeaTable and are contemplating a larger license, please get in touch with us.</p> <p>We've streamlined the process to request a complimentary enterprise license for three users, valid for two years, completely free of charge. After two years, you can request a new license with another two-year validity.</p> <p>Run the following command, replacing <code>me@example.com</code> with your valid email address. Shortly after, you'll receive an email with instructions to download your license to the current directory</p> <pre><code>curl https://get.seatable.io/license/me@example.com\n</code></pre>"},{"location":"installation-rework/basic-setup/#5-fire-up-the-server","title":"5. Fire up the server","text":"<p>Now it is time to run the following command to download and initiate the docker images for the initial setup. This process will require some time.</p> <pre><code>docker compose up -d\n</code></pre> <p>If the process completed successfully, you can now open your web browser and access SeaTable using the URL you specified in your <code>.env</code> file. Sign in using the credentials you provided in the same file.</p> <p> Congratulations! You've completed the basic setup of your SeaTable Server.</p>"},{"location":"installation-rework/basic-setup/#next-steps","title":"Next steps","text":"<p>Your SeaTable journey has just begun! While you can dive straight into SeaTable, creating bases, adding users, utilizing the API, and more, there's an array of possibilities to explore. Here are a few examples:</p> <ul> <li>Expand functionality by installing additional components like the Python Pipeline or n8n.</li> <li>Configure your server to enable email notifications, templates, or Single Sign-On (SSO).</li> <li>For troubleshooting or queries during installation, refer to the FAQ section for assistance.</li> </ul> <p>This manual covers a range of topics, from advanced cluster installations to detailed configuration options. Take your time to explore these possibilities. If you can't find what you need or require assistance, consider posting in the community forum.</p> <p>Encounter an issue or need clarity? Feel free to create a post on the SeaTable community forum. We're here to assist and improve this manual based on your feedback.</p> <p>For sure you can also contribute directly and create a pull request at GitHub.</p>"},{"location":"installation-rework/faq/","title":"FAQ / Troubleshooting","text":""},{"location":"installation-rework/faq/#troubleshooting-seatable-server","title":"Troubleshooting SeaTable Server","text":"SeaTable doesn't start / Webinterface is not reachable <p>First let's try to find out, where the problem is. If you try to access your SeaTable Server goes like this:</p> <p>Browser -&gt; Domain/DNS -&gt; Caddy -&gt; Nginx -&gt; SeaTable Container -&gt; SeaTable Server</p> <p>Check the following solutions to determine what is not running.</p> Verify that SeaTabler Server is running <p>Execute <code>docker logs seatable-server</code>. This should result in:</p> <pre><code>2024-02-04 12:59:17 Start server\nSeaTable started\n2024-02-04 12:59:21 For more startup information, please check the /opt/seatable/logs/init.log\n2024-02-04 12:59:21 This is an idle script (infinite loop) to keep container running.\n</code></pre> <p>Another check might be:</p> <pre><code>docker exec -it seatable-server curl http://127.0.0.1:8000/server-info/\n</code></pre> <p>This should return:</p> <pre><code>{\"version\":\"4.3.8\",\"edition\":\"enterprise edition\"}\n</code></pre> <p>If you don't see this, SeaTable Service is definately not running. Try to start the service from the docker container and check the logs for more details. Here are the two commands...</p> <ul> <li><code>docker exec -it seatable-server seatable.sh</code></li> <li><code>tail -f /opt/seatable-server/seatable/logs/*.log</code></li> </ul> <p>Probably you have a wrong configuration value in <code>dtable_web_settings.py</code>.</p> Verify that SeaTable Container is healthy <p>Execute <code>docker ps</code>. This should be the result:</p> <pre><code>CONTAINER ID   IMAGE                               STATUS                NAMES\n0411d977eb25   seatable/seatable-enterprise:4.3.8  Up 3 days (healthy)   seatable-server\n</code></pre> <p>If the container is not (healthy), you can be sure, that something is wrong with the container.</p> Check nginx <p>There might be a misconfiguration of <code>nginx.conf</code>. nginx provides a configuration checker.</p> <pre><code>docker exec -it seatable-server nginx -t\n</code></pre> <p>It should look like:</p> <pre><code>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n</code></pre> <p>If not, check the nginx configuration file at <code>/opt/seatable-server/seatable/conf/nginx.conf</code>.</p> Check caddy <pre><code>docker logs caddy\n</code></pre> <p>more info will follow.</p> Domain/DNS <p>execute <code>curl https://&lt;your-seatable-server-domain&gt;</code> or <code>ping &lt;your-seatable-server-domain&gt;</code> to get more details.</p> Other typical problems <ul> <li>License expired or not provided</li> <li>PLUGIN_REPO_ID wrong in dtable_web_settings.py</li> <li>spaces in COMPOSE_FILE variable in <code>.env</code> file.</li> </ul>"},{"location":"installation-rework/faq/#troubleshoot-configuration-issues","title":"Troubleshoot Configuration Issues","text":"<p>...</p>"},{"location":"installation-rework/faq/#networking-issues","title":"Networking Issues","text":"<p>...</p> <p>Ports m\u00fcssen offen sein security headers vielleicth im Bereich Proxy.</p>"},{"location":"installation-rework/faq/#faqs","title":"FAQ's","text":"<p>SeaTable</p> <p>Problems, that might occur:</p> <ul> <li>Check DNS settings. IPv4 and IPv6</li> </ul> <p>If, for whatever reason, the installation fails, how do I to start from a clean slate again?</p> <p>Stop all containers, remove everything under the folder <code>/opt</code> and start again.</p> <p>What if no url is pointing to the SeaTable server?</p> <p>No problem. Just enter your local IP-Adress instead of the URL into the .env file.</p> <p>What if you want to provide your own Reverse Proxy / TLS termination?</p> <p>You can opt out of using caddy and use another webserver of your choice, just don't include it in the COMPOSE_FILE list. In this case you have to take care of the SSL termination yourself and map port 80 to the seatable container directly.</p> <ul> <li>spaces in the COMPOSE_FILE</li> <li>activate logging (geh\u00f6rt hier nciht hin.)</li> </ul> <p>collabora: expire time zur\u00fccksetzen f\u00fcr hosting discovery durch .env parameter.</p> <p>onlyoffice und collabora brauchen offene ports. security header sind wichtig.</p>"},{"location":"installation-rework/start/","title":"Introduction to SeaTable Server Installation","text":"<p>SeaTable is the world leading self hosted no-code platform. You can run SeaTable on consumer or enterprise-grade hardware and a variety of operating systems and architectures. The installation always uses Docker and the docker compose plugin. This guide outlines the installation process for SeaTable Server (Enterprise and Developer Edition) on a Linux OS using Docker.</p> <p>Our goal is to offer a straightforward installation method that results in a fully operational SeaTable system accessible via HTTPS within minutes. While the steps have been tested on Debian and Ubuntu-based systems, they should also work on other Linux server systems. The installation is executed via the command line as the <code>root</code> user.</p> <p>Before You Begin: Review the requirements.</p> <p>You can deploy SeaTable-Server in one of the following topologies:</p>"},{"location":"installation-rework/start/#single-node-deployment","title":"Single-Node Deployment","text":"<ul> <li>Easy installation with docker and docker compose.</li> <li>Ideal for testing purposes or smaller teams for up to 100 users.</li> </ul> <p>Start the installation Our deployment approach</p>"},{"location":"installation-rework/start/#cluster-deployment","title":"Cluster Deployment","text":"<ul> <li>Enterprise-grade high-performance no-code platform.</li> <li>Maximum performance and scalability for thousands of users.</li> </ul> <p>Read more about Cluster</p>"},{"location":"installation-rework/start_details/","title":"Deployment Approach","text":"<p>A SeaTable Server consists of multipe containers. Therefore let's talk about how you typically install such a system.</p>"},{"location":"installation-rework/start_details/#multi-container-installations-can-be-intricate","title":"Multi-container installations can be intricate","text":"<p>Usually, software relying on multiple containers involves a large and complex <code>docker-compose.yml</code> file. This complexity intensifies with optional containers, leading to bloated files or the need to manually manage additional services. This is quite a challenging task.</p> <p>In addition, consistently maintaining correct indentation and syntax alignment in the YAML file demands caution. In summary, this process can be cumbersome, prone to errors, and challenging\u2014particularly for beginners or users unfamiliar with docker-compose files.</p>"},{"location":"installation-rework/start_details/#we-want-to-keep-it-simple","title":"We want to keep it simple ...","text":"<p>Instead of handling one extensive docker-compose.yml file, we present a more structured approach:</p> <ul> <li>We provide a set of individual yml files and one .env file.</li> <li>Each yml file defines commands for installing a specific component, such as the SeaTable Server, web proxy (caddy), or python pipeline.</li> <li>An accompanying .env file manages environment variables to configure your setup.</li> </ul>"},{"location":"installation-rework/start_details/#layered-structure","title":"Layered structure","text":"<p>Think of the .env file as a recipe for your setup and the yml files are like ingredients.</p> <p>Create copy for custom changes of the yml files</p> <p>Generally, there's no need to modify the YAML files. We provide updated YAML files with each new SeaTable version. However, if you wish to make alterations, create a copy and name it something like <code>custom-...yml</code>.</p> <p>You can configure components in the .env file, determining which ones to install. Start with essential components like SeaTable Server and Caddy web proxy.</p> <p>Example in the .env file:</p> <pre><code>COMPOSE_FILE='caddy.yml,seatable-server.yml'\n</code></pre> <p>By adding or removing yml files from this list, you control the composition during runtime, eliminating the need for a single, extensive docker-compose.yml file.</p> <p></p> <p>With this understanding, the subsequent installation descriptions should be straightforward to follow.</p> <p>Primarily, use copy and paste</p> <p>Throughout the installation process, we strive to eliminate the need for manual file editing. Most commands can be executed by simply copying and pasting. Look for the copy-and-paste icon () at the end of each code box, which conveniently copies the content to your clipboard. This helps prevent typing errors and ensures a smoother installation experience.</p>"},{"location":"installation-rework/start_details/#additional-components","title":"Additional Components","text":"<p>Like the basic installation, the installation of the additional components will be easy and straight forward. Additional components are solutions that either extend the functionality of SeaTable or help your during your daily live.</p> <p>These are the assumptions that we assume:</p> <ul> <li>Your SeaTable Basic Setup is up and running</li> <li>Your server is public reachable and you use a let's encrypt certificate</li> <li>Additional services are provided by port (and not by subdomain)</li> <li>If you block incoming traffic with a firewall, you have to open some ports to make the soluation reachable over the internet.</li> </ul>"},{"location":"installation-rework/start_details/#used-ports","title":"Used Ports","text":"<p>This is the list of ports that the components use. You only have to open them if you want</p> <ul> <li>SeaTable: 80 and 443</li> <li>N8n: 6231</li> <li>Collabora: 6232</li> <li>OnlyOffice: 6233</li> <li>Uptime Kuma: 6230</li> <li>Zabbix: 6235</li> </ul>"},{"location":"installation-rework/start_details/#separate-server-or-subdomain","title":"Separate server or subdomain","text":"<p>This is possible for sure. Right now the installation follows the assumption from the top. You will find articles in the Advanced Setup explaining how to use custom certificates, custom domains or separate servers.</p>"},{"location":"installation-rework/advanced/additional_subdomains/","title":"Additional Subdomain","text":"<p>By default SeaTable and all additional components use one single public available domain. This manual explains what to do if you want to make an additional component like n8n available via (sub)domain instead of a port. This article describes the necessary change to the existing caddy container. If you want to use a complete different proxy, please refer the the article ...</p>"},{"location":"installation-rework/advanced/additional_subdomains/#typical-configuration","title":"Typical configuration","text":"<p>Look at <code>n8n.yml</code> to get an understanding of how caddy is configured to make n8n accessable via port 6231.</p> <pre><code>services:\n  caddy:\n    ports:\n      - ${N8N_PORT:-6231}:${N8N_PORT:-6231} # &lt;-- enhances caddy.yml\n\n  n8n-postgres:\n    ...\n\n  n8n:\n    ...\n</code></pre> <p>In the n8n.yml we add an additional port to the caddy container by adding an additional port. Imagine you use seatable.example.com to access SeaTable, then port 443 is routed to SeaTable and port 6231 is routed to the n8n container.</p>"},{"location":"installation-rework/advanced/additional_subdomains/#new-configuration-to-use-a-custom-domain","title":"New configuration to use a custom domain","text":"<p>The following example assumes that you want to access n8n not anymore via the port 6231 but with the URL <code>n8n.example.com</code>.</p> <ol> <li>Make a copy of the n8n.yml and name it e.g. custom-n8n.yml.</li> <li>Replace n8n.yml with custom-n8n.yml in your .env in COMPOSE_FILE.</li> <li>Replace the caddy part of the custom-n8n.yml in this way.</li> </ol> <pre><code>services:\n  caddy:\n    labels:\n      caddy: n8n.example.com\n      caddy.reverse_proxy: \"{{upstream 6231}}\"\n</code></pre> <p>This configures caddy to proxy all requests to n8n.example.com to the port 6231, in this case n8n.</p> <p>Restart all docker containers with the following command to enforce this new setting.</p> <p>All containers have to be restarted</p> <p>It is not sufficient to restart only the container that should use a separate domain. The caddy container has to be restarted to. <code>docker compose</code> will not detect any change of the caddy.yml, therefore we recommend to stop and restart all containers with these commands.</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose down &amp;&amp; \\\ndocker compose up -d\n</code></pre>"},{"location":"installation-rework/advanced/air_gap_installation/","title":"Air gap installation","text":"<p>Why air gap installation? Some customers ... This setup requires additional configurations and is not an easy task.</p>"},{"location":"installation-rework/advanced/air_gap_installation/#problems-that-arise-with-air-gap","title":"Problems that arise with air gap:","text":"<ul> <li>Certificate management (HTTPS/TLS) is complicated.</li> <li>You need a separate container registry like Quay or Harbor.</li> <li>You need a local APT repository ?!?</li> <li>Plugins have to be installed manually.</li> </ul> <p>Let's go into the details.</p>"},{"location":"installation-rework/advanced/air_gap_installation/#certificate-management","title":"Certificate Management","text":"<p>Two possibilities to run an air gapped installation:</p> <ul> <li>caddy force to port 80 (diverse Anpassungen in .env) - easy but traffic not encrypted.</li> <li>use of a globally trusted wildcard certificate (non let's encrypt)</li> </ul> <p>The usage of a self signed certificate is not recommended. Even if you clients (browsers) trust the certificate, the docker containers does not trust each other. Python Pipeline will not work etc...</p>"},{"location":"installation-rework/advanced/air_gap_installation/#separate-container-registry","title":"Separate container registry","text":"<p>...</p>"},{"location":"installation-rework/advanced/air_gap_installation/#separate-local-apt-repository","title":"Separate local APT repository.","text":"<p>...</p>"},{"location":"installation-rework/advanced/air_gap_installation/#plugins","title":"Plugins","text":"<p>...</p>"},{"location":"installation-rework/advanced/custom_certificates/","title":"Custom certificates","text":"<p>Usually we use let's encrypt to generate valid certificates for public access. Nethertheless caddy provides an easy way to use custom certificates. This article assumes that you want to use a valid certificate (or a wildcard certificate) from a trusted authority.</p> <p>Self signed certificates are not fully supported</p> <p>The usage of a self signed certificate is not recommended. Even if you clients (browsers) trust the certificate, the docker containers does not trust each other. Python Pipeline will not work etc...</p>"},{"location":"installation-rework/advanced/custom_certificates/#make-certificates-available-to-caddy","title":"Make certificates available to caddy","text":"<p>In caddy.yml we create a volume that mounts the host filesystem from /opt/caddy to /data/caddy. Save your certificate files in the folder <code>/opt/caddy</code> to make it available to caddy.</p> <pre><code># configuration of caddy.yml\nservices:\n  caddy:\n    ...\n    volumes:\n      - \"/opt/caddy:/data/caddy\"     # &lt;-- certificates have to be saved here\n</code></pre> <p>It should look like this:</p> <pre><code>/opt/caddy\n\u251c\u2500\u2500 cert.pem\n\u251c\u2500\u2500 key.pem\n</code></pre>"},{"location":"installation-rework/advanced/custom_certificates/#configure-seatable-container-to-use-these-custom-certificates","title":"Configure SeaTable Container to use these custom certificates","text":"<p>The next step is quite easy. The used caddy container from lucaslorentz supports dynamic configuration with labels. Use custom-...</p> <pre><code># configuration of custom-seatable-server.yml\nservices:\n  seatable-server:\n    ...\n    labels:\n      caddy: ${SEATABLE_SERVER_HOSTNAME}\n      caddy.tls: \"/data/caddy/cert.pem /data/caddy/key.pem\" # &lt;-- labels to use custom certificates\n</code></pre>"},{"location":"installation-rework/advanced/custom_proxy/","title":"Replace caddy with another proxy","text":"<p>The Single-Node Installation describes an installation of a SeaTable server with the webserver caddy. We dediced to use Caddy because it simplifies the handling of let's encrypt certificates. If you create a DNS entry and point it to your server, caddy will do everything else for you. Also we configured caddy with state of the art security configurations.</p>"},{"location":"installation-rework/advanced/custom_proxy/#custom-proxy-with-seatable-server","title":"Custom proxy with SeaTable Server","text":"<p>But of cause there might be reasons when you want to replace caddy with another proxy like ha-proxy, traffik, nginx, apache etc. The logic of replacing might be simple.</p> <p>You can use any proxy as long as your forward all traffic to the SeaTable Server. Part of the SeaTable Server container is a nginx web proxy, which routes the traffic by URL. This port 80 is not exposed therefore your proxy has to be in the same docker network like SeaTable Server.</p> <p></p>"},{"location":"installation-rework/advanced/custom_proxy/#how-to-configure","title":"How to configure","text":"<p>Remove <code>caddy.yml</code> from COMPOSE_FILE from .env file. Restart all docker containers. Forward all traffic to the SeaTable Container via port 80.</p> <p>SeaTable does not expose any ports</p> <p>Please be aware that SeaTable does not expose port 80 to the outside. Therefore your proxy has to be in the same docker network. Otherwise you have to export port 80 of SeaTable Server.</p>"},{"location":"installation-rework/advanced/custom_proxy/#custom-proxy-with-additional-components","title":"Custom proxy with additional components","text":"<p>For the additional components you can choose between two different options. You can access the services either via separate port or (sub)domain.</p>"},{"location":"installation-rework/advanced/custom_proxy/#option-1-use-ports-to-access-the-services","title":"Option 1: use ports to access the services","text":"<p>The additional components run on separate ports. n8n uses the port 6231. If you only have one public domain available, you can forward the required port to the internal network and access the service. This does not require any further configuration.</p> <p></p>"},{"location":"installation-rework/advanced/custom_proxy/#option-2-other-domains-to-access-the-services","title":"Option 2: other domains to access the services","text":"<p>In this case, you use another (sub)domain to access the service. You create a proxy rule to route the traffic to the service with its internal port. Usually this requires that you also change the configuration of the service to be accessable via this additonal domain.</p> <p></p>"},{"location":"installation-rework/advanced/database_standalone/","title":"Standalone Database","text":"<p>Managed Database is a often used managed service. SeaTable can easily be configured to use a separate database. We recommend to initialize SeaTable with the default mariadb container. Then dump the database, load the dump to a separate database, update all config files and restart SeaTable. Due to this assumption, this manual is the same for an new SeaTable Server or a service where you want to migrate the database.</p>"},{"location":"installation-rework/advanced/database_standalone/#stop-database-container-and-seatable","title":"Stop Database container and SeaTable","text":"<pre><code>docker stop mariadb\ndocker exec -it seatable-server seatable.sh stop\n</code></pre>"},{"location":"installation-rework/advanced/database_standalone/#dump-and-restore-to-another-database","title":"Dump and restore to another database","text":"<pre><code>...\n</code></pre>"},{"location":"installation-rework/advanced/database_standalone/#dont-start-mariadb-container","title":"Don't start mariadb container","text":"<p>Create a copy of seatable-server.yml and rename it custom-seatable-server.yml. Remove all ...</p> <pre><code>services:\n  seatable-server:\n    depends_on:\n      mariadb:                        # &lt; remove\n        condition: service_healthy    # &lt; remove\n\n  mariadb:                            # remove complete service\n    ...                               # with all lines\n</code></pre>"},{"location":"installation-rework/advanced/database_standalone/#update-all-config-files","title":"Update all config files","text":"<p>These configuration files have to be changed:</p> <ul> <li>ccnet.cont</li> <li>dtable-db.conf</li> <li>dtable-events.conf</li> <li>dtable_server_config.js</li> <li>dtable_web_settings.py</li> <li>seafile.conf</li> </ul> <p>Variable names are different</p> <p>Variable names differ in SeaTable config files. In seafile.conf the variable is <code>host</code>, in dtable_web_settings.py it is <code>HOST</code>. Don't mix things up.</p>"},{"location":"installation-rework/advanced/database_standalone/#restart-seatable","title":"Restart SeaTable","text":"<p>After that you can restart SeaTable service.</p> <pre><code>docker exec -it seatable-server seatable.sh restart\n</code></pre>"},{"location":"installation-rework/advanced/database_standalone/#troubleshooting","title":"Troubleshooting","text":"<p>Check the logs and look for any connection errors.</p> <pre><code>tail -f /opt/seatable-server/seatable/logs/*.log\n</code></pre>"},{"location":"installation-rework/advanced/database_standalone/#remove-old-database","title":"Remove old database","text":"<p>if everything is running good, you can delete the local database folder /opt/mariadb.</p> <pre><code>rm -r /opt/mariadb\n</code></pre>"},{"location":"installation-rework/advanced/http_only/","title":"Force http only for your SeaTable Server","text":""},{"location":"installation-rework/advanced/http_only/#force-http-during-installation","title":"Force http during installation","text":"<p>It is not recommended to run SeaTable without https. Still it is possible. During the installation it is sufficient to set the .env variable <code>SEATABLE_SERVER_PROTOCOL</code> with the value <code>http</code> and all configuration files and caddy will be set up correctly.</p>"},{"location":"installation-rework/advanced/http_only/#switching-after-the-installation","title":"Switching after the installation","text":"<p>If you want to force http after the initial setup, you also have to adapt these configuraton files and replace all https:// values with http://:</p> <ul> <li>dtable_web_settings.py</li> <li>ccnet.conf</li> <li>nginx.conf</li> </ul> <p>Especially the change of the nginx file is not trivial, if you don't have any experience with nginx.</p>"},{"location":"installation-rework/advanced/python_pipeline_configuration/","title":"Configure Python Pipeline","text":""},{"location":"installation-rework/advanced/python_pipeline_configuration/#configuration","title":"Configuration","text":"<p>The Python Pipeline provides multiple environment variables for further customization. The available parameters are:</p> <pre><code>...\n</code></pre>"},{"location":"installation-rework/advanced/python_pipeline_custom_python_runner/","title":"Create your own SeaTable Python Runner","text":"<p>The SeaTable Python Pipeline comes with a ready-to-use python-runner which contains quite some third-party python libraries to execute your python scripts. Please refer to the Developer Manual to get a list of the included python libraries.</p> <p>If you need some other python packages you can either contact support and ask us to include this python library in the future or you have to a build your own image or extend the existing.</p>"},{"location":"installation-rework/advanced/python_pipeline_custom_python_runner/#build-your-own-custom-python-runner","title":"Build your own custom python runner","text":"<p>Can be done on your computer. Get from Github.</p> <p>Extend the file <code>runner/requirements.txt</code></p> <p>Build and publish the image at docker hub.</p> <p>Replace the image in your .env file. SEATABLE_PYTHON_RUNNER_IMAGE = ...</p>"},{"location":"installation-rework/advanced/python_pipeline_custom_python_runner/#extend-the-existing-python-runner","title":"Extend the existing python runner","text":"<p>Has to be done on the seatable server. Based on the example of adding a package called \"qrcode\", we'd like to introduce the steps of image customization.</p> <p>Pull the image</p> <pre><code>$ docker pull seatable/seatable-python-runner:latest\n</code></pre> <p>Activate a container and name it \"add-libs\" from backend.</p> <pre><code>$ docker run -d --name=\"add-libs\" seatable/seatable-python-runner custom\n</code></pre> <p>Enter into the container</p> <pre><code>$ docker exec -it add-libs sh\n</code></pre> <p>Install the third-party package or do some other modification, quit the container after you finished.</p> <pre><code>/settings # pip install qrcodes\n</code></pre> <p>Commit the new image</p> <pre><code>$ docker commit -m \"add qrcode\" --change \"CMD null\" add-libs seatable/seatable-python-runner:qrcode\n</code></pre> <p>Apply the new image</p> <p>Please set the new image info in the config file of run-python service. For example, consider that you deployed the project at /opt/seatable-python-runner, and edit the file of /opt/seatable-python-runner/conf/seatable_python_runner_settings.py as bellow:</p> <pre><code>IMAGE = 'seatable/seatable-python-runner:qrcode'\n</code></pre> <p>Restart the SeaTable Python Runner to activate runner, on the other hand, stop and remove the temporary container.</p> <pre><code>$ docker stop add-libs &amp;&amp; docker container rm add-libs\n</code></pre>"},{"location":"installation-rework/advanced/python_pipeline_dedicated_server/","title":"Python Pipeline on a separate server","text":"<p>If your user base on your Seatable Server is growing, one of the first components that you could move to a separate server is the python pipeline. This free up ressoures for the main server and it slightly increases the security because customer python code is not executed on the main server.</p>"},{"location":"installation-rework/advanced/python_pipeline_dedicated_server/#requirements","title":"Requirements","text":"<p>To install Python Pipeline on a separate server, use at least these ressources:</p> <ul> <li>2 CPU</li> <li>4 GB RAM</li> <li>40 GB SSD</li> </ul> <p>Use a separate domain or subdomain that is public available or you need a valid wildcard certificate. Caddy will generate a let's encrypt certificate.</p> <p>No self signed certificates</p> <p>Self signed certificates are not recommended. Read the article about custom certificates for more details.</p>"},{"location":"installation-rework/advanced/python_pipeline_dedicated_server/#deployment-of-the-python-pipeline","title":"Deployment of the Python Pipeline","text":"<p>Deployment is simple.</p> <p>Get seatable-release from github, only use python-pipeline.yml and caddy.yml. (not seatable-server.yml)</p> <p>Update .env and use docker compose up -d.</p>"},{"location":"installation-rework/advanced/python_pipeline_dedicated_server/#configuration-of-seatable-server","title":"Configuration of SeaTable Server","text":"<p>SeaTable must know where to get the Python Pipeline.</p> <p>Update <code>dtable_web_settings.py</code> and add the public available URL.</p>"},{"location":"installation-rework/advanced/python_pipeline_workflow/","title":"Workflow of the Python Pipeline in a nutshell","text":"<p>This is a short explanation what happens, if you click on \"Run script\" inside SeaTable.</p>"},{"location":"installation-rework/advanced/python_pipeline_workflow/#seatable-server","title":"SeaTable Server","text":"<p>To initialize the Python Pipeline, SeaTable-Server makes a request to the API-endpoint /run-script/ of the scheduler. This call is authenticated by the shared secret, defined in dtable_web_settings.py. Ever two seconds (and for max. 15 minutes), the SeaTable Server checks the status of the script execution by calling <code>/script-result/</code> from the scheduler.</p>"},{"location":"installation-rework/advanced/python_pipeline_workflow/#seatable-scheduler","title":"SeaTable Scheduler","text":"<p>The scheduler creates a new task in the mariadb database. The scheduler calls the API-endpoint <code>/function/run-python</code> of the starter. Now the scheduler waits for the run to finish and write the duration and the output to the database.</p>"},{"location":"installation-rework/advanced/python_pipeline_workflow/#seatable-starter","title":"SeaTable Starter","text":"<p>The starter downloads the python script directly from SeaTable Server and saves the script to a temporary folder on the hard drive of the host. The starter now starts a python-runner container and mounts the script as input. After completion the runner container is deleted.</p>"},{"location":"installation-rework/advanced/python_pipeline_workflow/#seatable-runner","title":"SeaTable Runner","text":"<p>SeaTable runner executes the python script and writes the output to the same temporary folder on the host. After that the container stops.</p>"},{"location":"installation-rework/advanced/python_pipeline_workflow/#important-points","title":"Important points","text":"<ul> <li>dtable-web only queries the result as long as the browser is open (manual execution).</li> <li>if an automation starts a python script, SeaTable Server waits max. 15 minutes for the run to finish.</li> <li>starter and runner communicate via the exchange directory. this must be available as a volume to both containers</li> <li>starter and scheduler communicate via api calls and database.</li> <li>the python runner is stopped after 15 minutes at the latest</li> <li>the scheduler has a cleanup process to invalidate work orders in the database that run for longer than 15 minutes.</li> <li>the task is stored in the database for some days (30 days by default)</li> </ul>"},{"location":"installation-rework/components/collabora/","title":"Collabora Online","text":"<p>4.3 Enterprise Edition</p> <p>Collabora Online offers real-time collaboration with office documents in your browser. As soon as you open a file from SeaTable, Collabora opens in a new browser tab and allows real time collaboration. As soon as the last user exits the document by closing his browser window, the document is saved back to the SeaTable base.</p> <p>This article is about the how to install the CODE version of collabora online.</p> <p>You have to decide: Collabora OR OnlyOffice</p> <p>Collabora and OnlyOffice are both office editors. You have to decide which one you would like to use. You can not use both in parallel.</p> <p>Use a separate host, if you expect many users</p> <p>Collabora Online (CODE) can be installed on the same host as SeaTable Enterprise Edition. If Collabora Online is used regularly and by many users, the host should be fitted with sufficient cores and RAM.</p> <p>This manual assumes that SeaTable Enterprise Edition is installed and is running.</p>"},{"location":"installation-rework/components/collabora/#installation","title":"Installation","text":"<p>Add <code>collabora.yml</code> to the COMPOSE_FILE variable in your <code>.env</code> file.</p> <pre><code>nano /opt/seatable-compose/.env\n</code></pre> <p>Your COMPOSE_FILE variable should look something like this:</p> <pre><code>COMPOSE_FILE='caddy.yml,seatable-server.yml,collabora.yml'\n</code></pre> <p>Start the installation by adding ``collabora.yml to .env file.</p> <p>dtable_web_settings.py muss folgendes enthalten. SEATABLE_SERVER_HOSTNAME muss nicht erg\u00e4nzt werden, der wert wird aus der .env ausgelesen.</p> <pre><code>source /opt/seatable-compose/.env\necho -e \"\\n# collabora online\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\necho \"ENABLE_COLLABORA = True\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\necho \"COLLABORA_DISCOVERY_URL = 'https://${SEATABLE_SERVER_HOSTNAME}:6232/hosting/discovery'\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\n</code></pre> <p>so war es alt.</p> <pre><code>ENABLE_COLLABORA = True\nCOLLABORA_DISCOVERY_URL = 'https://&lt;your-seatable-url&gt;:6232/hosting/discovery'\n</code></pre>"},{"location":"installation-rework/components/collabora/#installation-per-docker","title":"installation per docker","text":"<pre><code>docker compose down\ndocker compose up -d\n</code></pre> <p>SeaTable must be restarted too, therefore all containers are shut down and restarted.</p>"},{"location":"installation-rework/components/collabora/#check-if-installation-is-complete","title":"Check if installation is complete","text":"<p>Open <code>https://&lt;your-seatable-url&gt;:6232</code> and you should see simple an OK.</p>"},{"location":"installation-rework/components/collabora/#separate-installation","title":"Separate Installation","text":"<p>(not yet ready...)</p> <ul> <li>Security Headers in Caddy</li> <li>Allowed Hosts in Collabora</li> </ul>"},{"location":"installation-rework/components/grafana-prometheus/","title":"Grafana prometheus","text":"<p>placeholder</p>"},{"location":"installation-rework/components/n8n/","title":"Installation of the automation platform n8n","text":"<p>The installation of an automation plattform like n8n increases the power. Connect to other software solutions, gather logs or data from other tools.</p>"},{"location":"installation-rework/components/n8n/#installation","title":"Installation","text":"<p>This guide shows how to install n8n on your SeaTable server.</p>"},{"location":"installation-rework/components/n8n/#1-change-the-env-file","title":"1. Change the .env file","text":"<p>Like with all additional components you first have to add the <code>n8n.yml</code> to the <code>COMPOSE_FILE</code> variable in your <code>.env</code> file. First open the config file.</p> <pre><code>nano /opt/seatable-compose/.env\n</code></pre> <p>Now add n8n.yml to the <code>COMPOSE_FILE</code> variable. Don't remove anything and don't use !</p> <pre><code>COMPOSE_FILE='caddy.yml,seatable-server.yml,n8n.yml'\n</code></pre>"},{"location":"installation-rework/components/n8n/#2-generate-secrets-for-your-postgres-database","title":"2. Generate secrets for your postgres database","text":"<p>Generate inital secrets and write them into your .env file.</p> <pre><code>echo -e \"\\n# n8n\" &gt;&gt; /opt/seatable-compose/.env\necho \"POSTGRES_PASSWORD=$(pwgen -s 40 1)\" &gt;&gt; /opt/seatable-compose/.env\necho \"POSTGRES_NON_ROOT_PASSWORD=$(pwgen -s 40 1)\" &gt;&gt; /opt/seatable-compose/.env\n</code></pre>"},{"location":"installation-rework/components/n8n/#3-start-n8n","title":"3. Start n8n","text":"<pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose up -d\n</code></pre>"},{"location":"installation-rework/components/n8n/#4-create-initial-admin-user","title":"4. Create initial admin user","text":"<p>Your n8n Container provides a Web UI to set up your n8n Admin User under <code>https://&lt;your-seatable-server-hostname&gt;:6231</code>.</p> <p></p> <p>Congratulations! Your n8n server is ready to use.</p> <p>SeaTable n8n node is outdated</p> <p>n8n is shipped with an outdated SeaTable node. Therefore you should install the current version of the SeaTable node as a community node. Read more \u2192</p>"},{"location":"installation-rework/components/n8n/#next-steps","title":"Next steps","text":"<p>Check the docs of n8n at https://docs.n8n.io/. More details will follow soon.</p>"},{"location":"installation-rework/components/onlyoffice/","title":"Deploy ONLYOFFICE Documentserver","text":"<p>3.0 Enterprise Edition</p> <p>OnlyOffice offers real-time collaboration with office documents in your browser. As soon as you open a file from SeaTable, OnlyOffice opens in a new browser tab and allows real time collaboration. As soon as the last user exits the document by closing his browser window, the document is saved back to the SeaTable base. Access takes place via the public URL via HTTPS. So that OnlyOffice cannot be used by other systems, a shared secret in the form of a JWT key is used.</p> <p>You have to decide: Collabora OR OnlyOffice</p> <p>Collabora and OnlyOffice are both office editors. You have to decide which one you would like to use. You can not use both in parallel.</p> <p>Use a separate host, if you expect many users</p> <p>OnlyOffice can be installed on the same host as SeaTable Enterprise Edition. If OnlyOffice is used regularly and by many users, the host should be fitted with sufficient cores and RAM.</p> <p>This manual assumes that SeaTable Enterprise Edition is installed and is running.</p>"},{"location":"installation-rework/components/onlyoffice/#installation","title":"Installation","text":""},{"location":"installation-rework/components/onlyoffice/#1-change-the-env-file","title":"1. Change the .env file","text":"<p>Add <code>onlyoffice.yml</code> to the COMPOSE_FILE variable.</p> <pre><code>nano /opt/seatable-compose/.env\n</code></pre> <p>Your COMPOSE_FILE variable should look something like this:</p> <pre><code>COMPOSE_FILE='caddy.yml,seatable-server.yml,onlyoffice.yml'\n</code></pre>"},{"location":"installation-rework/components/onlyoffice/#2-generate-inital-secret","title":"2. Generate inital secret","text":"<p>Generate inital secrets and write them into your .env file.</p> <pre><code>echo -e \"\\n# OnlyOffice\" &gt;&gt; /opt/seatable-compose/.env\necho \"ONLYOFFICE_JWT_SECRET=$(pwgen -s 40 1)\" &gt;&gt; /opt/seatable-compose/.env\n</code></pre>"},{"location":"installation-rework/components/onlyoffice/#3-modify-dtable_web_setingspy","title":"3. Modify dtable_web_setings.py","text":"<p>Open <code>/opt/seatable-server/seatable/conf/dtable_web_settings.py</code> with your favorite editor and add the following code block at the end of the file.</p> <pre><code>source /opt/seatable-compose/.env\necho -e \"\\n# onlyoffice\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\necho \"ENABLE_ONLYOFFICE = True\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\necho \"ONLYOFFICE_APIJS_URL = 'https://${SEATABLE_SERVER_HOSTNAME}:6233/web-apps/apps/api/documents/api.js'\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\necho \"ONLYOFFICE_FILE_EXTENSION = ('doc', 'docx', 'ppt', 'pptx', 'xls', 'xlsx', 'odt', 'fodt', 'odp', 'fodp', 'ods', 'fods', 'csv', 'ppsx', 'pps')\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\necho \"ONLYOFFICE_JWT_SECRET = '${ONLYOFFICE_JWT_SECRET}'\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\n</code></pre> <p>Change <code>SEATABLE_SERVER_HOSTNAME</code> to reflect the hostname of your SeaTable server. Additionally, copy the generated value for <code>ONLYOFFICE_JWT_SECRET</code> from your .env file and paste it in the dtable_web_settings.py.</p>"},{"location":"installation-rework/components/onlyoffice/#4-download-onlyoffice-and-restart","title":"4. Download onlyoffice and restart","text":"<p>OnlyOffice is now configured and office documents can be directly edited from within SeaTable after a restart of the SeaTable service.</p> <pre><code>cd /opt/seatable-compose\ndocker compose down\ndocker compose up -d\n</code></pre> <p>OnlyOffice takes some some minutes for the initial start. If you get an error message when clicking an office file in SeaTable, be patient. With <code>docker compose logs onlyoffice -f</code>, you can monitor the startup progress.</p> <p>Try to open <code>https://SEATABLE_SERVER_HOSTNAME:6233/welcome</code>. You should see a welcome page like this.</p> <p></p> <p>Try to open an docx-file from a SeaTable base.</p> <p>Onlyoffice is ready, if a new browser window opens with your office document. Any user with access to this base can now open this document with OnlyOffice.</p>"},{"location":"installation-rework/components/onlyoffice/#advanced-custom-settings","title":"Advanced: Custom settings","text":"<p>This is only for onlyoffice experts. You can create and mount a custom configuration file called <code>local-production-linux.json</code> to force some settings.</p> <p>Create a configuration file in the newly created directory:</p> <pre><code>cd /opt/onlyoffice\nnano local-production-linux.json\n</code></pre> <p>Copy the following code block in this file:</p> <pre><code>{\n  \"services\": {\n    \"CoAuthoring\": {\n      \"autoAssembly\": {\n        \"enable\": true,\n        \"interval\": \"5m\"\n      }\n    }\n  },\n  \"FileConverter\": {\n    \"converter\": {\n      \"downloadAttemptMaxCount\": 3\n    }\n  }\n}\n</code></pre> <p>Mount this config file into your onlyoffice block in your <code>docker-compose.yml</code>.</p> <pre><code>  volumes:\n      - /opt/onlyoffice/logs:/var/log/onlyoffice\n      - /opt/onlyoffice/data:/var/www/onlyoffice/Data\n      - /opt/onlyoffice/lib:/var/lib/onlyoffice\n      - /opt/oods/DocumentServer/local-production-linux.json:/etc/onlyoffice/documentserver/local-production-linux.json\n</code></pre> <p>Restart OnlyOffice to load the new configuration.</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"installation-rework/components/python-pipeline/","title":"Python Pipeline","text":"<p>To run Python scripts within SeaTable, you need to install the Python Pipeline \u2014 an environment utilizing Docker containers for script execution and result retrieval. Thanks to the SeaTable Python API you can seamlessly interact with the data in the base.</p> <p>Explore various use cases from other SeaTable users:</p> <ul> <li>Retrieve current stock prices and store them in SeaTable.</li> <li>Validate DNS settings of specified domains for specific TXT entries.</li> <li>Capture submissions from form.io and store the results.</li> <li>Identify duplicate entries and apply specific tags.</li> </ul> <p>Find additional Python functions and code examples in the Developer Manual.</p> <p></p>"},{"location":"installation-rework/components/python-pipeline/#installation","title":"Installation","text":"<p>This article explains how to add the Python Pipeline on your SeaTable server.</p>"},{"location":"installation-rework/components/python-pipeline/#change-the-env-file","title":"Change the .env file","text":"<p>To install the Python Pipeline, include <code>python-pipeline.yml</code> in the <code>COMPOSE_FILE</code> variable within your <code>.env</code> file. This instructs Docker to download the required images for the Python Pipeline.</p> <p>Simply copy and paste () the following code into your command line:</p> <pre><code>sed -i \"s/COMPOSE_FILE='\\(.*\\)'/COMPOSE_FILE='\\1,python-pipeline.yml'/\" /opt/seatable-compose/.env\n</code></pre> <p>Avoid space in <code>COMPOSE_FILE</code></p> <p>When manually adding <code>python-pipeline.yml</code> to the <code>COMPOSE_FILE</code> variable using your preferred editor, ensure that you avoid any space (). After making this modification, your <code>COMPOSE_FILE</code> variable should look like this:</p> <pre><code>COMPOSE_FILE='caddy.yml,seatable-server.yml,python-pipeline.yml'\n</code></pre>"},{"location":"installation-rework/components/python-pipeline/#generate-a-shared-secret-for-secure-communication","title":"Generate a shared secret for secure communication","text":"<p>For secure communication between SeaTable and the Python Pipeline, a shared secret is required to prevent unauthorized access or usage. We recommend utilizing <code>pwgen</code> to generate a robust and secure password. Copy and paste the following command into your command line to generate a password:</p> <pre><code>pw=$(pwgen -s 40 1) &amp;&amp; echo \"Generated shared secret: ${pw}\"\n</code></pre>"},{"location":"installation-rework/components/python-pipeline/#update-the-configuration","title":"Update the configuration","text":"<p>The generated shared secret needs to be added to both your <code>.env</code> file and the configuration files of your SeaTable Server.</p> <p>Copy and paste the following commands to include the shared secret in the <code>.env</code> file:</p> <pre><code>echo -e \"\\n# python-pipeline\" &gt;&gt; /opt/seatable-compose/.env\necho \"PYTHON_SCHEDULER_AUTH_TOKEN=${pw}\" &gt;&gt; /opt/seatable-compose/.env\n</code></pre> <p>Now execute this command to add the required configuration to <code>dtable_web_settings.py</code>:</p> <pre><code>echo -e \"\\n# python-pipeline\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\necho \"SEATABLE_FAAS_URL = 'http://python-scheduler'\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\necho \"SEATABLE_FAAS_AUTH_TOKEN = '${pw}'\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\n</code></pre>"},{"location":"installation-rework/components/python-pipeline/#start-the-python-pipeline","title":"Start the Python Pipeline","text":"<p>Now it is time to start the Python Pipeline.</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose up -d &amp;&amp; \\\ndocker exec -d seatable-server /shared/seatable/scripts/seatable.sh restart\n</code></pre>"},{"location":"installation-rework/components/python-pipeline/#check-if-the-python-pipeline-is-running","title":"Check if the Python Pipeline is running","text":"<p>Do you want to execute your first python script in SeaTable? Nothing easier than that.</p> <ul> <li>Login to your SeaTable Server with your Browser.</li> <li>Create a new base and access it.</li> <li>Add a python script with the content <code>print(\"Hello World\")</code> and execute it. If you don't know how to do this, check out our user manual.</li> </ul> <p>If everything went right, you should see the output <code>Hello World</code>.</p> <p></p> <p> Great! Your SeaTable can execute Python scripts now.</p>"},{"location":"installation-rework/components/seafile/","title":"Integrate with Seafile","text":"<p>4.0 Enterprise Edition</p> <p>When integrating SeaTable and Seafile, users can add files from Seafile libraries in file columns and users can transfer files from SeaTable to Seafile.</p>"},{"location":"installation-rework/components/seafile/#scope-of-the-connection","title":"Scope of the Connection","text":"<p>The Seafile connection to SeaTable enables you to</p> <ul> <li>Choose a file as attachment from the Seafile library in SeaTable</li> <li>Save attachments in a SeaTable base to your Seafile library</li> </ul>"},{"location":"installation-rework/components/seafile/#how-to-setup-the-connection-on-seatable-server-side","title":"How to Setup the Connection on SeaTable Server Side","text":"<ul> <li>Go to Seafile and generate an API token for your library</li> <li>Go to SeaTable and click on the 3-dots menu of a base, go to Advanced &gt; Connect Seafile and enter the full URL (including \u201chttp\u201d or \u201chttps\u201d) and the API token and then submit.</li> </ul>"},{"location":"installation-rework/components/seafile/#requirements-on-the-seafile-server-side","title":"Requirements on the Seafile Server Side","text":"<p>The cross-domain permissions must be set. This can be done by adding the \"Access-Control-Allow-Origin\" header.</p> <p>Add the following code block to the configuration file <code>seafile.conf</code> in <code>/etc/nginx/sites-available/</code>:</p> <pre><code>    location / {\n        add_header Access-Control-Allow-Origin *;\n        if ($request_method = 'OPTIONS') {\n            add_header Access-Control-Allow-Origin *;\n            add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;\n            add_header Access-Control-Allow-Headers \"deviceType,token, authorization, content-type\";\n            return 204;\n        }\n\ufeff\n        proxy_pass         http://127.0.0.1:8000;\n        ...............\n</code></pre>"},{"location":"installation-rework/components/uptime-kuma/","title":"Uptime Kuma","text":"<p>This guide shows how to activate Uptime Kuma on a one node seatable server.</p>"},{"location":"installation-rework/components/uptime-kuma/#installation","title":"Installation","text":""},{"location":"installation-rework/components/uptime-kuma/#change-the-env-file","title":"Change the .env file","text":"<p>Add uptime-kuma.yml to the COMPOSE_FILE variable.</p> <pre><code>nano /opt/seatable-compose/.env\n</code></pre> <p>Your COMPOSE_FILE variable should look something like this:</p> <pre><code>COMPOSE_FILE='seatable-docker-proxy.yml,seatable-server.yml,uptime-kuma.yml'\n</code></pre>"},{"location":"installation-rework/components/uptime-kuma/#update-the-compose-project","title":"Update the compose project","text":"<pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose up -d\n</code></pre>"},{"location":"installation-rework/components/uptime-kuma/#configure-your-uptime-kuma","title":"Configure your Uptime Kuma","text":"<p>Your Uptime Kuma Container provides a Web UI to set up your Uptime Kuma Admin User under <code>https://&lt;your-seatable-server-hostname&gt;:6230</code>.</p>"},{"location":"installation-rework/components/uptime-kuma/#things-to-monitor-of-your-seatable-server","title":"Things to monitor of your seatable server","text":"<p>Paths:</p> <ul> <li>https://deploy.seatable-demo.de/api2/ping/</li> <li>https://deploy.seatable-demo.de/dtable-server/ping/</li> <li>...</li> <li>https://deploy.seatable-demo.de:6231/healthz (n8n)</li> <li>https://deploy.seatable-demo.de:6232/ (collabora online)</li> <li>https://deploy.seatable-demo.de:6233/welcome/ (onlyoffice)</li> <li>...</li> </ul>"},{"location":"installation-rework/components/uptime-kuma/#screenshots","title":"Screenshots","text":"<p>will be added shortly.</p>"},{"location":"installation-rework/components/zabbix/","title":"Zabbix Monitoring","text":"<p>Idee: Zabbix Agent und Server auf dem gleichen Server.</p>"},{"location":"installation-rework/components/zabbix/#aufruf-der-weboberflache","title":"Aufruf der Weboberfl\u00e4che:","text":"<ul> <li>Im Browser: <code>https://&lt;your-seatable-server-node&gt;:6235</code></li> </ul> <p>Initial Login with: Admin/zabbix</p>"},{"location":"installation-rework/components/zabbix/#after-login","title":"After login:","text":"<p>Go to <code>Monitoring &gt; Hosts</code>. Change Host Configuration of Zabbix server :</p> <p>From: IP 127.0.0.1 To: DNS zabbix-agent</p> <p>After some seconds the monitoring runs.</p>"},{"location":"limitations/system_limitations/","title":"System limitations","text":""},{"location":"limitations/system_limitations/#general-limitations","title":"General limitations","text":"Category Limitation Type Threshold Additional notes Base Rows 100,000 The base becomes read-only when exceeding 100,000 rows. Rows 2 150,000 The base will not be loaded to the memory if exceeding 150,000 rows. Archived rows no limit Tables 200 Base external links 100 View external links 100 External apps 100 Forms 100 Table Columns 500 External links viewing Viewing rate of a base's external link 300/min maximum Import / export operations Size of a base being exported as a .dtable file 100MB This limit can be set by yourself for the Developer / Enterprise Edition. Set \"DTABLE_EXPORT_MAX_SIZE\" in dtable_web_settings.py. A base's attachments can be viewed and deleted in batch in the base's Attachments Management. Import of a xlsx/csv file 50,000 records maximum Export of a table 10,000 records or 1,000,000 cells Export of a view in table 1,000,000 cells Big data Import / export operations Import from xlsx to big data storage 500,000 records Can be modified it in the configuration file of dtable_web_settings.py. Update from xlsx to big data storage 500,000 records Can be modified it in the configuration file of dtable_web_settings.py. Export big data view to Excel 250,000 records Can be modified it in the configuration file of dtable_web_settings.py. Groups Group members 500 Group bases 500 Common dataset (CDS) Syncs of CDS Sync up to the first 50,000 records Scripts Notification rules Automation rules Records meet specific conditions after modification For batch modification, check the first 50 records. A rule can be triggered up to 10 times per minute. Add record For batch addition, check the first 50 records. A rule can be triggered up to 10 times per minute. Run periodically on records meet conditions Lock a maximum of 200 rows and send a maximum of 50 emails in one trigger"},{"location":"limitations/system_limitations/#api-limitations","title":"API limitations","text":"Category Limitation Type Threshold Additional notes API calls Max. number of rows appending in a single call 1,000 Max. number of rows modification in a single call 1,000 Max. numbers of rows deletion in a single call 10,000 Max. numbers of rows listed in a single call 10,000 Use the <code>start</code> and <code>limit</code> params to list further rows. API calling rate API calling for a single base 300/min for the cloud edition. 5000/day. This limit can be set by yourself for the Developer Edition. You should use batch APIs to reduce API calls. API calling for getting rows of a table 100/min for a single table, 600/hour maximum We strongly suggest that you use SQL if the API calling is frequent or add some cache in your code. SQL calling for a single base 5000/day"},{"location":"maintain/","title":"Upgrade and Maintenance","text":""},{"location":"maintain/account/","title":"Account Management","text":""},{"location":"maintain/account/#user-management","title":"User Management","text":"<p>When you setup SeaTable, you should have setup a admin account. After you logged in a admin, you may add/delete users.</p>"},{"location":"maintain/account/#resetting-user-password","title":"Resetting User Password","text":"<p>Administrator can reset password for a user in \"System Admin\" page.</p> <p>In a private server, the default settings doesn't support users to reset their password by email. If you want to enable this, you have first to set up notification email.</p>"},{"location":"maintain/account/#forgot-admin-account-or-password","title":"Forgot Admin Account or Password?","text":"<p>You may create a new admin account by running <code>seatable.sh superuser</code> script under the scripts directory. After logging in the new admin account, you can reset the original admin account's password.</p>"},{"location":"maintain/backup_recovery/","title":"Backup And Recovery","text":""},{"location":"maintain/backup_recovery/#overview","title":"Overview","text":"<p>There are generally three parts of data to backup</p> <ul> <li>SeaTable tables data</li> <li>Databases</li> <li>Configuration files with private keys</li> </ul> <p>If you setup SeaTable server according to our manual, you should have a directory layout like:</p> <pre><code>/opt/seatable/seatable-data/seatable\n\u251c\u2500\u2500 ccnet\n\u251c\u2500\u2500 conf\n\u251c\u2500\u2500 db-data\n\u251c\u2500\u2500 logs\n\u251c\u2500\u2500 pids\n\u251c\u2500\u2500 scripts\n\u251c\u2500\u2500 seafile-data\n\u251c\u2500\u2500 seafile-license.txt\n\u251c\u2500\u2500 seahub-data\n\u2514\u2500\u2500 storage-data\n</code></pre> <p>All your data is stored under the <code>/opt/seatable/seatable-data/seatable</code> directory. Below are important sub-directories that contain user data:</p> <ul> <li>seafile-data: contains uploaded files for file and image columns</li> <li>seahub-data: contains data used by web front-end, such as avatars</li> <li>db-data: contains archived rows in bases</li> <li>storage-data: contains backups for the bases in dtable-db (added in Enterprise Edition 3.0.0); Since version 3.0.0, tables and snapshots are also stored in this directory.</li> </ul> <p>SeaTable also stores some important metadata data in a few databases.</p> <p>MySQL databases:</p> <ul> <li>ccnet_db: contains user and group information</li> <li>seafile_db: contains library metadata</li> <li>dtable_db: contains tables used by the web front end</li> </ul> Database structure <p>SeaTable stores the following data types in the SQL database in the <code>seatable-mysql</code> Docker container:</p> <ul> <li>user actions and inputs in bases (e.g. new/modified/deleted rows, new/modified/deleted columns, new/modified, deleted views)</li> <li>meta-information for bases (e.g. API-token, common datasets, links, row comments, snapshots, third-party accounts, webhooks)</li> <li>statistical and log information (e.g. automation rules execution, row count)</li> <li>user and group information (e.g. 2FA status, logins, user quota)</li> <li>versioning information for the assets (e.g. files and images) saved in bases</li> </ul>"},{"location":"maintain/backup_recovery/#backup","title":"Backup","text":""},{"location":"maintain/backup_recovery/#steps","title":"Steps","text":"<ol> <li>Backup the MySQL databases;</li> <li>Backup the SeaTable data directory (with your seatable license and config files)</li> </ol> <p>Backup Order: Database First or Data Directory First</p>"},{"location":"maintain/backup_recovery/#backing-up-database","title":"Backing up Database","text":"<pre><code># It's recommended to backup the database to a separate file each time. Don't overwrite older database backups for at least a week.\ncd /opt/seatable-backup/databases\ndocker exec -it seatable-mysql mysqldump -uroot -pMYSQL_ROOT_PASSWORD --opt ccnet_db &gt; ccnet_db.sql\ndocker exec -it seatable-mysql mysqldump -uroot -pMYSQL_ROOT_PASSWORD --opt seafile_db &gt; seafile_db.sql\ndocker exec -it seatable-mysql mysqldump -uroot -pMYSQL_ROOT_PASSWORD --opt dtable_db &gt; dtable_db.sql\n</code></pre> <p>Warning</p> <p>The above commands do not work via cronjob. To create dumps of the database via cronjob, the parameters <code>-it</code> must be omitted.</p>"},{"location":"maintain/backup_recovery/#backing-up-seatable-data","title":"Backing up SeaTable data","text":"<p>You can use rsync to do incremental backup for data directories (assuming /opt/seatable-backup/ already exists)</p> <pre><code>rsync -az --exclude 'ccnet' --exclude 'logs' --exclude 'db-data' /opt/seatable/seatable-data/seatable /opt/seatable-backup/seatable\n</code></pre> <p>You may notice that <code>db-data</code> directory is not backed up. The data in this directory is backed up in a different way. Please refer to the next sub-section.</p>"},{"location":"maintain/backup_recovery/#setup-automatic-backup-for-dtable-db","title":"Setup automatic backup for dtable-db","text":"<p>available since Enterprise Edition 3.0.0</p> <p>Data managed by dtable-db component is archived rows from bases. They should be backed up as well. Data for dtable-db sits in the <code>/opt/seatable/seatable-data/seatable/db-data</code> directory.</p> <p>Unlike other components, dtable-db provides built-in automatic backup mechanism. It will take a snapshot for each base and upload to dtable-storage-server. dtable-db only make new backup for a base if it detects changes to it. This makes the backup more efficient. dtable-storage-server also compresses the backups to make it more storage-efficient.</p> <p>To setup automatic backup for dtable-db:</p> <ol> <li>Setup and run dtable-storage-server. It should be started by default. Find more details in dtable-storage-server documentation.</li> <li>Set <code>[backup]</code> configuration options in dtable-db.conf as in dtable-db documentation</li> </ol> <p>If you configure dtable-storage-server with local file system as backend, dtable-storage-server saves its data to the path specified in dtable-storage-server.conf. By default it's set to <code>/opt/seatable/seatable-data/seatable/storage-data</code>. If you set up your backup as in the last section, you should have already backed up this directory as well. Since storage-data directory has already contained the backups for dtable-db, data in db-data directory doesn't need to backup.</p> <p>If you configure dtable-storage-server with object storage as backend, there will be no data saved to <code>/opt/seatable/seatable-data/seatable/storage-data</code>. So you don't have to backup storage-data directory either.</p> <p>You can also manually execute the command to backup dtable-db data immediately</p> <pre><code>docker exec -it seatable /opt/seatable/scripts/seatable.sh backup-all\n</code></pre>"},{"location":"maintain/backup_recovery/#recovery","title":"Recovery","text":""},{"location":"maintain/backup_recovery/#restore-the-databases","title":"Restore the databases","text":"<pre><code>docker exec -i seatable-mysql /usr/bin/mysql -uroot -pMYSQL_ROOT_PASSWORD ccnet_db &lt; /opt/seatable-backup/databases/ccnet_db.sql\ndocker exec -i seatable-mysql /usr/bin/mysql -uroot -pMYSQL_ROOT_PASSWORD seafile_db &lt; /opt/seatable-backup/databases/seafile_db.sql\ndocker exec -i seatable-mysql /usr/bin/mysql -uroot -pMYSQL_ROOT_PASSWORD dtable_db &lt; /opt/seatable-backup/databases/dtable_db.sql\n</code></pre>"},{"location":"maintain/backup_recovery/#restore-the-seatable-data","title":"Restore the SeaTable data","text":"<pre><code>rsync -az /opt/seatable-backup/seatable /opt/seatable/seatable-data/seatable\n</code></pre>"},{"location":"maintain/backup_recovery/#restore-the-dtable-db-data","title":"Restore the dtable-db data","text":"<pre><code>docker exec -it seatable /opt/seatable/scripts/seatable.sh restore-all\n</code></pre>"},{"location":"maintain/clean_database/","title":"Clean Database","text":""},{"location":"maintain/clean_database/#clean-database-records","title":"Clean Database Records","text":"<p>Since version 1.2, we offer a command to clear records older than the retention period in the seatable database (the default database name is <code>dtable_db</code>).</p> <pre><code>$ docker exec -it seatable /bin/bash\n\n$ seatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py clean_db_records\n</code></pre> <p>The following tables will be cleaned:</p> Database table Table description Retention period activities Aggregated log (based on operation_log) recording row creations, modifications, and deletions &gt; 30 days delete_operation_log High level log (based on operation_log) recording all row deletions &gt; 30 days dtable_notifications User notifications inside the bases &gt; 30 days dtable_snapshots Snapshots of bases that are not store in dtable-storage-server &gt; 365 days notifications_usernotification User notifications on the home page &gt; 30 days operation_log Low level log recording all operations &gt; 14 days session_log Low level log recording all user sessions &gt; 30 days"},{"location":"maintain/clean_database/#database-backup-optional","title":"Database Backup (optional)","text":"<p>Before running <code>clean_db_records</code>, you can make a backup by a shell script. The following tables with many records will be excluded:</p> <ul> <li>operation_log</li> <li>delete_operation_log</li> <li>session_log</li> <li>activities</li> </ul> <p>Example of the <code>database_backup.sh</code> backup shell script\uff1a</p> <pre><code>#!/bin/bash\nset -e\ndb_host='&lt;IP address of database&gt;'\ndb_user='root'\ndb_name='dtable_db'\nbackup_dir='/opt/seatable/db-backups'\n\necho 'Start backing up the database'\n\nmysqldump -h$db_host -u$db_user -p --opt $db_name \\\n  --ignore-table=$db_name.activities \\\n  --ignore-table=$db_name.delete_operation_log \\\n  --ignore-table=$db_name.operation_log \\\n  --ignore-table=$db_name.session_log \\\n  &gt; $backup_dir/seatable.sql.`date +\"%Y-%m-%d\"`\n\necho 'Database backup succeeded'\n</code></pre> <p>Run the shell script:</p> <pre><code>$ ./database_backup.sh\nStart backing up the database\nEnter password: xxxxx\nDatabase backup succeeded\n</code></pre>"},{"location":"maintain/clean_database/#clean-operation_log-records-more-efficiently-optional","title":"Clean operation_log records more efficiently (optional)","text":"<p>When the base is modified, <code>dtable-server</code> automatically saves it to <code>dtable-storage-server</code> every 5 minutes. In order to prevent <code>dtable-server</code> failure before the base is saved to <code>dtable-storage-server</code>, resulting in base data loss, every time base is modified, an operation log will be recorded in the operation_log table.</p> <p>Therefore, for large instance, the operation_log table tends to be very large. Since version 4.1, we offer a more efficient and reliable command to clear the useless data in the operation_log table three days ago. You can add a cron job to run the command every day.</p> <p>This command has two advantages over the above command:</p> <ol> <li>It will make sure all pending operations be applied to the base before clearing the logs.</li> <li>It will clear the logs in small batch, avoiding consume too much database resource in a short time.</li> </ol> <pre><code>$ docker exec seatable /opt/seatable/scripts/seatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py clean_operation_log\n</code></pre>"},{"location":"maintain/debugging/","title":"Advanced debugging by adding error messages","text":"<p>Sometimes SeaTable does not behave like you expect it to behave. Then it is time for some advanced debugging skills. This article debugs a possible problem to give you some knowledge that might help you to solve other problems, too. To follow this explanation you should have at least some development experience.</p>"},{"location":"maintain/debugging/#the-problem-user-not-found","title":"The problem: User not found","text":"<p>Imagine the situation that the \"Share a base with other users\" does not show the users you expected.</p> <p></p> <p>You have no idea why the auto complete function is not working as expected. So let's find out.</p>"},{"location":"maintain/debugging/#check-the-developer-tools-of-your-browser","title":"Check the Developer Tools of your browser","text":"<p>The first check that you can perform is the Browser Console and the networking tab of your developer tools.</p>"},{"location":"maintain/debugging/#the-console-tab","title":"The console tab","text":"<p>In this case there are not errors in the console tab. That means there are not general JavaScript execution errors or bad Api endpoints. If you have problems inside your network like firewalls blocking traffic, unsigned certificates or something like that, you will most likely see an error in the browser console tab. In this case there is no error message.</p>"},{"location":"maintain/debugging/#the-network-tab","title":"The network tab","text":"<p>In the network tab, you can detect what kind of calls are executed, if you search for a user.</p> <p></p> <p>From the results you can see that with every key stroke SeaTable executes a command like:</p> <pre><code>/api2/search-user/?q=demo\n</code></pre> <p>So let's find this source code in the SeaTable Container.</p>"},{"location":"maintain/debugging/#find-the-python-source-code","title":"Find the Python Source Code","text":"<p>Access your SeaTable Server container and let's search for the source code. I start my search in <code>dtable-web/seahub</code>.</p> <pre><code>docker exec -it seatable-server bash\ncd /opt/seatable/seatable-server-latest/dtable-web/seahub\ngrep -R \"search-user\" ./\n\n# the result\n./api2/urls.py:    re_path(r'^search-user/$', SearchUser.as_view(), name='search-user'),\n</code></pre> <p>Now let's get a closer look at this <code>/api2/urls.py</code> at <code>/opt/seatable/seatable-server-latest/dtable-web/seahub/api2/urls.py</code>.</p> <p>There you can find at the beginning of this file, this content:</p> <pre><code>from .endpoints.search_user import SearchUser\n</code></pre> <p>This tells us, that the source code of this search function is in the file <code>/opt/seatable/seatable-server-latest/dtable-web/seahub/api2/endpoints/search_user.py</code>.</p>"},{"location":"maintain/debugging/#add-custom-error-messages","title":"Add custom error messages","text":"<p>In this python file, I can immediately see that there is the <code>class SearchUser(APIView)</code>. In the class I can see that the code checks for some parameters like:</p> <ul> <li>user.permission.can_use_global_address_book</li> <li>CLOUD_MODE</li> <li>is_org_context</li> </ul> <p>Also I can see that SeaTable first generates a list of potential users and then removes out unwanted entries. So why not check if the user we are looking for is in the full list and then removed or if the user is not in there.</p> <p>Let's add this additional logging at line 94. Make sure that you use the right indentation, because otherwise the python code will throw errors.</p> <pre><code>        ## search finished, now filter out some users\n        logger.error(\"This is email_list: %s \" % email_list)\n</code></pre>"},{"location":"maintain/debugging/#check-the-logs","title":"Check the logs","text":"<p>Now let's restart SeaTable and check the dtable_web.log for more details.</p> <pre><code># we are still in the SeaTable Server container.\nseatable.sh restart\ntail -f /opt/seatable/logs/dtable_web.log\n</code></pre>"},{"location":"maintain/logs/","title":"Logs","text":""},{"location":"maintain/logs/#log-files-of-seatable-server","title":"Log files of SeaTable server","text":"<p>The SeaTable logs are under <code>/shared/seatable/logs</code> in the docker, or <code>/Your SeaTable data volume/seatable/logs</code> in the server that run the docker.</p> <p>Main log files:</p> <ul> <li>dtable_web.log: logs for dtable-web</li> <li>dtable-events.log: logs for dtable-events</li> <li>dtable_events_io.log: logs for Base's import or export and Excel or CSV file import or export</li> <li>dtable_events_message.log: logs for sending emails in the dtable-events background</li> <li>dtable-server.log: logs for dtable-server</li> <li>dtable-db.log: logs for dtable-db</li> <li>dtable-db-error.log: error logs for dtable-db</li> <li>dtable-db-access.log: query log for dtable-db</li> <li>dtable-db-slow.log: slow query log for dtable-db</li> </ul> <p>Other log files:</p> <ul> <li>seafile.log: logs of Seafile server</li> <li>slow_logs: Slow request logs, which can be used to debug performance issues</li> <li>monitor.log: Monitor logs, monitor.sh can auto restart the unexpectedly closed server</li> <li>init.log:  Logs for docker initialization script</li> </ul>"},{"location":"maintain/logs/#log-files-of-nginx-server","title":"Log files of Nginx server","text":"<p>The Nginx logs are under <code>/shared/nginx-logs</code>, or <code>/Your SeaTable data volume/nginx-logs</code> in the server that run the docker.</p> <ul> <li>dtable-web.access.log</li> <li>dtable-web.error.log</li> <li>access.log</li> <li>error.log</li> </ul>"},{"location":"maintain/others/","title":"Other maintenance","text":""},{"location":"maintain/others/#measurements-for-domain-changed","title":"Measurements for domain changed","text":"<p>Changing of domain can make an image or file unreadable in a SeaTable base.  Therefore, we provide some commands for users for transferring all the image or file urls from an old domain to a new one in a base.</p> <pre><code>$ docker exec -it seatable /bin/bash\n\n# for one base\n$ seatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py domain_transfer -uuid &lt;:base uuid&gt; -od &lt;:old domain&gt; -nd &lt;:new domain&gt;\n\n# for all bases\n$ seatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py domain_transfer -all -od &lt;:old domain&gt; -nd &lt;:new domain&gt;\n</code></pre> <p>For example, we want to change the domain in base '695fa115-4927-4be1-b5b6-fbbbabd43b72' from 'https://dev.seatable.cn' into 'https://cloud.seatable.io' , we can run:  </p> <pre><code>seatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py domain_transfer -uuid 695fa115-4927-4be1-b5b6-fbbbabd43b72  -od https://dev.seatable.cn -nd https://cloud.seatable.io\n</code></pre>"},{"location":"maintain/seatable_fsck/","title":"SeaTable FSCK","text":"<p>On the server side, SeaTable stores the files in the libraries in an internal format. SeaTable has its own representation of directories and files (similar to Git).</p> <p>With default installation, these internal objects are stored in the server's file system directly (such as Ext4, NTFS). But most file systems don't assure the integrity of file contents after a hard shutdown or system crash. So if new SeaTable internal objects are being written when the system crashes, they can be corrupt after the system reboots. This will make part of the corresponding library not accessible.</p> <p>Note: If you store the seafile-data directory in a battery-backed NAS (like EMC or NetApp), or use S3 backend available in the Pro edition, the internal objects won't be corrupt.</p> <p>SeaTable server comes with a seaf-fsck tool to help you recover from this corruption (similar to git-fsck tool). This tool recovers any corrupted library back to its last consistent and usable state.</p> <p>We provide a seaf-fsck.sh script. The seaf-fsck tool accepts the following arguments:</p> <pre><code>docker exec -it seatable /opt/seatable/seatable-server-latest/seaf-fsck.sh [--repair|-r] [--export|-E export_path] [repo_id_1 [repo_id_2 ...]]\n</code></pre> <p>There are three modes of operation for seaf-fsck:</p> <ol> <li>checking integrity of tables.</li> <li>repairing corrupted tables.</li> <li>exporting tables.</li> </ol>"},{"location":"maintain/seatable_fsck/#checking-integrity-of-libraries","title":"Checking Integrity of Libraries","text":"<p>Running seaf-fsck.sh without any arguments will run a read-only integrity check for all tables.</p> <pre><code>docker exec -it seatable /opt/seatable/seatable-server-latest/seaf-fsck.sh\n</code></pre> <p>If you want to check integrity for specific tables, just append the library id's as arguments:</p> <pre><code>cd seafile-server-latest\n./seaf-fsck.sh [library-id1] [library-id2] ...\n</code></pre> <p>The output looks like:</p> <pre><code>[02/13/15 16:21:07] fsck.c(470): Running fsck for repo ca1a860d-e1c1-4a52-8123-0bf9def8697f.\n[02/13/15 16:21:07] fsck.c(413): Checking file system integrity of repo fsck(ca1a860d)...\n[02/13/15 16:21:07] fsck.c(35): Dir 9c09d937397b51e1283d68ee7590cd9ce01fe4c9 is missing.\n[02/13/15 16:21:07] fsck.c(200): Dir /bf/pk/(9c09d937) is corrupted.\n[02/13/15 16:21:07] fsck.c(105): Block 36e3dd8757edeb97758b3b4d8530a4a8a045d3cb is corrupted.\n[02/13/15 16:21:07] fsck.c(178): File /bf/02.1.md(ef37e350) is corrupted.\n[02/13/15 16:21:07] fsck.c(85): Block 650fb22495b0b199cff0f1e1ebf036e548fcb95a is missing.\n[02/13/15 16:21:07] fsck.c(178): File /01.2.md(4a73621f) is corrupted.\n[02/13/15 16:21:07] fsck.c(514): Fsck finished for repo ca1a860d.\n</code></pre> <p>The corrupted files and directories are reported.</p> <p>Sometimes you can see output like the following:</p> <pre><code>[02/13/15 16:36:11] Commit 6259251e2b0dd9a8e99925ae6199cbf4c134ec10 is missing\n[02/13/15 16:36:11] fsck.c(476): Repo ca1a860d HEAD commit is corrupted, need to restore to an old version.\n[02/13/15 16:36:11] fsck.c(314): Scanning available commits...\n[02/13/15 16:36:11] fsck.c(376): Find available commit 1b26b13c(created at 2015-02-13 16:10:21) for repo ca1a860d.\n</code></pre> <p>This means the \"head commit\" (current state of the library) recorded in database is not consistent with the library data. In such case, fsck will try to find the last consistent state and check the integrity in that state.</p> <p>Tips: If you have many libraries, it's helpful to save the fsck output into a log file for later analysis.</p>"},{"location":"maintain/seatable_fsck/#repairing-corruption","title":"Repairing Corruption","text":"<p>Corruption repair in seaf-fsck basically works in two steps:</p> <ol> <li>If the library state (commit) recorded in database is not found in data directory, find the last available state from data directory.</li> <li>Check data integrity in that specific state. If files or directories are corrupted, set them to empty files or empty directories. The corrupted paths will be reported, so that the user can recover them from somewhere else.</li> </ol> <p>Running the following command repairs all the libraries:</p> <pre><code>cd seafile-server-latest\n./seaf-fsck.sh --repair\n</code></pre> <p>Most of time you run the read-only integrity check first, to find out which libraries are corrupted. And then you repair specific libraries with the following command:</p> <pre><code>cd seafile-server-latest\n./seaf-fsck.sh --repair [library-id1] [library-id2] ...\n</code></pre> <p>After repairing, in the library history, seaf-fsck includes the list of files and folders that are corrupted. So it's much easier to located corrupted paths.</p>"},{"location":"maintain/seatable_fsck/#best-practice-for-repairing-a-library","title":"Best Practice for Repairing a Library","text":"<p>To check all libraries and find out which library is corrupted, the system admin can run seaf-fsck.sh without any argument and save the output to a log file. Search for keyword \"Fail\" in the log file to locate corrupted libraries. You can run seaf-fsck to check all libraries when your Seafile server is running. It won't damage or change any files.</p> <p>When the system admin find a library is corrupted, he/she should run seaf-fsck.sh with \"--repair\" for the library. After the command fixes the library, the admin should inform user to recover files from other places. There are two ways:</p> <ul> <li>Upload corrupted files or folders via the web interface</li> <li>If the library was synced to some desktop computer, and that computer has a correct version of the corrupted file, re-syncing the library on that computer will upload the corrupted files to the server.</li> </ul>"},{"location":"maintain/seatable_fsck/#exporting-libraries-to-file-system","title":"Exporting Libraries to File System","text":"<p>Since version 4.2.0, you can use seaf-fsck to export all the files in libraries to external file system (such as Ext4). This procedure doesn't rely on the seafile database. As long as you have your seafile-data directory, you can always export your files from Seafile to external file system.</p> <p>The command syntax is</p> <pre><code>cd seafile-server-latest\n./seaf-fsck.sh --export top_export_path [library-id1] [library-id2] ...\n</code></pre> <p>The argument <code>top_export_path</code> is a directory to place the exported files. Each library will be exported as a sub-directory of the export path. If you don't specify library ids, all libraries will be exported.</p> <p>Currently only un-encrypted libraries can be exported. Encrypted libraries will be skipped.</p>"},{"location":"maintain/seatable_gc/","title":"SeaTable GC","text":"<p>SeaTable uses storage de-duplication technology to reduce storage usage. The underlying data blocks will not be removed immediately after you delete a file or a base. As a result, the number of unused data blocks will increase on SeaTable server.</p> <p>To release the storage space occupied by unused blocks, you have to run a garbage collection program to clean up unused blocks on your server.</p>"},{"location":"maintain/seatable_gc/#configuration","title":"Configuration","text":"<p>Add following lines to <code>seafile.conf</code> to keep deleted files for only 60 days:</p> <pre><code>[history]\nkeep_days = 60\n</code></pre>"},{"location":"maintain/seatable_gc/#dry-run-mode","title":"Dry-run mode","text":"<p>To see how much garbage can be collected without actually removing any garbage, use the dry-run option:</p> <pre><code>seatable.sh gc --dry-run\n</code></pre> <p>The output should look like:</p> <pre><code>Starting seafserv-gc, please wait ...\n2021-04-27 14:30:13 gc-core.c(904): Database is MySQL/Postgre/Oracle, use online GC.\n2021-04-27 14:30:13 gc-core.c(928): Using up to 1 threads to run GC.\n2021-04-27 14:30:13 gc-core.c(873): GC version 1 repo plugins repo(92ba689b-51a3-457b-a264-1e46537025c8)\n2021-04-27 14:30:13 gc-core.c(609): No blocks for repo 92ba689b, skip GC.\n\n2021-04-27 14:30:13 gc-core.c(873): GC version 1 repo My Workspace(7041b9ea-cec7-43a1-9639-70aaeb572aed)\n2021-04-27 14:30:13 gc-core.c(615): GC started for repo 7041b9ea. Total block number is 14.\n2021-04-27 14:30:13 gc-core.c(78): GC index size is 1024 Byte for repo 7041b9ea.\n2021-04-27 14:30:13 gc-core.c(390): Populating index for repo 7041b9ea.\n2021-04-27 14:30:13 gc-core.c(369): Traversed 22 commits, 14 blocks for repo 7041b9ea.\n2021-04-27 14:30:13 gc-core.c(682): Scanning and deleting unused blocks for repo 7041b9ea.\n2021-04-27 14:30:13 gc-core.c(700): GC finished for repo 7041b9ea. 14 blocks total, about 14 reachable blocks, 0 blocks are removed.\n\n2021-04-27 14:30:13 gc-core.c(873): GC version 1 repo My Library Template(3fe6b035-2e0f-4c2f-9347-2673b5778e72)\n2021-04-27 14:30:13 gc-core.c(609): No blocks for repo 3fe6b035, skip GC.\n2021-04-27 14:30:13 gc-core.c(773): === Repos deleted by users ===\n2021-04-27 14:30:13 gc-core.c(980): === GC is finished ===\nseafserv-gc run done\nDone.\n</code></pre>"},{"location":"maintain/seatable_gc/#removing-garbage","title":"Removing Garbage","text":"<p>Run a garbage collection program without adding --dry-run option to actually remove garbage block.</p> <pre><code>seatable.sh gc\n</code></pre>"},{"location":"upgrade/extra-upgrade-notice/","title":"Extra upgrade notice","text":""},{"location":"upgrade/extra-upgrade-notice/#43","title":"4.3","text":"New default setup with multiple predefined yml files <p>Version 4.3 introduces a new installation method relying on multiple yml files, an .env file and caddy as new reverse proxy. This setup is more convenient and will be the basis for all future explanations.</p> <p>It is not mandatory to switch to this new setup but it is recommended. Read this article for more information.</p> mariadb container healthchecks <p>This help is important if your MariaDB container remains unhealthy after executing <code>docker compose up -d</code>. This issue arises specifically if your initial MariaDB version was below 10.6 and you have now upgraded to a newer version. Older versions did not create the required health check user in the local database, causing the health checks to fail.</p> <p>We have provided a simple script for you to download and create the necessary health check user. Please use the following commands to download and execute it. The script assumes the MariaDB container is running and that you have followed all installation instructions outlined in this manual.</p> <pre><code>curl -sSL https://admin.seatable.io/downloads/add_mariadb_healthcheck.sh | bash\n</code></pre> <p>If you wish to review the script's functionality, simply open it in your browser: Add MariaDB Healthcheck Script.</p> <p>The script essentially adds the user <code>healthcheck</code> to the MariaDB database and stores the credentials in a file accessible to the container.\"</p> Django CSRF protection <p>Django 4.* has introduced a new check for the origin http header in CSRF verification. It now compares the values of the origin field in HTTP header and the host field in HTTP header. If they are different, an error is triggered.</p> <p>If you deploy Seafile behind a proxy, if you use a non-standard port or if you deploy Seafile in cluster, it is likely that the origin field in HTTP header received by Django and the host field in HTTP header received by Django are different. This mismatch results in a CSRF error.</p> <p>You can add <code>CSRF_TRUSTED_ORIGINS</code> to <code>dtable_web_settings.py</code> to solve the problem:</p> <pre><code>CSRF_TRUSTED_ORIGINS = [\"https://&lt;your-domain&gt;\"]\n</code></pre>"},{"location":"upgrade/extra-upgrade-notice/#40","title":"4.0","text":"Big data storage migration needed (Enterprise only) <p>Version 4.0 modifies the data format of the backup of big data storage. Compared with previous upgrades, an additional format migration script needs to be run inside the docker:</p> <pre><code># replace seatable if you container image is called differently.\ndocker exec -it seatable /templates/migrate-dtable-db-backups.sh\n</code></pre> Universal App is now enabled by default <p>The Enterprise Edition enables the Universal app by default. The option ENABLE_UNIVERSAL_APP is removed from <code>dtable_web_settings.py</code>.</p> Recycle bin is emptied after 30 days <p>SeaTable empties the recycle bin automatically after 30 days. If you want to change this default behaviour, add the following option to your <code>dtable_web_settings.py</code>.</p> <pre><code>TRASH_CLEAN_AFTER_DAYS = 30\n</code></pre> New API Limits <p>API_THROTTLE_RATES is used to replace the old REST_FRAMEWORK option. Usually the default values of the API_THROTTLE_RATES are good. Change the following values only if need higher limits. Add one of multiple options to your <code>dtable_web_settings.py</code>.</p> <pre><code>API_THROTTLE_RATES = {\n'ping': '3000/minute',\n'anon': '60/minute',\n'user': '3000/minute',\n'sync_common_dataset': '60/minute',\n'password_reset': '10/minute',\n'org-admin': '1000/day',\n'app': '1000/minute',\n'import': '20/minute',   # Limit the rate of API calls for importing via excel/csv\n'export': '20/minute',   # Limit the rate of export base, table and view\n}\n</code></pre>"},{"location":"upgrade/extra-upgrade-notice/#30","title":"3.0","text":"<p>3.0 adds another component, dtable-storage-server, which provides better performance for persistent storage of bases. A base in SeaTable is saved as a file, which is automatically saved every 5 minutes. In 2.x, this file saved in seaf-server, but seaf-server will keep a version for each save, which will take up a lot of disk space. In 3.0, only one version is actually saved when a snapshot is generated every 24 hours, which saves space. dtable-storage-server is a simple abstract layer of traditional file system and object storage.</p> <ol> <li>For new installation, dtable-storage-server.conf will be generated automatically. For upgrade from 2.x, you need to generate the config file manually</li> </ol> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh init\n</code></pre> <p>dtable-storage-server.conf is as follows</p> <pre><code>[general]\nlog_dir = /opt/seatable/logs\ntemp_file_dir = /tmp/tmp-storage-data\n\n[storage backend]\ntype = filesystem\npath = /opt/seatable/storage-data\n\n[snapshot]\ninterval = 86400\nkeep_days = 180\n</code></pre> <ol> <li>Add configuration in dtable_web_settings.py so that the newly created bases are saved to the dtable-storage-server, and the old bases are still read and written from seaf-server.</li> </ol> <p>In dtable_web_settings.py</p> <pre><code>NEW_DTABLE_IN_STORAGE_SERVER = True\n</code></pre> <ol> <li>Enterprise edition needs to add configuration items in dtable-db.conf to automatically back up the archived data in the dtable-db.</li> </ol> <p>In dtable-db.conf</p> <pre><code>[backup]\ndtable_storage_server_url = http://127.0.0.1:6666\nbackup_interval = 1440\nkeep_backup_num = 3\n</code></pre>"},{"location":"upgrade/extra-upgrade-notice/#27","title":"2.7","text":"<p>The configuration of the embedded base to other webpages (iframe mode) needs to be modified as follows</p> <p>In dtable_web_settings.py</p> <pre><code>SESSION_COOKIE_SAMESITE = None\n              |\n              V\nSESSION_COOKIE_SAMESITE = 'None'\n\n\nCSRF_COOKIE_SAMESITE = None\n              |\n              V\nCSRF_COOKIE_SAMESITE = 'None'\n</code></pre>"},{"location":"upgrade/extra-upgrade-notice/#23","title":"2.3","text":"<p>In 2.3 version, we made a small change to dtable-db configuration. If you're upgrading from older versions, you have to manually add below option to conf/dtable-db.conf:</p> <pre><code>[general]\n......\nlog_dir = /shared/seatable/logs\n\n......\n</code></pre> <p>It's also suggested to change the <code>total_cache_size</code> option to a larger value (e.g. 500MB, depending on how much memory you have):</p> <pre><code>[dtable cache]\n......\ntotal_cache_size = 500\n\n......\n</code></pre> <p>You also need to add access information to dtable-server MySQL database. (You have to change below options based on your conf/dtable-server.json)</p> <pre><code>[database]\nhost = 127.0.0.1\nuser = root\npassword = mypass\ndb_name = dtable\n</code></pre> <p>Add <code>DTABLE_DB_URL</code> to dtable_web_settings.py</p> <pre><code>DTABLE_DB_URL = 'https://&lt;your-domain&gt;/dtable-db/'\n</code></pre> <p>Add dtable-db configuration to nginx.conf</p> <pre><code>    location /dtable-db/ {\n        proxy_pass         http://127.0.0.1:7777/;\n        proxy_redirect     off;\n        proxy_set_header   Host              $host;\n        proxy_set_header   X-Real-IP         $remote_addr;\n        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\n        proxy_set_header   X-Forwarded-Host  $server_name;\n        proxy_set_header   X-Forwarded-Proto $scheme;\n\n        access_log      /opt/nginx-logs/dtable-db.access.log seatableformat;\n        error_log       /opt/nginx-logs/dtable-db.error.log;\n    }\n</code></pre>"},{"location":"upgrade/extra-upgrade-notice/#21","title":"2.1","text":"<p>2.1 add another component dtable-db, which is used to provide SQL query API (more features will be provided based on this component). For newly installation, the config file will be generated automatically. For upgrade from 2.0, you need to add the config file manually.</p> <p>Add a new file conf/dtable-db.conf with the following contents and modify <code>private_key</code> according to your instance:</p> <pre><code>[general]\nhost = 127.0.0.1\nport = 7777\n\n[storage]\ndata_dir = /opt/seatable/db-data\n\n[dtable cache]\nprivate_key = \"my private key\"\ndtable_server_url = \"http://127.0.0.1:5000\"\nexpire_time = 600\ntotal_cache_size = 1\nclean_cache_interval = 300\n</code></pre> <p>The value of <code>private_key</code> should be the same as the value in <code>dtable_server_config.json</code>.</p> <p>dtable_server_url should be http://127.0.0.1:5000. You don't need to modify the value.</p>"},{"location":"upgrade/migrate_seatable_release/","title":"Migrate to new installation method","text":"<p>4.3</p> <p>The new installation method makes future updates and the installation of additional components child's play.</p> <p>To bring SeaTable Server into the new form, the following things must happen:</p> <ul> <li>Directory structure changes.</li> <li>Container names change.</li> <li>Configuration files must be adapted.</li> </ul> <p>The Python Runner, FAAS Scheduler and OnlyOffice will be removed. Then can easily be installed again afterwords with the new method.</p>"},{"location":"upgrade/migrate_seatable_release/#required-steps","title":"Required steps","text":""},{"location":"upgrade/migrate_seatable_release/#1-stop-all-containers","title":"1. Stop all containers","text":"<p>Stop all containers (not only SeaTable) but also Python Runner, Faas-Scheduler and OnlyOffice.</p> <pre><code>cd /opt/seatable\ndocker compose down\n</code></pre> <p>docker-compose vs docker compose</p> <p>The usage of <code>docker-compose</code> (with - in the command) is not supported any longer. Please switch to the new command <code>docker compose</code>. Please ask google for help with your linux system. For debian and ubuntu this might be sufficient:</p> <pre><code>apt update &amp;&amp; \\\napt remove docker-compose\ncurl -fsSL get.docker.com | bash\n</code></pre> <p>Check with <code>docker ps</code> if containers still run and execute <code>docker stop &lt;container-name&gt;</code> to stop all containers.</p>"},{"location":"upgrade/migrate_seatable_release/#2-remove-python-pipeline-and-onlyoffice","title":"2. Remove Python Pipeline and OnlyOffice","text":"<p>If you installed onlyoffice, python runner or faas scheduler, you should now remove them.</p> <pre><code>rm -r /opt/onlyoffice\nrm -r /opt/seatable-python-runner\nrm -r /opt/seatable-faas-scheduler\n</code></pre>"},{"location":"upgrade/migrate_seatable_release/#3-get-parameters-password-from-current-docker-composeyml","title":"3. Get parameters password from current docker-compose.yml","text":"<p>Open up your current docker-compose.yml with the editor of your choice and note down these two values:</p> <ul> <li>MYSQL_ROOT_PASSWORD</li> <li>TIME_ZONE</li> </ul> <p>Rename docker-compose.yml to docker-compose.old to prevent that it is used anylonger. The command is</p> <pre><code>mv /opt/seatable/docker-compose.yml /opt/seatable/docker-compose.old\n</code></pre>"},{"location":"upgrade/migrate_seatable_release/#4-create-new-env-file","title":"4. Create new .env file.","text":"<p>Copy and paste these commands to download the new installation method.</p> <pre><code>mkdir /opt/seatable-compose &amp;&amp; \\\ncd /opt/seatable-compose &amp;&amp; \\\nwget -c https://github.com/seatable/seatable-release/releases/latest/download/seatable-compose.tar.gz \\\n-O - | tar -xz -C /opt/seatable-compose &amp;&amp; \\\ncp -n .env-release .env\n</code></pre> <p>Open <code>/opt/seatable-compose/.env</code> with your editor of choice (like vim or nano) and update these values according to your needs:</p> <ol> <li>TIME_ZONE</li> <li>SEATABLE_MYSQL_ROOT_PASSWORD</li> <li>SEATABLE_SERVER_HOSTNAME</li> </ol> <p>The two values SEATABLE_ADMIN_EMAIL and SEATABLE_ADMIN_PASSWORD have to be set, because the values are expects. Currently the values are only used during the initial installation but this might change in the future.</p> <p>Developer edition requires an additional variable</p> <p>If you are using SeaTable Developer Edition instead of Enterprise Edition, add the following parameter to your <code>.env</code> file. This overwrites the used SeaTable Docker image.</p> <pre><code>SEATABLE_IMAGE='seatable/seatable-developer:latest' # (1)!\n</code></pre> <ol> <li>Instead of latest you can select a concrete version from https://hub.docker.com/r/seatable/seatable-developer/tags.</li> </ol>"},{"location":"upgrade/migrate_seatable_release/#5-move-the-license-file","title":"5. Move the license file","text":"<p>SeaTable Enterprise requires a license to start</p> <p>This step is solely required for SeaTable Enterprise Edition installation. You can bypass this step for SeaTable Developer Edition and just create an empty file at <code>/opt/seatable-compose/seatable-license.txt</code>.</p> <p>Copy your existing seatable-license.txt to this <code>/opt/seatable-compose</code> folder. The command for that should be:</p> <pre><code>cp /opt/seatable/seatable-data/seatable-license.txt /opt/seatable-compose/\n</code></pre>"},{"location":"upgrade/migrate_seatable_release/#6-move-some-folder","title":"6. Move some folder","text":"<p>With this command you will move two folders to new locations.</p> <pre><code>mv /opt/seatable/mysql-data /opt/mariadb\nmv /opt/seatable/seatable-data /opt/seatable-server\n</code></pre>"},{"location":"upgrade/migrate_seatable_release/#7-change-database-container-in-configuration-file","title":"7. Change database container in configuration file","text":"<p>In former times the mariadb container was named db. In the future we would like to call this container mariadb. Therefore we have to update the configuration files that SeaTable can find the SQL-database and connect to it.</p> <p>All changes have to be done in <code>/opt/seatable-server/seatable/conf</code>. These are the configuration files that have to be updated with your editor of choice.</p> <pre><code>cd /opt/seatable-server/seatable/conf\nnano ccnet.conf\n# replace ccnet.conf with the other configuration file names and update all files\n</code></pre>"},{"location":"upgrade/migrate_seatable_release/#ccnetconf","title":"ccnet.conf","text":"<pre><code>HOST = db   # change to mariadb\n</code></pre>"},{"location":"upgrade/migrate_seatable_release/#dtable-dbconf","title":"dtable-db.conf","text":"<p>No change needed.</p>"},{"location":"upgrade/migrate_seatable_release/#dtable-eventsconf","title":"dtable-events.conf","text":"<pre><code>[DATABASE]\nhost = db   # change to mariadb\n</code></pre>"},{"location":"upgrade/migrate_seatable_release/#dtable_server_configjson","title":"dtable_server_config.json","text":"<pre><code>\"host\": \"db\"   # change to mariadb\n</code></pre>"},{"location":"upgrade/migrate_seatable_release/#dtable-storage-serverconf","title":"dtable-storage-server.conf","text":"<p>No change needed.</p>"},{"location":"upgrade/migrate_seatable_release/#dtable_web_settingspy","title":"dtable_web_settings.py","text":"<pre><code>DATABASES = {\n    'default': {\n        ...\n        'HOST': 'db'   # change to mariadb\n        ...\n    }\n}\n</code></pre>"},{"location":"upgrade/migrate_seatable_release/#seafileconf","title":"seafile.conf","text":"<pre><code>host = db   # change to mariadb\n</code></pre>"},{"location":"upgrade/migrate_seatable_release/#8-remove-https-from-nginx","title":"8. Remove HTTPS from nginx","text":"<p>In this last step we want to change the configuration of the nginx, which is included in the SeaTable Server container. In the past this nginx was listing on the ports 80 (HTTP) and 443 (HTTPS) and in the future nginx should only listen to port 80. The TLS Termination and the management of the certificates will be done in the future with caddy (which is much simpler).</p> <p>First let's make a copy of your current nginx file to make sure that we have a safety leash.</p> <pre><code>cp /opt/seatable-server/seatable/conf/nginx.conf /opt/seatable-server/seatable/conf/nginx.backup\n</code></pre> <p>Now we want to make these changes in the <code>nginx.conf</code>:</p> <ol> <li>We want to remove the server block which is reponsible for listening to port 80 (or change it to another port)</li> <li>We want to update the second server block and change port 443 to 80</li> <li>We want to remove all lines that start with ssl_</li> </ol> <p>You can do this with these commands:</p> <pre><code>cd /opt/seatable-server/seatable/conf\nsed -i 's/ listen 80/ listen 9999/' ./nginx.conf\nsed -i 's/ listen 443 ssl/ listen 80/' ./nginx.conf\nsed -i '/^[[:space:]]*ssl_/d' ./nginx.conf\n</code></pre>"},{"location":"upgrade/migrate_seatable_release/#9-start-your-seatable-server","title":"9. Start your SeaTable Server","text":"<p>Now the migration is complete and it is time to start your SeaTable Server again.</p> <pre><code>cd /opt/seatable-compose\ndocker compose up -d\n</code></pre> <p>Be patent and give the containers time to start. Then open your browser and check if you can reach your SeaTable server.</p> <p>If something is not working, check the /installation-rework/faq/ article. In the case that your mariadb container stays unhealth, check the Extra upgrade notices for version 4.3.</p>"},{"location":"upgrade/upgrade_manual/","title":"Upgrade manual","text":"<p>Updating/Upgrade (we don't differenciate) a SeaTable Server should take just a few seconds. Simply pull the latest Docker images for all components, restart the containers, and let the system automatically handle necessary database updates. Within moments, all essential services of the SeaTable Server will be accessible.</p> <p>Versions before 4.3 require additional steps</p> <p>For updates of version before 4.3, you find instructions at the end of this article. These version require that you update the database structure and that you start the SeaTable service manually.</p> <p>Backup is recommended</p> <p>Updating SeaTable Server contains changes to your database. To protect your data, create a backup of your database first. See backup and recovery for more details.</p>"},{"location":"upgrade/upgrade_manual/#how-to-update-seatable-server","title":"How to update SeaTable Server","text":"<p>With version 4.3 we introduced a new way to install, update and maintain a SeaTable server. Before 4.3 you used to have one big docker-compose.yml. Even if it not mandatory to switch this setup, but we recommend it. Please check out this article for more details.</p> <p>To update, choose the appropriate setup of yours.</p> Setup with <code>/opt/seatable-compose</code> folder (new) <p>Just ran this command to update SeaTable and all additional components.</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\nwget -c https://github.com/seatable/seatable-release/releases/latest/download/seatable-compose.tar.gz \\\n-O - | tar -xz -C /opt/seatable-compose &amp;&amp; \\\ndocker compose pull\ndocker compose down\ndocker compose up -d\n</code></pre> <p>The default yml files will be overwritten! Use custom files instead.</p> <p>This command replaces all predefined yml files in your <code>/opt/seatable-compose</code> folder. It will not touch your .env file and your \"custom\" yml files. If you made some changes to the predefined yml files, make sure to save these changes and follow the recommendations to create custom copies in the future.</p> Setup with one docker-compose.yml (deprecated) <p>Open your docker-compose.yml file and search for <code>seatable/seatable-enterprise:{tag}</code>. Replace the {tag} with the latest version and save the file.</p> <p>No execute these commands, to pull and start the newest version.</p> <pre><code>docker compose pull\ndocker compose up -d\n</code></pre> <p>This will not update any other service in your docker-compose file. You have to take care by yourself to keep the other services up-to-date.</p> <p>After some seconds your SeaTable Server should be reachable again. You can check the current version of your SeaTable Server opening the URL <code>https://&lt;your-seatable-domain&gt;/server-info</code>.</p>"},{"location":"upgrade/upgrade_manual/#version-specific-changes-and-configurations","title":"Version specific changes and configurations","text":"<p>Some versions require specific configuration changes. Also new features might be introduced that needs specific configuration. Please check after each update the extra update notices.</p>"},{"location":"upgrade/upgrade_manual/#naming-conventions-and-update-path","title":"Naming conventions and update path","text":"<p>SeaTable follows typical naming conventions for updates:</p> <ul> <li>2 3 is a major version upgrade.</li> <li>3.3 3.4 is a minor version upgrade.</li> <li>3.3.3 3.3.5 is a patch upgrade.</li> </ul> <p>Some software solutions require that you follow a specific update path. Meaning like you first have to upgrade to the next major version and then go on. This is not necessary with SeaTable.</p> <p>You can update from any version to the last one in one step. SeaTable v4.3 and newer take care of the required database updates.</p>"},{"location":"upgrade/upgrade_manual/#update-procedure-before-v43","title":"Update procedure before v4.3","text":"<p>This part of the manual is only for older version, meaning if you are updating to version v4.2 or older. As soon as you update to version 4.3 or newer, you can ignore the following part.</p> Update procedure before v4.3 <p>In general, to upgrade to a new version, you need to</p> <ol> <li>Pull a new docker image version</li> <li>Stop the service and do the database migration manually</li> <li>Restart the service</li> </ol> <p>If there are extra notes for a specific version, you can find it here: extra notices</p>"},{"location":"upgrade/upgrade_manual/#get-latest-seatable","title":"Get latest SeaTable","text":"<p>You can find all versions of SeaTable from Docker Hub.</p> <p>Run the following command to get the latest version of Seatable.</p> <pre><code>docker pull seatable/seatable-enterprise:{tag}\n</code></pre> <p>Stop the currently running SeaTable container.</p> <pre><code>docker compose down\n</code></pre> <p>Then modify SeaTable version in \"docker-compose.yml\". And start a new SeaTable container.</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"upgrade/upgrade_manual/#upgrade-database","title":"Upgrade database","text":"<p>Major version upgrade, like from 1.x to 2.x, and minor version upgrade, like from 1.1.x to 1.2.x, involve database changes. You need to manually change the database like following.</p> <p>Login to the SeaTable container. Then execute the upgrade statement (replace the version numbers accordingly).</p> <pre><code># Example of the required commands to update from 3.2.6 to 3.5.10\ndocker exec -it seatable /bin/bash\n\nseatable.sh upgrade-sql 3.3\nseatable.sh upgrade-sql 3.4\nseatable.sh upgrade-sql 3.5\n</code></pre> <p>If the above commands failed to execute for some reasons, (for example, you are using external database instead of the default one started by docker-compose), you can execute the database upgrade commands manually as below:</p> <pre><code>docker exec -it seatable /bin/bash\n\ncd /opt/seatable/seatable-server-latest/sql/mysql/upgrade\nmysql -h$DB_HOST -p$DB_ROOT_PASSWD dtable_db &lt; ./3.3/dtable.sql\nmysql -h$DB_HOST -p$DB_ROOT_PASSWD dtable_db &lt; ./3.4/dtable.sql\nmysql -h$DB_HOST -p$DB_ROOT_PASSWD dtable_db &lt; ./3.5/dtable.sql\n</code></pre> <p>If you upgrade several versions at once, just run all the database upgrade statement one by one, starting from the lowest version.</p> <p>Tiny version update</p> <p>Tiny version upgrade, like from 3.3.8 to 3.3.10, does not involve database changes.</p>"},{"location":"upgrade/upgrade_manual/#start-seatable-server","title":"Start SeaTable server","text":"<p>Now you can start the SeaTable service. Execute the following command in the host server:</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh start\n</code></pre>"}]}